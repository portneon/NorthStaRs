// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(uuid())
  username       String       @unique
  email          String       @unique
  password       String
  xp             Int          @default(0)
  level          Int          @default(1)
  streakCount    Int          @default(0)
  lastLogin      DateTime?
  badges         UserBadge[]
  attempts       Attempt[]
  leaderboard    Leaderboard?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  Reward Reward[]
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String?
  topics      Topic[]
  quizzes     Quiz[]
  createdAt   DateTime @default(now())
}

model Topic {
  id          String  @id @default(uuid())
  name        String
  description String?
  course      Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String?
  quizzes     Quiz[]
}

model Quiz {
  id            String     @id @default(uuid())
  title         String
  description   String?
  difficulty    String
  topic         Topic?     @relation(fields: [topicId], references: [id])
  topicId       String?
  course        Course?    @relation(fields: [courseId], references: [id])
  courseId      String?
  questions     Question[]
  attempts      Attempt[]
  createdAt     DateTime   @default(now())
}

model Question {
  id              String       @id @default(uuid())
  text            String
  quiz            Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId          String
  options         Option[]
  correctOptionId String
  explanation     String?
  userAnswers     UserAnswer[]
}

model Option {
  id          String       @id @default(uuid())
  text        String
  question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  userAnswers UserAnswer[]
}

model Attempt {
  id           String       @id @default(uuid())
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  quiz         Quiz         @relation(fields: [quizId], references: [id])
  quizId       String
  startedAt    DateTime     @default(now())
  finishedAt   DateTime?
  score        Int          @default(0)
  timeTakenSec Int?
  userAnswers  UserAnswer[]
}

model UserAnswer {
  id             String   @id @default(uuid())
  attempt        Attempt  @relation(fields: [attemptId], references: [id])
  attemptId      String
  question       Question @relation(fields: [questionId], references: [id])
  questionId     String
  selectedOption Option   @relation(fields: [optionId], references: [id])
  optionId       String
  isCorrect      Boolean
}

model Badge {
  id          String      @id @default(uuid())
  name        String
  description String
  iconUrl     String?
  xpReward    Int         @default(50)
  users       UserBadge[]
}

model UserBadge {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  badge    Badge    @relation(fields: [badgeId], references: [id])
  badgeId  String
  earnedAt DateTime @default(now())
}

model Leaderboard {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  totalXP     Int      @default(0)
  rank        Int?
  lastUpdated DateTime @default(now())
}

model Reward {
  id        String   @id @default(uuid())
  type      String
  amount    Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

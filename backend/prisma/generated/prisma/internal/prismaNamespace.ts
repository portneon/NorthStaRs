
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models.ts"
import { type PrismaClient } from "./class.ts"

export type * from '../models.ts'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
export const prismaVersion: PrismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

/**
 * Utility Types
 */

export type Bytes = runtime.Bytes
export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue


export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull


type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  User: 'User',
  Course: 'Course',
  Topic: 'Topic',
  Quiz: 'Quiz',
  Question: 'Question',
  Option: 'Option',
  Attempt: 'Attempt',
  UserAnswer: 'UserAnswer',
  Badge: 'Badge',
  UserBadge: 'UserBadge',
  Leaderboard: 'Leaderboard',
  Reward: 'Reward'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<GlobalOmitOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "user" | "course" | "topic" | "quiz" | "question" | "option" | "attempt" | "userAnswer" | "badge" | "userBadge" | "leaderboard" | "reward"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    Course: {
      payload: Prisma.$CoursePayload<ExtArgs>
      fields: Prisma.CourseFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CourseFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload>
        }
        findFirst: {
          args: Prisma.CourseFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload>
        }
        findMany: {
          args: Prisma.CourseFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload>[]
        }
        create: {
          args: Prisma.CourseCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload>
        }
        createMany: {
          args: Prisma.CourseCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.CourseDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload>
        }
        update: {
          args: Prisma.CourseUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload>
        }
        deleteMany: {
          args: Prisma.CourseDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CourseUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.CourseUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload>
        }
        aggregate: {
          args: Prisma.CourseAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCourse>
        }
        groupBy: {
          args: Prisma.CourseGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CourseGroupByOutputType>[]
        }
        count: {
          args: Prisma.CourseCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CourseCountAggregateOutputType> | number
        }
      }
    }
    Topic: {
      payload: Prisma.$TopicPayload<ExtArgs>
      fields: Prisma.TopicFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TopicFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TopicPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TopicFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TopicPayload>
        }
        findFirst: {
          args: Prisma.TopicFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TopicPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TopicFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TopicPayload>
        }
        findMany: {
          args: Prisma.TopicFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TopicPayload>[]
        }
        create: {
          args: Prisma.TopicCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TopicPayload>
        }
        createMany: {
          args: Prisma.TopicCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.TopicDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TopicPayload>
        }
        update: {
          args: Prisma.TopicUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TopicPayload>
        }
        deleteMany: {
          args: Prisma.TopicDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TopicUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.TopicUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TopicPayload>
        }
        aggregate: {
          args: Prisma.TopicAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTopic>
        }
        groupBy: {
          args: Prisma.TopicGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TopicGroupByOutputType>[]
        }
        count: {
          args: Prisma.TopicCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TopicCountAggregateOutputType> | number
        }
      }
    }
    Quiz: {
      payload: Prisma.$QuizPayload<ExtArgs>
      fields: Prisma.QuizFieldRefs
      operations: {
        findUnique: {
          args: Prisma.QuizFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuizPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.QuizFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuizPayload>
        }
        findFirst: {
          args: Prisma.QuizFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuizPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.QuizFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuizPayload>
        }
        findMany: {
          args: Prisma.QuizFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuizPayload>[]
        }
        create: {
          args: Prisma.QuizCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuizPayload>
        }
        createMany: {
          args: Prisma.QuizCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.QuizDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuizPayload>
        }
        update: {
          args: Prisma.QuizUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuizPayload>
        }
        deleteMany: {
          args: Prisma.QuizDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.QuizUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.QuizUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuizPayload>
        }
        aggregate: {
          args: Prisma.QuizAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateQuiz>
        }
        groupBy: {
          args: Prisma.QuizGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.QuizGroupByOutputType>[]
        }
        count: {
          args: Prisma.QuizCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.QuizCountAggregateOutputType> | number
        }
      }
    }
    Question: {
      payload: Prisma.$QuestionPayload<ExtArgs>
      fields: Prisma.QuestionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.QuestionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuestionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuestionPayload>
        }
        findFirst: {
          args: Prisma.QuestionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuestionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuestionPayload>
        }
        findMany: {
          args: Prisma.QuestionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuestionPayload>[]
        }
        create: {
          args: Prisma.QuestionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuestionPayload>
        }
        createMany: {
          args: Prisma.QuestionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.QuestionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuestionPayload>
        }
        update: {
          args: Prisma.QuestionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuestionPayload>
        }
        deleteMany: {
          args: Prisma.QuestionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.QuestionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.QuestionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QuestionPayload>
        }
        aggregate: {
          args: Prisma.QuestionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateQuestion>
        }
        groupBy: {
          args: Prisma.QuestionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.QuestionGroupByOutputType>[]
        }
        count: {
          args: Prisma.QuestionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.QuestionCountAggregateOutputType> | number
        }
      }
    }
    Option: {
      payload: Prisma.$OptionPayload<ExtArgs>
      fields: Prisma.OptionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OptionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OptionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OptionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OptionPayload>
        }
        findFirst: {
          args: Prisma.OptionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OptionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OptionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OptionPayload>
        }
        findMany: {
          args: Prisma.OptionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OptionPayload>[]
        }
        create: {
          args: Prisma.OptionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OptionPayload>
        }
        createMany: {
          args: Prisma.OptionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.OptionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OptionPayload>
        }
        update: {
          args: Prisma.OptionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OptionPayload>
        }
        deleteMany: {
          args: Prisma.OptionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OptionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.OptionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OptionPayload>
        }
        aggregate: {
          args: Prisma.OptionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOption>
        }
        groupBy: {
          args: Prisma.OptionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OptionGroupByOutputType>[]
        }
        count: {
          args: Prisma.OptionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OptionCountAggregateOutputType> | number
        }
      }
    }
    Attempt: {
      payload: Prisma.$AttemptPayload<ExtArgs>
      fields: Prisma.AttemptFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AttemptFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttemptPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AttemptFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttemptPayload>
        }
        findFirst: {
          args: Prisma.AttemptFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttemptPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AttemptFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttemptPayload>
        }
        findMany: {
          args: Prisma.AttemptFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttemptPayload>[]
        }
        create: {
          args: Prisma.AttemptCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttemptPayload>
        }
        createMany: {
          args: Prisma.AttemptCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.AttemptDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttemptPayload>
        }
        update: {
          args: Prisma.AttemptUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttemptPayload>
        }
        deleteMany: {
          args: Prisma.AttemptDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AttemptUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.AttemptUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttemptPayload>
        }
        aggregate: {
          args: Prisma.AttemptAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAttempt>
        }
        groupBy: {
          args: Prisma.AttemptGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AttemptGroupByOutputType>[]
        }
        count: {
          args: Prisma.AttemptCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AttemptCountAggregateOutputType> | number
        }
      }
    }
    UserAnswer: {
      payload: Prisma.$UserAnswerPayload<ExtArgs>
      fields: Prisma.UserAnswerFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserAnswerFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAnswerPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserAnswerFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAnswerPayload>
        }
        findFirst: {
          args: Prisma.UserAnswerFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAnswerPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserAnswerFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAnswerPayload>
        }
        findMany: {
          args: Prisma.UserAnswerFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAnswerPayload>[]
        }
        create: {
          args: Prisma.UserAnswerCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAnswerPayload>
        }
        createMany: {
          args: Prisma.UserAnswerCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.UserAnswerDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAnswerPayload>
        }
        update: {
          args: Prisma.UserAnswerUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAnswerPayload>
        }
        deleteMany: {
          args: Prisma.UserAnswerDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserAnswerUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.UserAnswerUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAnswerPayload>
        }
        aggregate: {
          args: Prisma.UserAnswerAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserAnswer>
        }
        groupBy: {
          args: Prisma.UserAnswerGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserAnswerGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserAnswerCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserAnswerCountAggregateOutputType> | number
        }
      }
    }
    Badge: {
      payload: Prisma.$BadgePayload<ExtArgs>
      fields: Prisma.BadgeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.BadgeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BadgePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.BadgeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BadgePayload>
        }
        findFirst: {
          args: Prisma.BadgeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BadgePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.BadgeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BadgePayload>
        }
        findMany: {
          args: Prisma.BadgeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BadgePayload>[]
        }
        create: {
          args: Prisma.BadgeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BadgePayload>
        }
        createMany: {
          args: Prisma.BadgeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.BadgeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BadgePayload>
        }
        update: {
          args: Prisma.BadgeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BadgePayload>
        }
        deleteMany: {
          args: Prisma.BadgeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.BadgeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.BadgeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BadgePayload>
        }
        aggregate: {
          args: Prisma.BadgeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateBadge>
        }
        groupBy: {
          args: Prisma.BadgeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BadgeGroupByOutputType>[]
        }
        count: {
          args: Prisma.BadgeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BadgeCountAggregateOutputType> | number
        }
      }
    }
    UserBadge: {
      payload: Prisma.$UserBadgePayload<ExtArgs>
      fields: Prisma.UserBadgeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserBadgeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserBadgeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBadgePayload>
        }
        findFirst: {
          args: Prisma.UserBadgeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserBadgeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBadgePayload>
        }
        findMany: {
          args: Prisma.UserBadgeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
        }
        create: {
          args: Prisma.UserBadgeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBadgePayload>
        }
        createMany: {
          args: Prisma.UserBadgeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.UserBadgeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBadgePayload>
        }
        update: {
          args: Prisma.UserBadgeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBadgePayload>
        }
        deleteMany: {
          args: Prisma.UserBadgeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserBadgeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.UserBadgeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserBadgePayload>
        }
        aggregate: {
          args: Prisma.UserBadgeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserBadge>
        }
        groupBy: {
          args: Prisma.UserBadgeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserBadgeGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserBadgeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserBadgeCountAggregateOutputType> | number
        }
      }
    }
    Leaderboard: {
      payload: Prisma.$LeaderboardPayload<ExtArgs>
      fields: Prisma.LeaderboardFieldRefs
      operations: {
        findUnique: {
          args: Prisma.LeaderboardFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.LeaderboardFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload>
        }
        findFirst: {
          args: Prisma.LeaderboardFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.LeaderboardFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload>
        }
        findMany: {
          args: Prisma.LeaderboardFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload>[]
        }
        create: {
          args: Prisma.LeaderboardCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload>
        }
        createMany: {
          args: Prisma.LeaderboardCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.LeaderboardDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload>
        }
        update: {
          args: Prisma.LeaderboardUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload>
        }
        deleteMany: {
          args: Prisma.LeaderboardDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.LeaderboardUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.LeaderboardUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload>
        }
        aggregate: {
          args: Prisma.LeaderboardAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLeaderboard>
        }
        groupBy: {
          args: Prisma.LeaderboardGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LeaderboardGroupByOutputType>[]
        }
        count: {
          args: Prisma.LeaderboardCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LeaderboardCountAggregateOutputType> | number
        }
      }
    }
    Reward: {
      payload: Prisma.$RewardPayload<ExtArgs>
      fields: Prisma.RewardFieldRefs
      operations: {
        findUnique: {
          args: Prisma.RewardFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RewardPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.RewardFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RewardPayload>
        }
        findFirst: {
          args: Prisma.RewardFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RewardPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.RewardFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RewardPayload>
        }
        findMany: {
          args: Prisma.RewardFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RewardPayload>[]
        }
        create: {
          args: Prisma.RewardCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RewardPayload>
        }
        createMany: {
          args: Prisma.RewardCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.RewardDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RewardPayload>
        }
        update: {
          args: Prisma.RewardUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RewardPayload>
        }
        deleteMany: {
          args: Prisma.RewardDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.RewardUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.RewardUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RewardPayload>
        }
        aggregate: {
          args: Prisma.RewardAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateReward>
        }
        groupBy: {
          args: Prisma.RewardGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RewardGroupByOutputType>[]
        }
        count: {
          args: Prisma.RewardCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RewardCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  xp: 'xp',
  level: 'level',
  streakCount: 'streakCount',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  createdAt: 'createdAt'
} as const

export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


export const TopicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  courseId: 'courseId'
} as const

export type TopicScalarFieldEnum = (typeof TopicScalarFieldEnum)[keyof typeof TopicScalarFieldEnum]


export const QuizScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  difficulty: 'difficulty',
  topicId: 'topicId',
  courseId: 'courseId',
  createdById: 'createdById',
  isAIgenerated: 'isAIgenerated',
  createdAt: 'createdAt'
} as const

export type QuizScalarFieldEnum = (typeof QuizScalarFieldEnum)[keyof typeof QuizScalarFieldEnum]


export const QuestionScalarFieldEnum = {
  id: 'id',
  text: 'text',
  quizId: 'quizId',
  correctOptionId: 'correctOptionId',
  explanation: 'explanation'
} as const

export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


export const OptionScalarFieldEnum = {
  id: 'id',
  text: 'text',
  questionId: 'questionId'
} as const

export type OptionScalarFieldEnum = (typeof OptionScalarFieldEnum)[keyof typeof OptionScalarFieldEnum]


export const AttemptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  quizId: 'quizId',
  startedAt: 'startedAt',
  finishedAt: 'finishedAt',
  score: 'score',
  timeTakenSec: 'timeTakenSec'
} as const

export type AttemptScalarFieldEnum = (typeof AttemptScalarFieldEnum)[keyof typeof AttemptScalarFieldEnum]


export const UserAnswerScalarFieldEnum = {
  id: 'id',
  attemptId: 'attemptId',
  questionId: 'questionId',
  optionId: 'optionId',
  isCorrect: 'isCorrect'
} as const

export type UserAnswerScalarFieldEnum = (typeof UserAnswerScalarFieldEnum)[keyof typeof UserAnswerScalarFieldEnum]


export const BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  iconUrl: 'iconUrl',
  xpReward: 'xpReward'
} as const

export type BadgeScalarFieldEnum = (typeof BadgeScalarFieldEnum)[keyof typeof BadgeScalarFieldEnum]


export const UserBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeId: 'badgeId',
  earnedAt: 'earnedAt'
} as const

export type UserBadgeScalarFieldEnum = (typeof UserBadgeScalarFieldEnum)[keyof typeof UserBadgeScalarFieldEnum]


export const LeaderboardScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalXP: 'totalXP',
  rank: 'rank',
  lastUpdated: 'lastUpdated'
} as const

export type LeaderboardScalarFieldEnum = (typeof LeaderboardScalarFieldEnum)[keyof typeof LeaderboardScalarFieldEnum]


export const RewardScalarFieldEnum = {
  id: 'id',
  type: 'type',
  amount: 'amount',
  userId: 'userId',
  createdAt: 'createdAt'
} as const

export type RewardScalarFieldEnum = (typeof RewardScalarFieldEnum)[keyof typeof RewardScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const UserOrderByRelevanceFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password'
} as const

export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


export const CourseOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description'
} as const

export type CourseOrderByRelevanceFieldEnum = (typeof CourseOrderByRelevanceFieldEnum)[keyof typeof CourseOrderByRelevanceFieldEnum]


export const TopicOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  courseId: 'courseId'
} as const

export type TopicOrderByRelevanceFieldEnum = (typeof TopicOrderByRelevanceFieldEnum)[keyof typeof TopicOrderByRelevanceFieldEnum]


export const QuizOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  difficulty: 'difficulty',
  topicId: 'topicId',
  courseId: 'courseId',
  createdById: 'createdById'
} as const

export type QuizOrderByRelevanceFieldEnum = (typeof QuizOrderByRelevanceFieldEnum)[keyof typeof QuizOrderByRelevanceFieldEnum]


export const QuestionOrderByRelevanceFieldEnum = {
  id: 'id',
  text: 'text',
  quizId: 'quizId',
  correctOptionId: 'correctOptionId',
  explanation: 'explanation'
} as const

export type QuestionOrderByRelevanceFieldEnum = (typeof QuestionOrderByRelevanceFieldEnum)[keyof typeof QuestionOrderByRelevanceFieldEnum]


export const OptionOrderByRelevanceFieldEnum = {
  id: 'id',
  text: 'text',
  questionId: 'questionId'
} as const

export type OptionOrderByRelevanceFieldEnum = (typeof OptionOrderByRelevanceFieldEnum)[keyof typeof OptionOrderByRelevanceFieldEnum]


export const AttemptOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  quizId: 'quizId'
} as const

export type AttemptOrderByRelevanceFieldEnum = (typeof AttemptOrderByRelevanceFieldEnum)[keyof typeof AttemptOrderByRelevanceFieldEnum]


export const UserAnswerOrderByRelevanceFieldEnum = {
  id: 'id',
  attemptId: 'attemptId',
  questionId: 'questionId',
  optionId: 'optionId'
} as const

export type UserAnswerOrderByRelevanceFieldEnum = (typeof UserAnswerOrderByRelevanceFieldEnum)[keyof typeof UserAnswerOrderByRelevanceFieldEnum]


export const BadgeOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  iconUrl: 'iconUrl'
} as const

export type BadgeOrderByRelevanceFieldEnum = (typeof BadgeOrderByRelevanceFieldEnum)[keyof typeof BadgeOrderByRelevanceFieldEnum]


export const UserBadgeOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeId: 'badgeId'
} as const

export type UserBadgeOrderByRelevanceFieldEnum = (typeof UserBadgeOrderByRelevanceFieldEnum)[keyof typeof UserBadgeOrderByRelevanceFieldEnum]


export const LeaderboardOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId'
} as const

export type LeaderboardOrderByRelevanceFieldEnum = (typeof LeaderboardOrderByRelevanceFieldEnum)[keyof typeof LeaderboardOrderByRelevanceFieldEnum]


export const RewardOrderByRelevanceFieldEnum = {
  id: 'id',
  type: 'type',
  userId: 'userId'
} as const

export type RewardOrderByRelevanceFieldEnum = (typeof RewardOrderByRelevanceFieldEnum)[keyof typeof RewardOrderByRelevanceFieldEnum]



/**
 * Field references
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  user?: Prisma.UserOmit
  course?: Prisma.CourseOmit
  topic?: Prisma.TopicOmit
  quiz?: Prisma.QuizOmit
  question?: Prisma.QuestionOmit
  option?: Prisma.OptionOmit
  attempt?: Prisma.AttemptOmit
  userAnswer?: Prisma.UserAnswerOmit
  badge?: Prisma.BadgeOmit
  userBadge?: Prisma.UserBadgeOmit
  leaderboard?: Prisma.LeaderboardOmit
  reward?: Prisma.RewardOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>



/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the browser.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/index-browser"

export type * from '../models.ts'
export type * from './prismaNamespace.ts'

export const Decimal = runtime.Decimal


export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull


export const ModelName = {
  User: 'User',
  Course: 'Course',
  Topic: 'Topic',
  Quiz: 'Quiz',
  Question: 'Question',
  Option: 'Option',
  Attempt: 'Attempt',
  UserAnswer: 'UserAnswer',
  Badge: 'Badge',
  UserBadge: 'UserBadge',
  Leaderboard: 'Leaderboard',
  Reward: 'Reward'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]

/*
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  xp: 'xp',
  level: 'level',
  streakCount: 'streakCount',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  createdAt: 'createdAt'
} as const

export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


export const TopicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  courseId: 'courseId'
} as const

export type TopicScalarFieldEnum = (typeof TopicScalarFieldEnum)[keyof typeof TopicScalarFieldEnum]


export const QuizScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  difficulty: 'difficulty',
  topicId: 'topicId',
  courseId: 'courseId',
  createdById: 'createdById',
  isAIgenerated: 'isAIgenerated',
  createdAt: 'createdAt'
} as const

export type QuizScalarFieldEnum = (typeof QuizScalarFieldEnum)[keyof typeof QuizScalarFieldEnum]


export const QuestionScalarFieldEnum = {
  id: 'id',
  text: 'text',
  quizId: 'quizId',
  correctOptionId: 'correctOptionId',
  explanation: 'explanation'
} as const

export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


export const OptionScalarFieldEnum = {
  id: 'id',
  text: 'text',
  questionId: 'questionId'
} as const

export type OptionScalarFieldEnum = (typeof OptionScalarFieldEnum)[keyof typeof OptionScalarFieldEnum]


export const AttemptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  quizId: 'quizId',
  startedAt: 'startedAt',
  finishedAt: 'finishedAt',
  score: 'score',
  timeTakenSec: 'timeTakenSec'
} as const

export type AttemptScalarFieldEnum = (typeof AttemptScalarFieldEnum)[keyof typeof AttemptScalarFieldEnum]


export const UserAnswerScalarFieldEnum = {
  id: 'id',
  attemptId: 'attemptId',
  questionId: 'questionId',
  optionId: 'optionId',
  isCorrect: 'isCorrect'
} as const

export type UserAnswerScalarFieldEnum = (typeof UserAnswerScalarFieldEnum)[keyof typeof UserAnswerScalarFieldEnum]


export const BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  iconUrl: 'iconUrl',
  xpReward: 'xpReward'
} as const

export type BadgeScalarFieldEnum = (typeof BadgeScalarFieldEnum)[keyof typeof BadgeScalarFieldEnum]


export const UserBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeId: 'badgeId',
  earnedAt: 'earnedAt'
} as const

export type UserBadgeScalarFieldEnum = (typeof UserBadgeScalarFieldEnum)[keyof typeof UserBadgeScalarFieldEnum]


export const LeaderboardScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalXP: 'totalXP',
  rank: 'rank',
  lastUpdated: 'lastUpdated'
} as const

export type LeaderboardScalarFieldEnum = (typeof LeaderboardScalarFieldEnum)[keyof typeof LeaderboardScalarFieldEnum]


export const RewardScalarFieldEnum = {
  id: 'id',
  type: 'type',
  amount: 'amount',
  userId: 'userId',
  createdAt: 'createdAt'
} as const

export type RewardScalarFieldEnum = (typeof RewardScalarFieldEnum)[keyof typeof RewardScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const UserOrderByRelevanceFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password'
} as const

export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


export const CourseOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description'
} as const

export type CourseOrderByRelevanceFieldEnum = (typeof CourseOrderByRelevanceFieldEnum)[keyof typeof CourseOrderByRelevanceFieldEnum]


export const TopicOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  courseId: 'courseId'
} as const

export type TopicOrderByRelevanceFieldEnum = (typeof TopicOrderByRelevanceFieldEnum)[keyof typeof TopicOrderByRelevanceFieldEnum]


export const QuizOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  difficulty: 'difficulty',
  topicId: 'topicId',
  courseId: 'courseId',
  createdById: 'createdById'
} as const

export type QuizOrderByRelevanceFieldEnum = (typeof QuizOrderByRelevanceFieldEnum)[keyof typeof QuizOrderByRelevanceFieldEnum]


export const QuestionOrderByRelevanceFieldEnum = {
  id: 'id',
  text: 'text',
  quizId: 'quizId',
  correctOptionId: 'correctOptionId',
  explanation: 'explanation'
} as const

export type QuestionOrderByRelevanceFieldEnum = (typeof QuestionOrderByRelevanceFieldEnum)[keyof typeof QuestionOrderByRelevanceFieldEnum]


export const OptionOrderByRelevanceFieldEnum = {
  id: 'id',
  text: 'text',
  questionId: 'questionId'
} as const

export type OptionOrderByRelevanceFieldEnum = (typeof OptionOrderByRelevanceFieldEnum)[keyof typeof OptionOrderByRelevanceFieldEnum]


export const AttemptOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  quizId: 'quizId'
} as const

export type AttemptOrderByRelevanceFieldEnum = (typeof AttemptOrderByRelevanceFieldEnum)[keyof typeof AttemptOrderByRelevanceFieldEnum]


export const UserAnswerOrderByRelevanceFieldEnum = {
  id: 'id',
  attemptId: 'attemptId',
  questionId: 'questionId',
  optionId: 'optionId'
} as const

export type UserAnswerOrderByRelevanceFieldEnum = (typeof UserAnswerOrderByRelevanceFieldEnum)[keyof typeof UserAnswerOrderByRelevanceFieldEnum]


export const BadgeOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  iconUrl: 'iconUrl'
} as const

export type BadgeOrderByRelevanceFieldEnum = (typeof BadgeOrderByRelevanceFieldEnum)[keyof typeof BadgeOrderByRelevanceFieldEnum]


export const UserBadgeOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeId: 'badgeId'
} as const

export type UserBadgeOrderByRelevanceFieldEnum = (typeof UserBadgeOrderByRelevanceFieldEnum)[keyof typeof UserBadgeOrderByRelevanceFieldEnum]


export const LeaderboardOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId'
} as const

export type LeaderboardOrderByRelevanceFieldEnum = (typeof LeaderboardOrderByRelevanceFieldEnum)[keyof typeof LeaderboardOrderByRelevanceFieldEnum]


export const RewardOrderByRelevanceFieldEnum = {
  id: 'id',
  type: 'type',
  userId: 'userId'
} as const

export type RewardOrderByRelevanceFieldEnum = (typeof RewardOrderByRelevanceFieldEnum)[keyof typeof RewardOrderByRelevanceFieldEnum]



/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Option` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Option
 * 
 */
export type OptionModel = runtime.Types.Result.DefaultSelection<Prisma.$OptionPayload>

export type AggregateOption = {
  _count: OptionCountAggregateOutputType | null
  _min: OptionMinAggregateOutputType | null
  _max: OptionMaxAggregateOutputType | null
}

export type OptionMinAggregateOutputType = {
  id: string | null
  text: string | null
  questionId: string | null
}

export type OptionMaxAggregateOutputType = {
  id: string | null
  text: string | null
  questionId: string | null
}

export type OptionCountAggregateOutputType = {
  id: number
  text: number
  questionId: number
  _all: number
}


export type OptionMinAggregateInputType = {
  id?: true
  text?: true
  questionId?: true
}

export type OptionMaxAggregateInputType = {
  id?: true
  text?: true
  questionId?: true
}

export type OptionCountAggregateInputType = {
  id?: true
  text?: true
  questionId?: true
  _all?: true
}

export type OptionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Option to aggregate.
   */
  where?: Prisma.OptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Options to fetch.
   */
  orderBy?: Prisma.OptionOrderByWithRelationInput | Prisma.OptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Options from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Options.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Options
  **/
  _count?: true | OptionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OptionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OptionMaxAggregateInputType
}

export type GetOptionAggregateType<T extends OptionAggregateArgs> = {
      [P in keyof T & keyof AggregateOption]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOption[P]>
    : Prisma.GetScalarType<T[P], AggregateOption[P]>
}




export type OptionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OptionWhereInput
  orderBy?: Prisma.OptionOrderByWithAggregationInput | Prisma.OptionOrderByWithAggregationInput[]
  by: Prisma.OptionScalarFieldEnum[] | Prisma.OptionScalarFieldEnum
  having?: Prisma.OptionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OptionCountAggregateInputType | true
  _min?: OptionMinAggregateInputType
  _max?: OptionMaxAggregateInputType
}

export type OptionGroupByOutputType = {
  id: string
  text: string
  questionId: string
  _count: OptionCountAggregateOutputType | null
  _min: OptionMinAggregateOutputType | null
  _max: OptionMaxAggregateOutputType | null
}

type GetOptionGroupByPayload<T extends OptionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OptionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OptionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OptionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OptionGroupByOutputType[P]>
      }
    >
  >



export type OptionWhereInput = {
  AND?: Prisma.OptionWhereInput | Prisma.OptionWhereInput[]
  OR?: Prisma.OptionWhereInput[]
  NOT?: Prisma.OptionWhereInput | Prisma.OptionWhereInput[]
  id?: Prisma.StringFilter<"Option"> | string
  text?: Prisma.StringFilter<"Option"> | string
  questionId?: Prisma.StringFilter<"Option"> | string
  question?: Prisma.XOR<Prisma.QuestionScalarRelationFilter, Prisma.QuestionWhereInput>
  userAnswers?: Prisma.UserAnswerListRelationFilter
}

export type OptionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  questionId?: Prisma.SortOrder
  question?: Prisma.QuestionOrderByWithRelationInput
  userAnswers?: Prisma.UserAnswerOrderByRelationAggregateInput
  _relevance?: Prisma.OptionOrderByRelevanceInput
}

export type OptionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.OptionWhereInput | Prisma.OptionWhereInput[]
  OR?: Prisma.OptionWhereInput[]
  NOT?: Prisma.OptionWhereInput | Prisma.OptionWhereInput[]
  text?: Prisma.StringFilter<"Option"> | string
  questionId?: Prisma.StringFilter<"Option"> | string
  question?: Prisma.XOR<Prisma.QuestionScalarRelationFilter, Prisma.QuestionWhereInput>
  userAnswers?: Prisma.UserAnswerListRelationFilter
}, "id">

export type OptionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  questionId?: Prisma.SortOrder
  _count?: Prisma.OptionCountOrderByAggregateInput
  _max?: Prisma.OptionMaxOrderByAggregateInput
  _min?: Prisma.OptionMinOrderByAggregateInput
}

export type OptionScalarWhereWithAggregatesInput = {
  AND?: Prisma.OptionScalarWhereWithAggregatesInput | Prisma.OptionScalarWhereWithAggregatesInput[]
  OR?: Prisma.OptionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OptionScalarWhereWithAggregatesInput | Prisma.OptionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Option"> | string
  text?: Prisma.StringWithAggregatesFilter<"Option"> | string
  questionId?: Prisma.StringWithAggregatesFilter<"Option"> | string
}

export type OptionCreateInput = {
  id?: string
  text: string
  question: Prisma.QuestionCreateNestedOneWithoutOptionsInput
  userAnswers?: Prisma.UserAnswerCreateNestedManyWithoutSelectedOptionInput
}

export type OptionUncheckedCreateInput = {
  id?: string
  text: string
  questionId: string
  userAnswers?: Prisma.UserAnswerUncheckedCreateNestedManyWithoutSelectedOptionInput
}

export type OptionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.QuestionUpdateOneRequiredWithoutOptionsNestedInput
  userAnswers?: Prisma.UserAnswerUpdateManyWithoutSelectedOptionNestedInput
}

export type OptionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  questionId?: Prisma.StringFieldUpdateOperationsInput | string
  userAnswers?: Prisma.UserAnswerUncheckedUpdateManyWithoutSelectedOptionNestedInput
}

export type OptionCreateManyInput = {
  id?: string
  text: string
  questionId: string
}

export type OptionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OptionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  questionId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OptionListRelationFilter = {
  every?: Prisma.OptionWhereInput
  some?: Prisma.OptionWhereInput
  none?: Prisma.OptionWhereInput
}

export type OptionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type OptionOrderByRelevanceInput = {
  fields: Prisma.OptionOrderByRelevanceFieldEnum | Prisma.OptionOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type OptionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  questionId?: Prisma.SortOrder
}

export type OptionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  questionId?: Prisma.SortOrder
}

export type OptionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  questionId?: Prisma.SortOrder
}

export type OptionScalarRelationFilter = {
  is?: Prisma.OptionWhereInput
  isNot?: Prisma.OptionWhereInput
}

export type OptionCreateNestedManyWithoutQuestionInput = {
  create?: Prisma.XOR<Prisma.OptionCreateWithoutQuestionInput, Prisma.OptionUncheckedCreateWithoutQuestionInput> | Prisma.OptionCreateWithoutQuestionInput[] | Prisma.OptionUncheckedCreateWithoutQuestionInput[]
  connectOrCreate?: Prisma.OptionCreateOrConnectWithoutQuestionInput | Prisma.OptionCreateOrConnectWithoutQuestionInput[]
  createMany?: Prisma.OptionCreateManyQuestionInputEnvelope
  connect?: Prisma.OptionWhereUniqueInput | Prisma.OptionWhereUniqueInput[]
}

export type OptionUncheckedCreateNestedManyWithoutQuestionInput = {
  create?: Prisma.XOR<Prisma.OptionCreateWithoutQuestionInput, Prisma.OptionUncheckedCreateWithoutQuestionInput> | Prisma.OptionCreateWithoutQuestionInput[] | Prisma.OptionUncheckedCreateWithoutQuestionInput[]
  connectOrCreate?: Prisma.OptionCreateOrConnectWithoutQuestionInput | Prisma.OptionCreateOrConnectWithoutQuestionInput[]
  createMany?: Prisma.OptionCreateManyQuestionInputEnvelope
  connect?: Prisma.OptionWhereUniqueInput | Prisma.OptionWhereUniqueInput[]
}

export type OptionUpdateManyWithoutQuestionNestedInput = {
  create?: Prisma.XOR<Prisma.OptionCreateWithoutQuestionInput, Prisma.OptionUncheckedCreateWithoutQuestionInput> | Prisma.OptionCreateWithoutQuestionInput[] | Prisma.OptionUncheckedCreateWithoutQuestionInput[]
  connectOrCreate?: Prisma.OptionCreateOrConnectWithoutQuestionInput | Prisma.OptionCreateOrConnectWithoutQuestionInput[]
  upsert?: Prisma.OptionUpsertWithWhereUniqueWithoutQuestionInput | Prisma.OptionUpsertWithWhereUniqueWithoutQuestionInput[]
  createMany?: Prisma.OptionCreateManyQuestionInputEnvelope
  set?: Prisma.OptionWhereUniqueInput | Prisma.OptionWhereUniqueInput[]
  disconnect?: Prisma.OptionWhereUniqueInput | Prisma.OptionWhereUniqueInput[]
  delete?: Prisma.OptionWhereUniqueInput | Prisma.OptionWhereUniqueInput[]
  connect?: Prisma.OptionWhereUniqueInput | Prisma.OptionWhereUniqueInput[]
  update?: Prisma.OptionUpdateWithWhereUniqueWithoutQuestionInput | Prisma.OptionUpdateWithWhereUniqueWithoutQuestionInput[]
  updateMany?: Prisma.OptionUpdateManyWithWhereWithoutQuestionInput | Prisma.OptionUpdateManyWithWhereWithoutQuestionInput[]
  deleteMany?: Prisma.OptionScalarWhereInput | Prisma.OptionScalarWhereInput[]
}

export type OptionUncheckedUpdateManyWithoutQuestionNestedInput = {
  create?: Prisma.XOR<Prisma.OptionCreateWithoutQuestionInput, Prisma.OptionUncheckedCreateWithoutQuestionInput> | Prisma.OptionCreateWithoutQuestionInput[] | Prisma.OptionUncheckedCreateWithoutQuestionInput[]
  connectOrCreate?: Prisma.OptionCreateOrConnectWithoutQuestionInput | Prisma.OptionCreateOrConnectWithoutQuestionInput[]
  upsert?: Prisma.OptionUpsertWithWhereUniqueWithoutQuestionInput | Prisma.OptionUpsertWithWhereUniqueWithoutQuestionInput[]
  createMany?: Prisma.OptionCreateManyQuestionInputEnvelope
  set?: Prisma.OptionWhereUniqueInput | Prisma.OptionWhereUniqueInput[]
  disconnect?: Prisma.OptionWhereUniqueInput | Prisma.OptionWhereUniqueInput[]
  delete?: Prisma.OptionWhereUniqueInput | Prisma.OptionWhereUniqueInput[]
  connect?: Prisma.OptionWhereUniqueInput | Prisma.OptionWhereUniqueInput[]
  update?: Prisma.OptionUpdateWithWhereUniqueWithoutQuestionInput | Prisma.OptionUpdateWithWhereUniqueWithoutQuestionInput[]
  updateMany?: Prisma.OptionUpdateManyWithWhereWithoutQuestionInput | Prisma.OptionUpdateManyWithWhereWithoutQuestionInput[]
  deleteMany?: Prisma.OptionScalarWhereInput | Prisma.OptionScalarWhereInput[]
}

export type OptionCreateNestedOneWithoutUserAnswersInput = {
  create?: Prisma.XOR<Prisma.OptionCreateWithoutUserAnswersInput, Prisma.OptionUncheckedCreateWithoutUserAnswersInput>
  connectOrCreate?: Prisma.OptionCreateOrConnectWithoutUserAnswersInput
  connect?: Prisma.OptionWhereUniqueInput
}

export type OptionUpdateOneRequiredWithoutUserAnswersNestedInput = {
  create?: Prisma.XOR<Prisma.OptionCreateWithoutUserAnswersInput, Prisma.OptionUncheckedCreateWithoutUserAnswersInput>
  connectOrCreate?: Prisma.OptionCreateOrConnectWithoutUserAnswersInput
  upsert?: Prisma.OptionUpsertWithoutUserAnswersInput
  connect?: Prisma.OptionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.OptionUpdateToOneWithWhereWithoutUserAnswersInput, Prisma.OptionUpdateWithoutUserAnswersInput>, Prisma.OptionUncheckedUpdateWithoutUserAnswersInput>
}

export type OptionCreateWithoutQuestionInput = {
  id?: string
  text: string
  userAnswers?: Prisma.UserAnswerCreateNestedManyWithoutSelectedOptionInput
}

export type OptionUncheckedCreateWithoutQuestionInput = {
  id?: string
  text: string
  userAnswers?: Prisma.UserAnswerUncheckedCreateNestedManyWithoutSelectedOptionInput
}

export type OptionCreateOrConnectWithoutQuestionInput = {
  where: Prisma.OptionWhereUniqueInput
  create: Prisma.XOR<Prisma.OptionCreateWithoutQuestionInput, Prisma.OptionUncheckedCreateWithoutQuestionInput>
}

export type OptionCreateManyQuestionInputEnvelope = {
  data: Prisma.OptionCreateManyQuestionInput | Prisma.OptionCreateManyQuestionInput[]
  skipDuplicates?: boolean
}

export type OptionUpsertWithWhereUniqueWithoutQuestionInput = {
  where: Prisma.OptionWhereUniqueInput
  update: Prisma.XOR<Prisma.OptionUpdateWithoutQuestionInput, Prisma.OptionUncheckedUpdateWithoutQuestionInput>
  create: Prisma.XOR<Prisma.OptionCreateWithoutQuestionInput, Prisma.OptionUncheckedCreateWithoutQuestionInput>
}

export type OptionUpdateWithWhereUniqueWithoutQuestionInput = {
  where: Prisma.OptionWhereUniqueInput
  data: Prisma.XOR<Prisma.OptionUpdateWithoutQuestionInput, Prisma.OptionUncheckedUpdateWithoutQuestionInput>
}

export type OptionUpdateManyWithWhereWithoutQuestionInput = {
  where: Prisma.OptionScalarWhereInput
  data: Prisma.XOR<Prisma.OptionUpdateManyMutationInput, Prisma.OptionUncheckedUpdateManyWithoutQuestionInput>
}

export type OptionScalarWhereInput = {
  AND?: Prisma.OptionScalarWhereInput | Prisma.OptionScalarWhereInput[]
  OR?: Prisma.OptionScalarWhereInput[]
  NOT?: Prisma.OptionScalarWhereInput | Prisma.OptionScalarWhereInput[]
  id?: Prisma.StringFilter<"Option"> | string
  text?: Prisma.StringFilter<"Option"> | string
  questionId?: Prisma.StringFilter<"Option"> | string
}

export type OptionCreateWithoutUserAnswersInput = {
  id?: string
  text: string
  question: Prisma.QuestionCreateNestedOneWithoutOptionsInput
}

export type OptionUncheckedCreateWithoutUserAnswersInput = {
  id?: string
  text: string
  questionId: string
}

export type OptionCreateOrConnectWithoutUserAnswersInput = {
  where: Prisma.OptionWhereUniqueInput
  create: Prisma.XOR<Prisma.OptionCreateWithoutUserAnswersInput, Prisma.OptionUncheckedCreateWithoutUserAnswersInput>
}

export type OptionUpsertWithoutUserAnswersInput = {
  update: Prisma.XOR<Prisma.OptionUpdateWithoutUserAnswersInput, Prisma.OptionUncheckedUpdateWithoutUserAnswersInput>
  create: Prisma.XOR<Prisma.OptionCreateWithoutUserAnswersInput, Prisma.OptionUncheckedCreateWithoutUserAnswersInput>
  where?: Prisma.OptionWhereInput
}

export type OptionUpdateToOneWithWhereWithoutUserAnswersInput = {
  where?: Prisma.OptionWhereInput
  data: Prisma.XOR<Prisma.OptionUpdateWithoutUserAnswersInput, Prisma.OptionUncheckedUpdateWithoutUserAnswersInput>
}

export type OptionUpdateWithoutUserAnswersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.QuestionUpdateOneRequiredWithoutOptionsNestedInput
}

export type OptionUncheckedUpdateWithoutUserAnswersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  questionId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OptionCreateManyQuestionInput = {
  id?: string
  text: string
}

export type OptionUpdateWithoutQuestionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  userAnswers?: Prisma.UserAnswerUpdateManyWithoutSelectedOptionNestedInput
}

export type OptionUncheckedUpdateWithoutQuestionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  userAnswers?: Prisma.UserAnswerUncheckedUpdateManyWithoutSelectedOptionNestedInput
}

export type OptionUncheckedUpdateManyWithoutQuestionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type OptionCountOutputType
 */

export type OptionCountOutputType = {
  userAnswers: number
}

export type OptionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  userAnswers?: boolean | OptionCountOutputTypeCountUserAnswersArgs
}

/**
 * OptionCountOutputType without action
 */
export type OptionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OptionCountOutputType
   */
  select?: Prisma.OptionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * OptionCountOutputType without action
 */
export type OptionCountOutputTypeCountUserAnswersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserAnswerWhereInput
}


export type OptionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
  questionId?: boolean
  question?: boolean | Prisma.QuestionDefaultArgs<ExtArgs>
  userAnswers?: boolean | Prisma.Option$userAnswersArgs<ExtArgs>
  _count?: boolean | Prisma.OptionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["option"]>



export type OptionSelectScalar = {
  id?: boolean
  text?: boolean
  questionId?: boolean
}

export type OptionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "text" | "questionId", ExtArgs["result"]["option"]>
export type OptionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  question?: boolean | Prisma.QuestionDefaultArgs<ExtArgs>
  userAnswers?: boolean | Prisma.Option$userAnswersArgs<ExtArgs>
  _count?: boolean | Prisma.OptionCountOutputTypeDefaultArgs<ExtArgs>
}

export type $OptionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Option"
  objects: {
    question: Prisma.$QuestionPayload<ExtArgs>
    userAnswers: Prisma.$UserAnswerPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    text: string
    questionId: string
  }, ExtArgs["result"]["option"]>
  composites: {}
}

export type OptionGetPayload<S extends boolean | null | undefined | OptionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OptionPayload, S>

export type OptionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OptionCountAggregateInputType | true
  }

export interface OptionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Option'], meta: { name: 'Option' } }
  /**
   * Find zero or one Option that matches the filter.
   * @param {OptionFindUniqueArgs} args - Arguments to find a Option
   * @example
   * // Get one Option
   * const option = await prisma.option.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OptionFindUniqueArgs>(args: Prisma.SelectSubset<T, OptionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OptionClient<runtime.Types.Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Option that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OptionFindUniqueOrThrowArgs} args - Arguments to find a Option
   * @example
   * // Get one Option
   * const option = await prisma.option.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OptionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OptionClient<runtime.Types.Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Option that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OptionFindFirstArgs} args - Arguments to find a Option
   * @example
   * // Get one Option
   * const option = await prisma.option.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OptionFindFirstArgs>(args?: Prisma.SelectSubset<T, OptionFindFirstArgs<ExtArgs>>): Prisma.Prisma__OptionClient<runtime.Types.Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Option that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OptionFindFirstOrThrowArgs} args - Arguments to find a Option
   * @example
   * // Get one Option
   * const option = await prisma.option.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OptionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OptionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OptionClient<runtime.Types.Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Options that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OptionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Options
   * const options = await prisma.option.findMany()
   * 
   * // Get first 10 Options
   * const options = await prisma.option.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const optionWithIdOnly = await prisma.option.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OptionFindManyArgs>(args?: Prisma.SelectSubset<T, OptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Option.
   * @param {OptionCreateArgs} args - Arguments to create a Option.
   * @example
   * // Create one Option
   * const Option = await prisma.option.create({
   *   data: {
   *     // ... data to create a Option
   *   }
   * })
   * 
   */
  create<T extends OptionCreateArgs>(args: Prisma.SelectSubset<T, OptionCreateArgs<ExtArgs>>): Prisma.Prisma__OptionClient<runtime.Types.Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Options.
   * @param {OptionCreateManyArgs} args - Arguments to create many Options.
   * @example
   * // Create many Options
   * const option = await prisma.option.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OptionCreateManyArgs>(args?: Prisma.SelectSubset<T, OptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Option.
   * @param {OptionDeleteArgs} args - Arguments to delete one Option.
   * @example
   * // Delete one Option
   * const Option = await prisma.option.delete({
   *   where: {
   *     // ... filter to delete one Option
   *   }
   * })
   * 
   */
  delete<T extends OptionDeleteArgs>(args: Prisma.SelectSubset<T, OptionDeleteArgs<ExtArgs>>): Prisma.Prisma__OptionClient<runtime.Types.Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Option.
   * @param {OptionUpdateArgs} args - Arguments to update one Option.
   * @example
   * // Update one Option
   * const option = await prisma.option.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OptionUpdateArgs>(args: Prisma.SelectSubset<T, OptionUpdateArgs<ExtArgs>>): Prisma.Prisma__OptionClient<runtime.Types.Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Options.
   * @param {OptionDeleteManyArgs} args - Arguments to filter Options to delete.
   * @example
   * // Delete a few Options
   * const { count } = await prisma.option.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OptionDeleteManyArgs>(args?: Prisma.SelectSubset<T, OptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Options.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OptionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Options
   * const option = await prisma.option.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OptionUpdateManyArgs>(args: Prisma.SelectSubset<T, OptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Option.
   * @param {OptionUpsertArgs} args - Arguments to update or create a Option.
   * @example
   * // Update or create a Option
   * const option = await prisma.option.upsert({
   *   create: {
   *     // ... data to create a Option
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Option we want to update
   *   }
   * })
   */
  upsert<T extends OptionUpsertArgs>(args: Prisma.SelectSubset<T, OptionUpsertArgs<ExtArgs>>): Prisma.Prisma__OptionClient<runtime.Types.Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Options.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OptionCountArgs} args - Arguments to filter Options to count.
   * @example
   * // Count the number of Options
   * const count = await prisma.option.count({
   *   where: {
   *     // ... the filter for the Options we want to count
   *   }
   * })
  **/
  count<T extends OptionCountArgs>(
    args?: Prisma.Subset<T, OptionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OptionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Option.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OptionAggregateArgs>(args: Prisma.Subset<T, OptionAggregateArgs>): Prisma.PrismaPromise<GetOptionAggregateType<T>>

  /**
   * Group by Option.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OptionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OptionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OptionGroupByArgs['orderBy'] }
      : { orderBy?: OptionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Option model
 */
readonly fields: OptionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Option.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OptionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  question<T extends Prisma.QuestionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.QuestionDefaultArgs<ExtArgs>>): Prisma.Prisma__QuestionClient<runtime.Types.Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  userAnswers<T extends Prisma.Option$userAnswersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Option$userAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Option model
 */
export interface OptionFieldRefs {
  readonly id: Prisma.FieldRef<"Option", 'String'>
  readonly text: Prisma.FieldRef<"Option", 'String'>
  readonly questionId: Prisma.FieldRef<"Option", 'String'>
}
    

// Custom InputTypes
/**
 * Option findUnique
 */
export type OptionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Option
   */
  select?: Prisma.OptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Option
   */
  omit?: Prisma.OptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OptionInclude<ExtArgs> | null
  /**
   * Filter, which Option to fetch.
   */
  where: Prisma.OptionWhereUniqueInput
}

/**
 * Option findUniqueOrThrow
 */
export type OptionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Option
   */
  select?: Prisma.OptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Option
   */
  omit?: Prisma.OptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OptionInclude<ExtArgs> | null
  /**
   * Filter, which Option to fetch.
   */
  where: Prisma.OptionWhereUniqueInput
}

/**
 * Option findFirst
 */
export type OptionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Option
   */
  select?: Prisma.OptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Option
   */
  omit?: Prisma.OptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OptionInclude<ExtArgs> | null
  /**
   * Filter, which Option to fetch.
   */
  where?: Prisma.OptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Options to fetch.
   */
  orderBy?: Prisma.OptionOrderByWithRelationInput | Prisma.OptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Options.
   */
  cursor?: Prisma.OptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Options from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Options.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Options.
   */
  distinct?: Prisma.OptionScalarFieldEnum | Prisma.OptionScalarFieldEnum[]
}

/**
 * Option findFirstOrThrow
 */
export type OptionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Option
   */
  select?: Prisma.OptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Option
   */
  omit?: Prisma.OptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OptionInclude<ExtArgs> | null
  /**
   * Filter, which Option to fetch.
   */
  where?: Prisma.OptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Options to fetch.
   */
  orderBy?: Prisma.OptionOrderByWithRelationInput | Prisma.OptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Options.
   */
  cursor?: Prisma.OptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Options from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Options.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Options.
   */
  distinct?: Prisma.OptionScalarFieldEnum | Prisma.OptionScalarFieldEnum[]
}

/**
 * Option findMany
 */
export type OptionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Option
   */
  select?: Prisma.OptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Option
   */
  omit?: Prisma.OptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OptionInclude<ExtArgs> | null
  /**
   * Filter, which Options to fetch.
   */
  where?: Prisma.OptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Options to fetch.
   */
  orderBy?: Prisma.OptionOrderByWithRelationInput | Prisma.OptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Options.
   */
  cursor?: Prisma.OptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Options from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Options.
   */
  skip?: number
  distinct?: Prisma.OptionScalarFieldEnum | Prisma.OptionScalarFieldEnum[]
}

/**
 * Option create
 */
export type OptionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Option
   */
  select?: Prisma.OptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Option
   */
  omit?: Prisma.OptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OptionInclude<ExtArgs> | null
  /**
   * The data needed to create a Option.
   */
  data: Prisma.XOR<Prisma.OptionCreateInput, Prisma.OptionUncheckedCreateInput>
}

/**
 * Option createMany
 */
export type OptionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Options.
   */
  data: Prisma.OptionCreateManyInput | Prisma.OptionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Option update
 */
export type OptionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Option
   */
  select?: Prisma.OptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Option
   */
  omit?: Prisma.OptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OptionInclude<ExtArgs> | null
  /**
   * The data needed to update a Option.
   */
  data: Prisma.XOR<Prisma.OptionUpdateInput, Prisma.OptionUncheckedUpdateInput>
  /**
   * Choose, which Option to update.
   */
  where: Prisma.OptionWhereUniqueInput
}

/**
 * Option updateMany
 */
export type OptionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Options.
   */
  data: Prisma.XOR<Prisma.OptionUpdateManyMutationInput, Prisma.OptionUncheckedUpdateManyInput>
  /**
   * Filter which Options to update
   */
  where?: Prisma.OptionWhereInput
  /**
   * Limit how many Options to update.
   */
  limit?: number
}

/**
 * Option upsert
 */
export type OptionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Option
   */
  select?: Prisma.OptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Option
   */
  omit?: Prisma.OptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OptionInclude<ExtArgs> | null
  /**
   * The filter to search for the Option to update in case it exists.
   */
  where: Prisma.OptionWhereUniqueInput
  /**
   * In case the Option found by the `where` argument doesn't exist, create a new Option with this data.
   */
  create: Prisma.XOR<Prisma.OptionCreateInput, Prisma.OptionUncheckedCreateInput>
  /**
   * In case the Option was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OptionUpdateInput, Prisma.OptionUncheckedUpdateInput>
}

/**
 * Option delete
 */
export type OptionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Option
   */
  select?: Prisma.OptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Option
   */
  omit?: Prisma.OptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OptionInclude<ExtArgs> | null
  /**
   * Filter which Option to delete.
   */
  where: Prisma.OptionWhereUniqueInput
}

/**
 * Option deleteMany
 */
export type OptionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Options to delete
   */
  where?: Prisma.OptionWhereInput
  /**
   * Limit how many Options to delete.
   */
  limit?: number
}

/**
 * Option.userAnswers
 */
export type Option$userAnswersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAnswer
   */
  select?: Prisma.UserAnswerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAnswer
   */
  omit?: Prisma.UserAnswerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAnswerInclude<ExtArgs> | null
  where?: Prisma.UserAnswerWhereInput
  orderBy?: Prisma.UserAnswerOrderByWithRelationInput | Prisma.UserAnswerOrderByWithRelationInput[]
  cursor?: Prisma.UserAnswerWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserAnswerScalarFieldEnum | Prisma.UserAnswerScalarFieldEnum[]
}

/**
 * Option without action
 */
export type OptionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Option
   */
  select?: Prisma.OptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Option
   */
  omit?: Prisma.OptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OptionInclude<ExtArgs> | null
}

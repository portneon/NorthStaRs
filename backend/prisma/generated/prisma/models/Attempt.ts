
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Attempt` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Attempt
 * 
 */
export type AttemptModel = runtime.Types.Result.DefaultSelection<Prisma.$AttemptPayload>

export type AggregateAttempt = {
  _count: AttemptCountAggregateOutputType | null
  _avg: AttemptAvgAggregateOutputType | null
  _sum: AttemptSumAggregateOutputType | null
  _min: AttemptMinAggregateOutputType | null
  _max: AttemptMaxAggregateOutputType | null
}

export type AttemptAvgAggregateOutputType = {
  score: number | null
  timeTakenSec: number | null
}

export type AttemptSumAggregateOutputType = {
  score: number | null
  timeTakenSec: number | null
}

export type AttemptMinAggregateOutputType = {
  id: string | null
  userId: string | null
  quizId: string | null
  startedAt: Date | null
  finishedAt: Date | null
  score: number | null
  timeTakenSec: number | null
}

export type AttemptMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  quizId: string | null
  startedAt: Date | null
  finishedAt: Date | null
  score: number | null
  timeTakenSec: number | null
}

export type AttemptCountAggregateOutputType = {
  id: number
  userId: number
  quizId: number
  startedAt: number
  finishedAt: number
  score: number
  timeTakenSec: number
  _all: number
}


export type AttemptAvgAggregateInputType = {
  score?: true
  timeTakenSec?: true
}

export type AttemptSumAggregateInputType = {
  score?: true
  timeTakenSec?: true
}

export type AttemptMinAggregateInputType = {
  id?: true
  userId?: true
  quizId?: true
  startedAt?: true
  finishedAt?: true
  score?: true
  timeTakenSec?: true
}

export type AttemptMaxAggregateInputType = {
  id?: true
  userId?: true
  quizId?: true
  startedAt?: true
  finishedAt?: true
  score?: true
  timeTakenSec?: true
}

export type AttemptCountAggregateInputType = {
  id?: true
  userId?: true
  quizId?: true
  startedAt?: true
  finishedAt?: true
  score?: true
  timeTakenSec?: true
  _all?: true
}

export type AttemptAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Attempt to aggregate.
   */
  where?: Prisma.AttemptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Attempts to fetch.
   */
  orderBy?: Prisma.AttemptOrderByWithRelationInput | Prisma.AttemptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AttemptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Attempts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Attempts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Attempts
  **/
  _count?: true | AttemptCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AttemptAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AttemptSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AttemptMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AttemptMaxAggregateInputType
}

export type GetAttemptAggregateType<T extends AttemptAggregateArgs> = {
      [P in keyof T & keyof AggregateAttempt]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAttempt[P]>
    : Prisma.GetScalarType<T[P], AggregateAttempt[P]>
}




export type AttemptGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AttemptWhereInput
  orderBy?: Prisma.AttemptOrderByWithAggregationInput | Prisma.AttemptOrderByWithAggregationInput[]
  by: Prisma.AttemptScalarFieldEnum[] | Prisma.AttemptScalarFieldEnum
  having?: Prisma.AttemptScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AttemptCountAggregateInputType | true
  _avg?: AttemptAvgAggregateInputType
  _sum?: AttemptSumAggregateInputType
  _min?: AttemptMinAggregateInputType
  _max?: AttemptMaxAggregateInputType
}

export type AttemptGroupByOutputType = {
  id: string
  userId: string
  quizId: string
  startedAt: Date
  finishedAt: Date | null
  score: number
  timeTakenSec: number | null
  _count: AttemptCountAggregateOutputType | null
  _avg: AttemptAvgAggregateOutputType | null
  _sum: AttemptSumAggregateOutputType | null
  _min: AttemptMinAggregateOutputType | null
  _max: AttemptMaxAggregateOutputType | null
}

type GetAttemptGroupByPayload<T extends AttemptGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AttemptGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AttemptGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AttemptGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AttemptGroupByOutputType[P]>
      }
    >
  >



export type AttemptWhereInput = {
  AND?: Prisma.AttemptWhereInput | Prisma.AttemptWhereInput[]
  OR?: Prisma.AttemptWhereInput[]
  NOT?: Prisma.AttemptWhereInput | Prisma.AttemptWhereInput[]
  id?: Prisma.StringFilter<"Attempt"> | string
  userId?: Prisma.StringFilter<"Attempt"> | string
  quizId?: Prisma.StringFilter<"Attempt"> | string
  startedAt?: Prisma.DateTimeFilter<"Attempt"> | Date | string
  finishedAt?: Prisma.DateTimeNullableFilter<"Attempt"> | Date | string | null
  score?: Prisma.IntFilter<"Attempt"> | number
  timeTakenSec?: Prisma.IntNullableFilter<"Attempt"> | number | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  quiz?: Prisma.XOR<Prisma.QuizScalarRelationFilter, Prisma.QuizWhereInput>
  userAnswers?: Prisma.UserAnswerListRelationFilter
}

export type AttemptOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  score?: Prisma.SortOrder
  timeTakenSec?: Prisma.SortOrderInput | Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  quiz?: Prisma.QuizOrderByWithRelationInput
  userAnswers?: Prisma.UserAnswerOrderByRelationAggregateInput
  _relevance?: Prisma.AttemptOrderByRelevanceInput
}

export type AttemptWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AttemptWhereInput | Prisma.AttemptWhereInput[]
  OR?: Prisma.AttemptWhereInput[]
  NOT?: Prisma.AttemptWhereInput | Prisma.AttemptWhereInput[]
  userId?: Prisma.StringFilter<"Attempt"> | string
  quizId?: Prisma.StringFilter<"Attempt"> | string
  startedAt?: Prisma.DateTimeFilter<"Attempt"> | Date | string
  finishedAt?: Prisma.DateTimeNullableFilter<"Attempt"> | Date | string | null
  score?: Prisma.IntFilter<"Attempt"> | number
  timeTakenSec?: Prisma.IntNullableFilter<"Attempt"> | number | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  quiz?: Prisma.XOR<Prisma.QuizScalarRelationFilter, Prisma.QuizWhereInput>
  userAnswers?: Prisma.UserAnswerListRelationFilter
}, "id">

export type AttemptOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  score?: Prisma.SortOrder
  timeTakenSec?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.AttemptCountOrderByAggregateInput
  _avg?: Prisma.AttemptAvgOrderByAggregateInput
  _max?: Prisma.AttemptMaxOrderByAggregateInput
  _min?: Prisma.AttemptMinOrderByAggregateInput
  _sum?: Prisma.AttemptSumOrderByAggregateInput
}

export type AttemptScalarWhereWithAggregatesInput = {
  AND?: Prisma.AttemptScalarWhereWithAggregatesInput | Prisma.AttemptScalarWhereWithAggregatesInput[]
  OR?: Prisma.AttemptScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AttemptScalarWhereWithAggregatesInput | Prisma.AttemptScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Attempt"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Attempt"> | string
  quizId?: Prisma.StringWithAggregatesFilter<"Attempt"> | string
  startedAt?: Prisma.DateTimeWithAggregatesFilter<"Attempt"> | Date | string
  finishedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Attempt"> | Date | string | null
  score?: Prisma.IntWithAggregatesFilter<"Attempt"> | number
  timeTakenSec?: Prisma.IntNullableWithAggregatesFilter<"Attempt"> | number | null
}

export type AttemptCreateInput = {
  id?: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
  score?: number
  timeTakenSec?: number | null
  user: Prisma.UserCreateNestedOneWithoutAttemptsInput
  quiz: Prisma.QuizCreateNestedOneWithoutAttemptsInput
  userAnswers?: Prisma.UserAnswerCreateNestedManyWithoutAttemptInput
}

export type AttemptUncheckedCreateInput = {
  id?: string
  userId: string
  quizId: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
  score?: number
  timeTakenSec?: number | null
  userAnswers?: Prisma.UserAnswerUncheckedCreateNestedManyWithoutAttemptInput
}

export type AttemptUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.IntFieldUpdateOperationsInput | number
  timeTakenSec?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  user?: Prisma.UserUpdateOneRequiredWithoutAttemptsNestedInput
  quiz?: Prisma.QuizUpdateOneRequiredWithoutAttemptsNestedInput
  userAnswers?: Prisma.UserAnswerUpdateManyWithoutAttemptNestedInput
}

export type AttemptUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  quizId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.IntFieldUpdateOperationsInput | number
  timeTakenSec?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAnswers?: Prisma.UserAnswerUncheckedUpdateManyWithoutAttemptNestedInput
}

export type AttemptCreateManyInput = {
  id?: string
  userId: string
  quizId: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
  score?: number
  timeTakenSec?: number | null
}

export type AttemptUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.IntFieldUpdateOperationsInput | number
  timeTakenSec?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type AttemptUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  quizId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.IntFieldUpdateOperationsInput | number
  timeTakenSec?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type AttemptListRelationFilter = {
  every?: Prisma.AttemptWhereInput
  some?: Prisma.AttemptWhereInput
  none?: Prisma.AttemptWhereInput
}

export type AttemptOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AttemptOrderByRelevanceInput = {
  fields: Prisma.AttemptOrderByRelevanceFieldEnum | Prisma.AttemptOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type AttemptCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrder
  score?: Prisma.SortOrder
  timeTakenSec?: Prisma.SortOrder
}

export type AttemptAvgOrderByAggregateInput = {
  score?: Prisma.SortOrder
  timeTakenSec?: Prisma.SortOrder
}

export type AttemptMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrder
  score?: Prisma.SortOrder
  timeTakenSec?: Prisma.SortOrder
}

export type AttemptMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrder
  score?: Prisma.SortOrder
  timeTakenSec?: Prisma.SortOrder
}

export type AttemptSumOrderByAggregateInput = {
  score?: Prisma.SortOrder
  timeTakenSec?: Prisma.SortOrder
}

export type AttemptScalarRelationFilter = {
  is?: Prisma.AttemptWhereInput
  isNot?: Prisma.AttemptWhereInput
}

export type AttemptCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AttemptCreateWithoutUserInput, Prisma.AttemptUncheckedCreateWithoutUserInput> | Prisma.AttemptCreateWithoutUserInput[] | Prisma.AttemptUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AttemptCreateOrConnectWithoutUserInput | Prisma.AttemptCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AttemptCreateManyUserInputEnvelope
  connect?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
}

export type AttemptUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AttemptCreateWithoutUserInput, Prisma.AttemptUncheckedCreateWithoutUserInput> | Prisma.AttemptCreateWithoutUserInput[] | Prisma.AttemptUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AttemptCreateOrConnectWithoutUserInput | Prisma.AttemptCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AttemptCreateManyUserInputEnvelope
  connect?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
}

export type AttemptUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AttemptCreateWithoutUserInput, Prisma.AttemptUncheckedCreateWithoutUserInput> | Prisma.AttemptCreateWithoutUserInput[] | Prisma.AttemptUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AttemptCreateOrConnectWithoutUserInput | Prisma.AttemptCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AttemptUpsertWithWhereUniqueWithoutUserInput | Prisma.AttemptUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AttemptCreateManyUserInputEnvelope
  set?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
  disconnect?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
  delete?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
  connect?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
  update?: Prisma.AttemptUpdateWithWhereUniqueWithoutUserInput | Prisma.AttemptUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AttemptUpdateManyWithWhereWithoutUserInput | Prisma.AttemptUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AttemptScalarWhereInput | Prisma.AttemptScalarWhereInput[]
}

export type AttemptUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AttemptCreateWithoutUserInput, Prisma.AttemptUncheckedCreateWithoutUserInput> | Prisma.AttemptCreateWithoutUserInput[] | Prisma.AttemptUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AttemptCreateOrConnectWithoutUserInput | Prisma.AttemptCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AttemptUpsertWithWhereUniqueWithoutUserInput | Prisma.AttemptUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AttemptCreateManyUserInputEnvelope
  set?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
  disconnect?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
  delete?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
  connect?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
  update?: Prisma.AttemptUpdateWithWhereUniqueWithoutUserInput | Prisma.AttemptUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AttemptUpdateManyWithWhereWithoutUserInput | Prisma.AttemptUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AttemptScalarWhereInput | Prisma.AttemptScalarWhereInput[]
}

export type AttemptCreateNestedManyWithoutQuizInput = {
  create?: Prisma.XOR<Prisma.AttemptCreateWithoutQuizInput, Prisma.AttemptUncheckedCreateWithoutQuizInput> | Prisma.AttemptCreateWithoutQuizInput[] | Prisma.AttemptUncheckedCreateWithoutQuizInput[]
  connectOrCreate?: Prisma.AttemptCreateOrConnectWithoutQuizInput | Prisma.AttemptCreateOrConnectWithoutQuizInput[]
  createMany?: Prisma.AttemptCreateManyQuizInputEnvelope
  connect?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
}

export type AttemptUncheckedCreateNestedManyWithoutQuizInput = {
  create?: Prisma.XOR<Prisma.AttemptCreateWithoutQuizInput, Prisma.AttemptUncheckedCreateWithoutQuizInput> | Prisma.AttemptCreateWithoutQuizInput[] | Prisma.AttemptUncheckedCreateWithoutQuizInput[]
  connectOrCreate?: Prisma.AttemptCreateOrConnectWithoutQuizInput | Prisma.AttemptCreateOrConnectWithoutQuizInput[]
  createMany?: Prisma.AttemptCreateManyQuizInputEnvelope
  connect?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
}

export type AttemptUpdateManyWithoutQuizNestedInput = {
  create?: Prisma.XOR<Prisma.AttemptCreateWithoutQuizInput, Prisma.AttemptUncheckedCreateWithoutQuizInput> | Prisma.AttemptCreateWithoutQuizInput[] | Prisma.AttemptUncheckedCreateWithoutQuizInput[]
  connectOrCreate?: Prisma.AttemptCreateOrConnectWithoutQuizInput | Prisma.AttemptCreateOrConnectWithoutQuizInput[]
  upsert?: Prisma.AttemptUpsertWithWhereUniqueWithoutQuizInput | Prisma.AttemptUpsertWithWhereUniqueWithoutQuizInput[]
  createMany?: Prisma.AttemptCreateManyQuizInputEnvelope
  set?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
  disconnect?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
  delete?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
  connect?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
  update?: Prisma.AttemptUpdateWithWhereUniqueWithoutQuizInput | Prisma.AttemptUpdateWithWhereUniqueWithoutQuizInput[]
  updateMany?: Prisma.AttemptUpdateManyWithWhereWithoutQuizInput | Prisma.AttemptUpdateManyWithWhereWithoutQuizInput[]
  deleteMany?: Prisma.AttemptScalarWhereInput | Prisma.AttemptScalarWhereInput[]
}

export type AttemptUncheckedUpdateManyWithoutQuizNestedInput = {
  create?: Prisma.XOR<Prisma.AttemptCreateWithoutQuizInput, Prisma.AttemptUncheckedCreateWithoutQuizInput> | Prisma.AttemptCreateWithoutQuizInput[] | Prisma.AttemptUncheckedCreateWithoutQuizInput[]
  connectOrCreate?: Prisma.AttemptCreateOrConnectWithoutQuizInput | Prisma.AttemptCreateOrConnectWithoutQuizInput[]
  upsert?: Prisma.AttemptUpsertWithWhereUniqueWithoutQuizInput | Prisma.AttemptUpsertWithWhereUniqueWithoutQuizInput[]
  createMany?: Prisma.AttemptCreateManyQuizInputEnvelope
  set?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
  disconnect?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
  delete?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
  connect?: Prisma.AttemptWhereUniqueInput | Prisma.AttemptWhereUniqueInput[]
  update?: Prisma.AttemptUpdateWithWhereUniqueWithoutQuizInput | Prisma.AttemptUpdateWithWhereUniqueWithoutQuizInput[]
  updateMany?: Prisma.AttemptUpdateManyWithWhereWithoutQuizInput | Prisma.AttemptUpdateManyWithWhereWithoutQuizInput[]
  deleteMany?: Prisma.AttemptScalarWhereInput | Prisma.AttemptScalarWhereInput[]
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type AttemptCreateNestedOneWithoutUserAnswersInput = {
  create?: Prisma.XOR<Prisma.AttemptCreateWithoutUserAnswersInput, Prisma.AttemptUncheckedCreateWithoutUserAnswersInput>
  connectOrCreate?: Prisma.AttemptCreateOrConnectWithoutUserAnswersInput
  connect?: Prisma.AttemptWhereUniqueInput
}

export type AttemptUpdateOneRequiredWithoutUserAnswersNestedInput = {
  create?: Prisma.XOR<Prisma.AttemptCreateWithoutUserAnswersInput, Prisma.AttemptUncheckedCreateWithoutUserAnswersInput>
  connectOrCreate?: Prisma.AttemptCreateOrConnectWithoutUserAnswersInput
  upsert?: Prisma.AttemptUpsertWithoutUserAnswersInput
  connect?: Prisma.AttemptWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AttemptUpdateToOneWithWhereWithoutUserAnswersInput, Prisma.AttemptUpdateWithoutUserAnswersInput>, Prisma.AttemptUncheckedUpdateWithoutUserAnswersInput>
}

export type AttemptCreateWithoutUserInput = {
  id?: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
  score?: number
  timeTakenSec?: number | null
  quiz: Prisma.QuizCreateNestedOneWithoutAttemptsInput
  userAnswers?: Prisma.UserAnswerCreateNestedManyWithoutAttemptInput
}

export type AttemptUncheckedCreateWithoutUserInput = {
  id?: string
  quizId: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
  score?: number
  timeTakenSec?: number | null
  userAnswers?: Prisma.UserAnswerUncheckedCreateNestedManyWithoutAttemptInput
}

export type AttemptCreateOrConnectWithoutUserInput = {
  where: Prisma.AttemptWhereUniqueInput
  create: Prisma.XOR<Prisma.AttemptCreateWithoutUserInput, Prisma.AttemptUncheckedCreateWithoutUserInput>
}

export type AttemptCreateManyUserInputEnvelope = {
  data: Prisma.AttemptCreateManyUserInput | Prisma.AttemptCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type AttemptUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AttemptWhereUniqueInput
  update: Prisma.XOR<Prisma.AttemptUpdateWithoutUserInput, Prisma.AttemptUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.AttemptCreateWithoutUserInput, Prisma.AttemptUncheckedCreateWithoutUserInput>
}

export type AttemptUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AttemptWhereUniqueInput
  data: Prisma.XOR<Prisma.AttemptUpdateWithoutUserInput, Prisma.AttemptUncheckedUpdateWithoutUserInput>
}

export type AttemptUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AttemptScalarWhereInput
  data: Prisma.XOR<Prisma.AttemptUpdateManyMutationInput, Prisma.AttemptUncheckedUpdateManyWithoutUserInput>
}

export type AttemptScalarWhereInput = {
  AND?: Prisma.AttemptScalarWhereInput | Prisma.AttemptScalarWhereInput[]
  OR?: Prisma.AttemptScalarWhereInput[]
  NOT?: Prisma.AttemptScalarWhereInput | Prisma.AttemptScalarWhereInput[]
  id?: Prisma.StringFilter<"Attempt"> | string
  userId?: Prisma.StringFilter<"Attempt"> | string
  quizId?: Prisma.StringFilter<"Attempt"> | string
  startedAt?: Prisma.DateTimeFilter<"Attempt"> | Date | string
  finishedAt?: Prisma.DateTimeNullableFilter<"Attempt"> | Date | string | null
  score?: Prisma.IntFilter<"Attempt"> | number
  timeTakenSec?: Prisma.IntNullableFilter<"Attempt"> | number | null
}

export type AttemptCreateWithoutQuizInput = {
  id?: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
  score?: number
  timeTakenSec?: number | null
  user: Prisma.UserCreateNestedOneWithoutAttemptsInput
  userAnswers?: Prisma.UserAnswerCreateNestedManyWithoutAttemptInput
}

export type AttemptUncheckedCreateWithoutQuizInput = {
  id?: string
  userId: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
  score?: number
  timeTakenSec?: number | null
  userAnswers?: Prisma.UserAnswerUncheckedCreateNestedManyWithoutAttemptInput
}

export type AttemptCreateOrConnectWithoutQuizInput = {
  where: Prisma.AttemptWhereUniqueInput
  create: Prisma.XOR<Prisma.AttemptCreateWithoutQuizInput, Prisma.AttemptUncheckedCreateWithoutQuizInput>
}

export type AttemptCreateManyQuizInputEnvelope = {
  data: Prisma.AttemptCreateManyQuizInput | Prisma.AttemptCreateManyQuizInput[]
  skipDuplicates?: boolean
}

export type AttemptUpsertWithWhereUniqueWithoutQuizInput = {
  where: Prisma.AttemptWhereUniqueInput
  update: Prisma.XOR<Prisma.AttemptUpdateWithoutQuizInput, Prisma.AttemptUncheckedUpdateWithoutQuizInput>
  create: Prisma.XOR<Prisma.AttemptCreateWithoutQuizInput, Prisma.AttemptUncheckedCreateWithoutQuizInput>
}

export type AttemptUpdateWithWhereUniqueWithoutQuizInput = {
  where: Prisma.AttemptWhereUniqueInput
  data: Prisma.XOR<Prisma.AttemptUpdateWithoutQuizInput, Prisma.AttemptUncheckedUpdateWithoutQuizInput>
}

export type AttemptUpdateManyWithWhereWithoutQuizInput = {
  where: Prisma.AttemptScalarWhereInput
  data: Prisma.XOR<Prisma.AttemptUpdateManyMutationInput, Prisma.AttemptUncheckedUpdateManyWithoutQuizInput>
}

export type AttemptCreateWithoutUserAnswersInput = {
  id?: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
  score?: number
  timeTakenSec?: number | null
  user: Prisma.UserCreateNestedOneWithoutAttemptsInput
  quiz: Prisma.QuizCreateNestedOneWithoutAttemptsInput
}

export type AttemptUncheckedCreateWithoutUserAnswersInput = {
  id?: string
  userId: string
  quizId: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
  score?: number
  timeTakenSec?: number | null
}

export type AttemptCreateOrConnectWithoutUserAnswersInput = {
  where: Prisma.AttemptWhereUniqueInput
  create: Prisma.XOR<Prisma.AttemptCreateWithoutUserAnswersInput, Prisma.AttemptUncheckedCreateWithoutUserAnswersInput>
}

export type AttemptUpsertWithoutUserAnswersInput = {
  update: Prisma.XOR<Prisma.AttemptUpdateWithoutUserAnswersInput, Prisma.AttemptUncheckedUpdateWithoutUserAnswersInput>
  create: Prisma.XOR<Prisma.AttemptCreateWithoutUserAnswersInput, Prisma.AttemptUncheckedCreateWithoutUserAnswersInput>
  where?: Prisma.AttemptWhereInput
}

export type AttemptUpdateToOneWithWhereWithoutUserAnswersInput = {
  where?: Prisma.AttemptWhereInput
  data: Prisma.XOR<Prisma.AttemptUpdateWithoutUserAnswersInput, Prisma.AttemptUncheckedUpdateWithoutUserAnswersInput>
}

export type AttemptUpdateWithoutUserAnswersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.IntFieldUpdateOperationsInput | number
  timeTakenSec?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  user?: Prisma.UserUpdateOneRequiredWithoutAttemptsNestedInput
  quiz?: Prisma.QuizUpdateOneRequiredWithoutAttemptsNestedInput
}

export type AttemptUncheckedUpdateWithoutUserAnswersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  quizId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.IntFieldUpdateOperationsInput | number
  timeTakenSec?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type AttemptCreateManyUserInput = {
  id?: string
  quizId: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
  score?: number
  timeTakenSec?: number | null
}

export type AttemptUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.IntFieldUpdateOperationsInput | number
  timeTakenSec?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  quiz?: Prisma.QuizUpdateOneRequiredWithoutAttemptsNestedInput
  userAnswers?: Prisma.UserAnswerUpdateManyWithoutAttemptNestedInput
}

export type AttemptUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quizId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.IntFieldUpdateOperationsInput | number
  timeTakenSec?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAnswers?: Prisma.UserAnswerUncheckedUpdateManyWithoutAttemptNestedInput
}

export type AttemptUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quizId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.IntFieldUpdateOperationsInput | number
  timeTakenSec?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type AttemptCreateManyQuizInput = {
  id?: string
  userId: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
  score?: number
  timeTakenSec?: number | null
}

export type AttemptUpdateWithoutQuizInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.IntFieldUpdateOperationsInput | number
  timeTakenSec?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  user?: Prisma.UserUpdateOneRequiredWithoutAttemptsNestedInput
  userAnswers?: Prisma.UserAnswerUpdateManyWithoutAttemptNestedInput
}

export type AttemptUncheckedUpdateWithoutQuizInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.IntFieldUpdateOperationsInput | number
  timeTakenSec?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAnswers?: Prisma.UserAnswerUncheckedUpdateManyWithoutAttemptNestedInput
}

export type AttemptUncheckedUpdateManyWithoutQuizInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  score?: Prisma.IntFieldUpdateOperationsInput | number
  timeTakenSec?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}


/**
 * Count Type AttemptCountOutputType
 */

export type AttemptCountOutputType = {
  userAnswers: number
}

export type AttemptCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  userAnswers?: boolean | AttemptCountOutputTypeCountUserAnswersArgs
}

/**
 * AttemptCountOutputType without action
 */
export type AttemptCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AttemptCountOutputType
   */
  select?: Prisma.AttemptCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AttemptCountOutputType without action
 */
export type AttemptCountOutputTypeCountUserAnswersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserAnswerWhereInput
}


export type AttemptSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  quizId?: boolean
  startedAt?: boolean
  finishedAt?: boolean
  score?: boolean
  timeTakenSec?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  quiz?: boolean | Prisma.QuizDefaultArgs<ExtArgs>
  userAnswers?: boolean | Prisma.Attempt$userAnswersArgs<ExtArgs>
  _count?: boolean | Prisma.AttemptCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["attempt"]>



export type AttemptSelectScalar = {
  id?: boolean
  userId?: boolean
  quizId?: boolean
  startedAt?: boolean
  finishedAt?: boolean
  score?: boolean
  timeTakenSec?: boolean
}

export type AttemptOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "quizId" | "startedAt" | "finishedAt" | "score" | "timeTakenSec", ExtArgs["result"]["attempt"]>
export type AttemptInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  quiz?: boolean | Prisma.QuizDefaultArgs<ExtArgs>
  userAnswers?: boolean | Prisma.Attempt$userAnswersArgs<ExtArgs>
  _count?: boolean | Prisma.AttemptCountOutputTypeDefaultArgs<ExtArgs>
}

export type $AttemptPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Attempt"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    quiz: Prisma.$QuizPayload<ExtArgs>
    userAnswers: Prisma.$UserAnswerPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    quizId: string
    startedAt: Date
    finishedAt: Date | null
    score: number
    timeTakenSec: number | null
  }, ExtArgs["result"]["attempt"]>
  composites: {}
}

export type AttemptGetPayload<S extends boolean | null | undefined | AttemptDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AttemptPayload, S>

export type AttemptCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AttemptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AttemptCountAggregateInputType | true
  }

export interface AttemptDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attempt'], meta: { name: 'Attempt' } }
  /**
   * Find zero or one Attempt that matches the filter.
   * @param {AttemptFindUniqueArgs} args - Arguments to find a Attempt
   * @example
   * // Get one Attempt
   * const attempt = await prisma.attempt.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AttemptFindUniqueArgs>(args: Prisma.SelectSubset<T, AttemptFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AttemptClient<runtime.Types.Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Attempt that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AttemptFindUniqueOrThrowArgs} args - Arguments to find a Attempt
   * @example
   * // Get one Attempt
   * const attempt = await prisma.attempt.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AttemptFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AttemptFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AttemptClient<runtime.Types.Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Attempt that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttemptFindFirstArgs} args - Arguments to find a Attempt
   * @example
   * // Get one Attempt
   * const attempt = await prisma.attempt.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AttemptFindFirstArgs>(args?: Prisma.SelectSubset<T, AttemptFindFirstArgs<ExtArgs>>): Prisma.Prisma__AttemptClient<runtime.Types.Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Attempt that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttemptFindFirstOrThrowArgs} args - Arguments to find a Attempt
   * @example
   * // Get one Attempt
   * const attempt = await prisma.attempt.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AttemptFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AttemptFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AttemptClient<runtime.Types.Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Attempts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttemptFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Attempts
   * const attempts = await prisma.attempt.findMany()
   * 
   * // Get first 10 Attempts
   * const attempts = await prisma.attempt.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const attemptWithIdOnly = await prisma.attempt.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AttemptFindManyArgs>(args?: Prisma.SelectSubset<T, AttemptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Attempt.
   * @param {AttemptCreateArgs} args - Arguments to create a Attempt.
   * @example
   * // Create one Attempt
   * const Attempt = await prisma.attempt.create({
   *   data: {
   *     // ... data to create a Attempt
   *   }
   * })
   * 
   */
  create<T extends AttemptCreateArgs>(args: Prisma.SelectSubset<T, AttemptCreateArgs<ExtArgs>>): Prisma.Prisma__AttemptClient<runtime.Types.Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Attempts.
   * @param {AttemptCreateManyArgs} args - Arguments to create many Attempts.
   * @example
   * // Create many Attempts
   * const attempt = await prisma.attempt.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AttemptCreateManyArgs>(args?: Prisma.SelectSubset<T, AttemptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Attempt.
   * @param {AttemptDeleteArgs} args - Arguments to delete one Attempt.
   * @example
   * // Delete one Attempt
   * const Attempt = await prisma.attempt.delete({
   *   where: {
   *     // ... filter to delete one Attempt
   *   }
   * })
   * 
   */
  delete<T extends AttemptDeleteArgs>(args: Prisma.SelectSubset<T, AttemptDeleteArgs<ExtArgs>>): Prisma.Prisma__AttemptClient<runtime.Types.Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Attempt.
   * @param {AttemptUpdateArgs} args - Arguments to update one Attempt.
   * @example
   * // Update one Attempt
   * const attempt = await prisma.attempt.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AttemptUpdateArgs>(args: Prisma.SelectSubset<T, AttemptUpdateArgs<ExtArgs>>): Prisma.Prisma__AttemptClient<runtime.Types.Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Attempts.
   * @param {AttemptDeleteManyArgs} args - Arguments to filter Attempts to delete.
   * @example
   * // Delete a few Attempts
   * const { count } = await prisma.attempt.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AttemptDeleteManyArgs>(args?: Prisma.SelectSubset<T, AttemptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Attempts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttemptUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Attempts
   * const attempt = await prisma.attempt.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AttemptUpdateManyArgs>(args: Prisma.SelectSubset<T, AttemptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Attempt.
   * @param {AttemptUpsertArgs} args - Arguments to update or create a Attempt.
   * @example
   * // Update or create a Attempt
   * const attempt = await prisma.attempt.upsert({
   *   create: {
   *     // ... data to create a Attempt
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Attempt we want to update
   *   }
   * })
   */
  upsert<T extends AttemptUpsertArgs>(args: Prisma.SelectSubset<T, AttemptUpsertArgs<ExtArgs>>): Prisma.Prisma__AttemptClient<runtime.Types.Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Attempts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttemptCountArgs} args - Arguments to filter Attempts to count.
   * @example
   * // Count the number of Attempts
   * const count = await prisma.attempt.count({
   *   where: {
   *     // ... the filter for the Attempts we want to count
   *   }
   * })
  **/
  count<T extends AttemptCountArgs>(
    args?: Prisma.Subset<T, AttemptCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AttemptCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Attempt.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttemptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AttemptAggregateArgs>(args: Prisma.Subset<T, AttemptAggregateArgs>): Prisma.PrismaPromise<GetAttemptAggregateType<T>>

  /**
   * Group by Attempt.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttemptGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AttemptGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AttemptGroupByArgs['orderBy'] }
      : { orderBy?: AttemptGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AttemptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttemptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Attempt model
 */
readonly fields: AttemptFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Attempt.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AttemptClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  quiz<T extends Prisma.QuizDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.QuizDefaultArgs<ExtArgs>>): Prisma.Prisma__QuizClient<runtime.Types.Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  userAnswers<T extends Prisma.Attempt$userAnswersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Attempt$userAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Attempt model
 */
export interface AttemptFieldRefs {
  readonly id: Prisma.FieldRef<"Attempt", 'String'>
  readonly userId: Prisma.FieldRef<"Attempt", 'String'>
  readonly quizId: Prisma.FieldRef<"Attempt", 'String'>
  readonly startedAt: Prisma.FieldRef<"Attempt", 'DateTime'>
  readonly finishedAt: Prisma.FieldRef<"Attempt", 'DateTime'>
  readonly score: Prisma.FieldRef<"Attempt", 'Int'>
  readonly timeTakenSec: Prisma.FieldRef<"Attempt", 'Int'>
}
    

// Custom InputTypes
/**
 * Attempt findUnique
 */
export type AttemptFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attempt
   */
  select?: Prisma.AttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attempt
   */
  omit?: Prisma.AttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttemptInclude<ExtArgs> | null
  /**
   * Filter, which Attempt to fetch.
   */
  where: Prisma.AttemptWhereUniqueInput
}

/**
 * Attempt findUniqueOrThrow
 */
export type AttemptFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attempt
   */
  select?: Prisma.AttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attempt
   */
  omit?: Prisma.AttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttemptInclude<ExtArgs> | null
  /**
   * Filter, which Attempt to fetch.
   */
  where: Prisma.AttemptWhereUniqueInput
}

/**
 * Attempt findFirst
 */
export type AttemptFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attempt
   */
  select?: Prisma.AttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attempt
   */
  omit?: Prisma.AttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttemptInclude<ExtArgs> | null
  /**
   * Filter, which Attempt to fetch.
   */
  where?: Prisma.AttemptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Attempts to fetch.
   */
  orderBy?: Prisma.AttemptOrderByWithRelationInput | Prisma.AttemptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Attempts.
   */
  cursor?: Prisma.AttemptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Attempts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Attempts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Attempts.
   */
  distinct?: Prisma.AttemptScalarFieldEnum | Prisma.AttemptScalarFieldEnum[]
}

/**
 * Attempt findFirstOrThrow
 */
export type AttemptFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attempt
   */
  select?: Prisma.AttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attempt
   */
  omit?: Prisma.AttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttemptInclude<ExtArgs> | null
  /**
   * Filter, which Attempt to fetch.
   */
  where?: Prisma.AttemptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Attempts to fetch.
   */
  orderBy?: Prisma.AttemptOrderByWithRelationInput | Prisma.AttemptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Attempts.
   */
  cursor?: Prisma.AttemptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Attempts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Attempts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Attempts.
   */
  distinct?: Prisma.AttemptScalarFieldEnum | Prisma.AttemptScalarFieldEnum[]
}

/**
 * Attempt findMany
 */
export type AttemptFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attempt
   */
  select?: Prisma.AttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attempt
   */
  omit?: Prisma.AttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttemptInclude<ExtArgs> | null
  /**
   * Filter, which Attempts to fetch.
   */
  where?: Prisma.AttemptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Attempts to fetch.
   */
  orderBy?: Prisma.AttemptOrderByWithRelationInput | Prisma.AttemptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Attempts.
   */
  cursor?: Prisma.AttemptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Attempts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Attempts.
   */
  skip?: number
  distinct?: Prisma.AttemptScalarFieldEnum | Prisma.AttemptScalarFieldEnum[]
}

/**
 * Attempt create
 */
export type AttemptCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attempt
   */
  select?: Prisma.AttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attempt
   */
  omit?: Prisma.AttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttemptInclude<ExtArgs> | null
  /**
   * The data needed to create a Attempt.
   */
  data: Prisma.XOR<Prisma.AttemptCreateInput, Prisma.AttemptUncheckedCreateInput>
}

/**
 * Attempt createMany
 */
export type AttemptCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Attempts.
   */
  data: Prisma.AttemptCreateManyInput | Prisma.AttemptCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Attempt update
 */
export type AttemptUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attempt
   */
  select?: Prisma.AttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attempt
   */
  omit?: Prisma.AttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttemptInclude<ExtArgs> | null
  /**
   * The data needed to update a Attempt.
   */
  data: Prisma.XOR<Prisma.AttemptUpdateInput, Prisma.AttemptUncheckedUpdateInput>
  /**
   * Choose, which Attempt to update.
   */
  where: Prisma.AttemptWhereUniqueInput
}

/**
 * Attempt updateMany
 */
export type AttemptUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Attempts.
   */
  data: Prisma.XOR<Prisma.AttemptUpdateManyMutationInput, Prisma.AttemptUncheckedUpdateManyInput>
  /**
   * Filter which Attempts to update
   */
  where?: Prisma.AttemptWhereInput
  /**
   * Limit how many Attempts to update.
   */
  limit?: number
}

/**
 * Attempt upsert
 */
export type AttemptUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attempt
   */
  select?: Prisma.AttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attempt
   */
  omit?: Prisma.AttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttemptInclude<ExtArgs> | null
  /**
   * The filter to search for the Attempt to update in case it exists.
   */
  where: Prisma.AttemptWhereUniqueInput
  /**
   * In case the Attempt found by the `where` argument doesn't exist, create a new Attempt with this data.
   */
  create: Prisma.XOR<Prisma.AttemptCreateInput, Prisma.AttemptUncheckedCreateInput>
  /**
   * In case the Attempt was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AttemptUpdateInput, Prisma.AttemptUncheckedUpdateInput>
}

/**
 * Attempt delete
 */
export type AttemptDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attempt
   */
  select?: Prisma.AttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attempt
   */
  omit?: Prisma.AttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttemptInclude<ExtArgs> | null
  /**
   * Filter which Attempt to delete.
   */
  where: Prisma.AttemptWhereUniqueInput
}

/**
 * Attempt deleteMany
 */
export type AttemptDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Attempts to delete
   */
  where?: Prisma.AttemptWhereInput
  /**
   * Limit how many Attempts to delete.
   */
  limit?: number
}

/**
 * Attempt.userAnswers
 */
export type Attempt$userAnswersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAnswer
   */
  select?: Prisma.UserAnswerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAnswer
   */
  omit?: Prisma.UserAnswerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAnswerInclude<ExtArgs> | null
  where?: Prisma.UserAnswerWhereInput
  orderBy?: Prisma.UserAnswerOrderByWithRelationInput | Prisma.UserAnswerOrderByWithRelationInput[]
  cursor?: Prisma.UserAnswerWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserAnswerScalarFieldEnum | Prisma.UserAnswerScalarFieldEnum[]
}

/**
 * Attempt without action
 */
export type AttemptDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attempt
   */
  select?: Prisma.AttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attempt
   */
  omit?: Prisma.AttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttemptInclude<ExtArgs> | null
}

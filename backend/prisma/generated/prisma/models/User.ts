
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `User` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model User
 * 
 */
export type UserModel = runtime.Types.Result.DefaultSelection<Prisma.$UserPayload>

export type AggregateUser = {
  _count: UserCountAggregateOutputType | null
  _avg: UserAvgAggregateOutputType | null
  _sum: UserSumAggregateOutputType | null
  _min: UserMinAggregateOutputType | null
  _max: UserMaxAggregateOutputType | null
}

export type UserAvgAggregateOutputType = {
  xp: number | null
  level: number | null
  streakCount: number | null
}

export type UserSumAggregateOutputType = {
  xp: number | null
  level: number | null
  streakCount: number | null
}

export type UserMinAggregateOutputType = {
  id: string | null
  username: string | null
  email: string | null
  password: string | null
  xp: number | null
  level: number | null
  streakCount: number | null
  lastLogin: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserMaxAggregateOutputType = {
  id: string | null
  username: string | null
  email: string | null
  password: string | null
  xp: number | null
  level: number | null
  streakCount: number | null
  lastLogin: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserCountAggregateOutputType = {
  id: number
  username: number
  email: number
  password: number
  xp: number
  level: number
  streakCount: number
  lastLogin: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type UserAvgAggregateInputType = {
  xp?: true
  level?: true
  streakCount?: true
}

export type UserSumAggregateInputType = {
  xp?: true
  level?: true
  streakCount?: true
}

export type UserMinAggregateInputType = {
  id?: true
  username?: true
  email?: true
  password?: true
  xp?: true
  level?: true
  streakCount?: true
  lastLogin?: true
  createdAt?: true
  updatedAt?: true
}

export type UserMaxAggregateInputType = {
  id?: true
  username?: true
  email?: true
  password?: true
  xp?: true
  level?: true
  streakCount?: true
  lastLogin?: true
  createdAt?: true
  updatedAt?: true
}

export type UserCountAggregateInputType = {
  id?: true
  username?: true
  email?: true
  password?: true
  xp?: true
  level?: true
  streakCount?: true
  lastLogin?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type UserAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which User to aggregate.
   */
  where?: Prisma.UserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Users
  **/
  _count?: true | UserCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UserAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UserSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserMaxAggregateInputType
}

export type GetUserAggregateType<T extends UserAggregateArgs> = {
      [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUser[P]>
    : Prisma.GetScalarType<T[P], AggregateUser[P]>
}




export type UserGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWhereInput
  orderBy?: Prisma.UserOrderByWithAggregationInput | Prisma.UserOrderByWithAggregationInput[]
  by: Prisma.UserScalarFieldEnum[] | Prisma.UserScalarFieldEnum
  having?: Prisma.UserScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserCountAggregateInputType | true
  _avg?: UserAvgAggregateInputType
  _sum?: UserSumAggregateInputType
  _min?: UserMinAggregateInputType
  _max?: UserMaxAggregateInputType
}

export type UserGroupByOutputType = {
  id: string
  username: string
  email: string
  password: string
  xp: number
  level: number
  streakCount: number
  lastLogin: Date | null
  createdAt: Date
  updatedAt: Date
  _count: UserCountAggregateOutputType | null
  _avg: UserAvgAggregateOutputType | null
  _sum: UserSumAggregateOutputType | null
  _min: UserMinAggregateOutputType | null
  _max: UserMaxAggregateOutputType | null
}

type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserGroupByOutputType[P]>
      }
    >
  >



export type UserWhereInput = {
  AND?: Prisma.UserWhereInput | Prisma.UserWhereInput[]
  OR?: Prisma.UserWhereInput[]
  NOT?: Prisma.UserWhereInput | Prisma.UserWhereInput[]
  id?: Prisma.StringFilter<"User"> | string
  username?: Prisma.StringFilter<"User"> | string
  email?: Prisma.StringFilter<"User"> | string
  password?: Prisma.StringFilter<"User"> | string
  xp?: Prisma.IntFilter<"User"> | number
  level?: Prisma.IntFilter<"User"> | number
  streakCount?: Prisma.IntFilter<"User"> | number
  lastLogin?: Prisma.DateTimeNullableFilter<"User"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"User"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"User"> | Date | string
  badges?: Prisma.UserBadgeListRelationFilter
  attempts?: Prisma.AttemptListRelationFilter
  leaderboard?: Prisma.XOR<Prisma.LeaderboardNullableScalarRelationFilter, Prisma.LeaderboardWhereInput> | null
  createdQuizzes?: Prisma.QuizListRelationFilter
  Reward?: Prisma.RewardListRelationFilter
}

export type UserOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  xp?: Prisma.SortOrder
  level?: Prisma.SortOrder
  streakCount?: Prisma.SortOrder
  lastLogin?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  badges?: Prisma.UserBadgeOrderByRelationAggregateInput
  attempts?: Prisma.AttemptOrderByRelationAggregateInput
  leaderboard?: Prisma.LeaderboardOrderByWithRelationInput
  createdQuizzes?: Prisma.QuizOrderByRelationAggregateInput
  Reward?: Prisma.RewardOrderByRelationAggregateInput
  _relevance?: Prisma.UserOrderByRelevanceInput
}

export type UserWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  username?: string
  email?: string
  AND?: Prisma.UserWhereInput | Prisma.UserWhereInput[]
  OR?: Prisma.UserWhereInput[]
  NOT?: Prisma.UserWhereInput | Prisma.UserWhereInput[]
  password?: Prisma.StringFilter<"User"> | string
  xp?: Prisma.IntFilter<"User"> | number
  level?: Prisma.IntFilter<"User"> | number
  streakCount?: Prisma.IntFilter<"User"> | number
  lastLogin?: Prisma.DateTimeNullableFilter<"User"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"User"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"User"> | Date | string
  badges?: Prisma.UserBadgeListRelationFilter
  attempts?: Prisma.AttemptListRelationFilter
  leaderboard?: Prisma.XOR<Prisma.LeaderboardNullableScalarRelationFilter, Prisma.LeaderboardWhereInput> | null
  createdQuizzes?: Prisma.QuizListRelationFilter
  Reward?: Prisma.RewardListRelationFilter
}, "id" | "username" | "email">

export type UserOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  xp?: Prisma.SortOrder
  level?: Prisma.SortOrder
  streakCount?: Prisma.SortOrder
  lastLogin?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.UserCountOrderByAggregateInput
  _avg?: Prisma.UserAvgOrderByAggregateInput
  _max?: Prisma.UserMaxOrderByAggregateInput
  _min?: Prisma.UserMinOrderByAggregateInput
  _sum?: Prisma.UserSumOrderByAggregateInput
}

export type UserScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserScalarWhereWithAggregatesInput | Prisma.UserScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserScalarWhereWithAggregatesInput | Prisma.UserScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"User"> | string
  username?: Prisma.StringWithAggregatesFilter<"User"> | string
  email?: Prisma.StringWithAggregatesFilter<"User"> | string
  password?: Prisma.StringWithAggregatesFilter<"User"> | string
  xp?: Prisma.IntWithAggregatesFilter<"User"> | number
  level?: Prisma.IntWithAggregatesFilter<"User"> | number
  streakCount?: Prisma.IntWithAggregatesFilter<"User"> | number
  lastLogin?: Prisma.DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"User"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"User"> | Date | string
}

export type UserCreateInput = {
  id?: string
  username: string
  email: string
  password: string
  xp?: number
  level?: number
  streakCount?: number
  lastLogin?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  badges?: Prisma.UserBadgeCreateNestedManyWithoutUserInput
  attempts?: Prisma.AttemptCreateNestedManyWithoutUserInput
  leaderboard?: Prisma.LeaderboardCreateNestedOneWithoutUserInput
  createdQuizzes?: Prisma.QuizCreateNestedManyWithoutCreatedByInput
  Reward?: Prisma.RewardCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateInput = {
  id?: string
  username: string
  email: string
  password: string
  xp?: number
  level?: number
  streakCount?: number
  lastLogin?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  badges?: Prisma.UserBadgeUncheckedCreateNestedManyWithoutUserInput
  attempts?: Prisma.AttemptUncheckedCreateNestedManyWithoutUserInput
  leaderboard?: Prisma.LeaderboardUncheckedCreateNestedOneWithoutUserInput
  createdQuizzes?: Prisma.QuizUncheckedCreateNestedManyWithoutCreatedByInput
  Reward?: Prisma.RewardUncheckedCreateNestedManyWithoutUserInput
}

export type UserUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  xp?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  streakCount?: Prisma.IntFieldUpdateOperationsInput | number
  lastLogin?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  badges?: Prisma.UserBadgeUpdateManyWithoutUserNestedInput
  attempts?: Prisma.AttemptUpdateManyWithoutUserNestedInput
  leaderboard?: Prisma.LeaderboardUpdateOneWithoutUserNestedInput
  createdQuizzes?: Prisma.QuizUpdateManyWithoutCreatedByNestedInput
  Reward?: Prisma.RewardUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  xp?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  streakCount?: Prisma.IntFieldUpdateOperationsInput | number
  lastLogin?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  badges?: Prisma.UserBadgeUncheckedUpdateManyWithoutUserNestedInput
  attempts?: Prisma.AttemptUncheckedUpdateManyWithoutUserNestedInput
  leaderboard?: Prisma.LeaderboardUncheckedUpdateOneWithoutUserNestedInput
  createdQuizzes?: Prisma.QuizUncheckedUpdateManyWithoutCreatedByNestedInput
  Reward?: Prisma.RewardUncheckedUpdateManyWithoutUserNestedInput
}

export type UserCreateManyInput = {
  id?: string
  username: string
  email: string
  password: string
  xp?: number
  level?: number
  streakCount?: number
  lastLogin?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  xp?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  streakCount?: Prisma.IntFieldUpdateOperationsInput | number
  lastLogin?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  xp?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  streakCount?: Prisma.IntFieldUpdateOperationsInput | number
  lastLogin?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserOrderByRelevanceInput = {
  fields: Prisma.UserOrderByRelevanceFieldEnum | Prisma.UserOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type UserCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  xp?: Prisma.SortOrder
  level?: Prisma.SortOrder
  streakCount?: Prisma.SortOrder
  lastLogin?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserAvgOrderByAggregateInput = {
  xp?: Prisma.SortOrder
  level?: Prisma.SortOrder
  streakCount?: Prisma.SortOrder
}

export type UserMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  xp?: Prisma.SortOrder
  level?: Prisma.SortOrder
  streakCount?: Prisma.SortOrder
  lastLogin?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  xp?: Prisma.SortOrder
  level?: Prisma.SortOrder
  streakCount?: Prisma.SortOrder
  lastLogin?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserSumOrderByAggregateInput = {
  xp?: Prisma.SortOrder
  level?: Prisma.SortOrder
  streakCount?: Prisma.SortOrder
}

export type UserNullableScalarRelationFilter = {
  is?: Prisma.UserWhereInput | null
  isNot?: Prisma.UserWhereInput | null
}

export type UserScalarRelationFilter = {
  is?: Prisma.UserWhereInput
  isNot?: Prisma.UserWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type UserCreateNestedOneWithoutCreatedQuizzesInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutCreatedQuizzesInput, Prisma.UserUncheckedCreateWithoutCreatedQuizzesInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutCreatedQuizzesInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserUpdateOneWithoutCreatedQuizzesNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutCreatedQuizzesInput, Prisma.UserUncheckedCreateWithoutCreatedQuizzesInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutCreatedQuizzesInput
  upsert?: Prisma.UserUpsertWithoutCreatedQuizzesInput
  disconnect?: Prisma.UserWhereInput | boolean
  delete?: Prisma.UserWhereInput | boolean
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutCreatedQuizzesInput, Prisma.UserUpdateWithoutCreatedQuizzesInput>, Prisma.UserUncheckedUpdateWithoutCreatedQuizzesInput>
}

export type UserCreateNestedOneWithoutAttemptsInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutAttemptsInput, Prisma.UserUncheckedCreateWithoutAttemptsInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutAttemptsInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserUpdateOneRequiredWithoutAttemptsNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutAttemptsInput, Prisma.UserUncheckedCreateWithoutAttemptsInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutAttemptsInput
  upsert?: Prisma.UserUpsertWithoutAttemptsInput
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutAttemptsInput, Prisma.UserUpdateWithoutAttemptsInput>, Prisma.UserUncheckedUpdateWithoutAttemptsInput>
}

export type UserCreateNestedOneWithoutBadgesInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutBadgesInput, Prisma.UserUncheckedCreateWithoutBadgesInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutBadgesInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserUpdateOneRequiredWithoutBadgesNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutBadgesInput, Prisma.UserUncheckedCreateWithoutBadgesInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutBadgesInput
  upsert?: Prisma.UserUpsertWithoutBadgesInput
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutBadgesInput, Prisma.UserUpdateWithoutBadgesInput>, Prisma.UserUncheckedUpdateWithoutBadgesInput>
}

export type UserCreateNestedOneWithoutLeaderboardInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutLeaderboardInput, Prisma.UserUncheckedCreateWithoutLeaderboardInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutLeaderboardInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserUpdateOneRequiredWithoutLeaderboardNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutLeaderboardInput, Prisma.UserUncheckedCreateWithoutLeaderboardInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutLeaderboardInput
  upsert?: Prisma.UserUpsertWithoutLeaderboardInput
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutLeaderboardInput, Prisma.UserUpdateWithoutLeaderboardInput>, Prisma.UserUncheckedUpdateWithoutLeaderboardInput>
}

export type UserCreateNestedOneWithoutRewardInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutRewardInput, Prisma.UserUncheckedCreateWithoutRewardInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutRewardInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserUpdateOneRequiredWithoutRewardNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutRewardInput, Prisma.UserUncheckedCreateWithoutRewardInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutRewardInput
  upsert?: Prisma.UserUpsertWithoutRewardInput
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutRewardInput, Prisma.UserUpdateWithoutRewardInput>, Prisma.UserUncheckedUpdateWithoutRewardInput>
}

export type UserCreateWithoutCreatedQuizzesInput = {
  id?: string
  username: string
  email: string
  password: string
  xp?: number
  level?: number
  streakCount?: number
  lastLogin?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  badges?: Prisma.UserBadgeCreateNestedManyWithoutUserInput
  attempts?: Prisma.AttemptCreateNestedManyWithoutUserInput
  leaderboard?: Prisma.LeaderboardCreateNestedOneWithoutUserInput
  Reward?: Prisma.RewardCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateWithoutCreatedQuizzesInput = {
  id?: string
  username: string
  email: string
  password: string
  xp?: number
  level?: number
  streakCount?: number
  lastLogin?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  badges?: Prisma.UserBadgeUncheckedCreateNestedManyWithoutUserInput
  attempts?: Prisma.AttemptUncheckedCreateNestedManyWithoutUserInput
  leaderboard?: Prisma.LeaderboardUncheckedCreateNestedOneWithoutUserInput
  Reward?: Prisma.RewardUncheckedCreateNestedManyWithoutUserInput
}

export type UserCreateOrConnectWithoutCreatedQuizzesInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutCreatedQuizzesInput, Prisma.UserUncheckedCreateWithoutCreatedQuizzesInput>
}

export type UserUpsertWithoutCreatedQuizzesInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutCreatedQuizzesInput, Prisma.UserUncheckedUpdateWithoutCreatedQuizzesInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutCreatedQuizzesInput, Prisma.UserUncheckedCreateWithoutCreatedQuizzesInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutCreatedQuizzesInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutCreatedQuizzesInput, Prisma.UserUncheckedUpdateWithoutCreatedQuizzesInput>
}

export type UserUpdateWithoutCreatedQuizzesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  xp?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  streakCount?: Prisma.IntFieldUpdateOperationsInput | number
  lastLogin?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  badges?: Prisma.UserBadgeUpdateManyWithoutUserNestedInput
  attempts?: Prisma.AttemptUpdateManyWithoutUserNestedInput
  leaderboard?: Prisma.LeaderboardUpdateOneWithoutUserNestedInput
  Reward?: Prisma.RewardUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateWithoutCreatedQuizzesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  xp?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  streakCount?: Prisma.IntFieldUpdateOperationsInput | number
  lastLogin?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  badges?: Prisma.UserBadgeUncheckedUpdateManyWithoutUserNestedInput
  attempts?: Prisma.AttemptUncheckedUpdateManyWithoutUserNestedInput
  leaderboard?: Prisma.LeaderboardUncheckedUpdateOneWithoutUserNestedInput
  Reward?: Prisma.RewardUncheckedUpdateManyWithoutUserNestedInput
}

export type UserCreateWithoutAttemptsInput = {
  id?: string
  username: string
  email: string
  password: string
  xp?: number
  level?: number
  streakCount?: number
  lastLogin?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  badges?: Prisma.UserBadgeCreateNestedManyWithoutUserInput
  leaderboard?: Prisma.LeaderboardCreateNestedOneWithoutUserInput
  createdQuizzes?: Prisma.QuizCreateNestedManyWithoutCreatedByInput
  Reward?: Prisma.RewardCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateWithoutAttemptsInput = {
  id?: string
  username: string
  email: string
  password: string
  xp?: number
  level?: number
  streakCount?: number
  lastLogin?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  badges?: Prisma.UserBadgeUncheckedCreateNestedManyWithoutUserInput
  leaderboard?: Prisma.LeaderboardUncheckedCreateNestedOneWithoutUserInput
  createdQuizzes?: Prisma.QuizUncheckedCreateNestedManyWithoutCreatedByInput
  Reward?: Prisma.RewardUncheckedCreateNestedManyWithoutUserInput
}

export type UserCreateOrConnectWithoutAttemptsInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutAttemptsInput, Prisma.UserUncheckedCreateWithoutAttemptsInput>
}

export type UserUpsertWithoutAttemptsInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutAttemptsInput, Prisma.UserUncheckedUpdateWithoutAttemptsInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutAttemptsInput, Prisma.UserUncheckedCreateWithoutAttemptsInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutAttemptsInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutAttemptsInput, Prisma.UserUncheckedUpdateWithoutAttemptsInput>
}

export type UserUpdateWithoutAttemptsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  xp?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  streakCount?: Prisma.IntFieldUpdateOperationsInput | number
  lastLogin?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  badges?: Prisma.UserBadgeUpdateManyWithoutUserNestedInput
  leaderboard?: Prisma.LeaderboardUpdateOneWithoutUserNestedInput
  createdQuizzes?: Prisma.QuizUpdateManyWithoutCreatedByNestedInput
  Reward?: Prisma.RewardUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateWithoutAttemptsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  xp?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  streakCount?: Prisma.IntFieldUpdateOperationsInput | number
  lastLogin?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  badges?: Prisma.UserBadgeUncheckedUpdateManyWithoutUserNestedInput
  leaderboard?: Prisma.LeaderboardUncheckedUpdateOneWithoutUserNestedInput
  createdQuizzes?: Prisma.QuizUncheckedUpdateManyWithoutCreatedByNestedInput
  Reward?: Prisma.RewardUncheckedUpdateManyWithoutUserNestedInput
}

export type UserCreateWithoutBadgesInput = {
  id?: string
  username: string
  email: string
  password: string
  xp?: number
  level?: number
  streakCount?: number
  lastLogin?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  attempts?: Prisma.AttemptCreateNestedManyWithoutUserInput
  leaderboard?: Prisma.LeaderboardCreateNestedOneWithoutUserInput
  createdQuizzes?: Prisma.QuizCreateNestedManyWithoutCreatedByInput
  Reward?: Prisma.RewardCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateWithoutBadgesInput = {
  id?: string
  username: string
  email: string
  password: string
  xp?: number
  level?: number
  streakCount?: number
  lastLogin?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  attempts?: Prisma.AttemptUncheckedCreateNestedManyWithoutUserInput
  leaderboard?: Prisma.LeaderboardUncheckedCreateNestedOneWithoutUserInput
  createdQuizzes?: Prisma.QuizUncheckedCreateNestedManyWithoutCreatedByInput
  Reward?: Prisma.RewardUncheckedCreateNestedManyWithoutUserInput
}

export type UserCreateOrConnectWithoutBadgesInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutBadgesInput, Prisma.UserUncheckedCreateWithoutBadgesInput>
}

export type UserUpsertWithoutBadgesInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutBadgesInput, Prisma.UserUncheckedUpdateWithoutBadgesInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutBadgesInput, Prisma.UserUncheckedCreateWithoutBadgesInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutBadgesInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutBadgesInput, Prisma.UserUncheckedUpdateWithoutBadgesInput>
}

export type UserUpdateWithoutBadgesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  xp?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  streakCount?: Prisma.IntFieldUpdateOperationsInput | number
  lastLogin?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attempts?: Prisma.AttemptUpdateManyWithoutUserNestedInput
  leaderboard?: Prisma.LeaderboardUpdateOneWithoutUserNestedInput
  createdQuizzes?: Prisma.QuizUpdateManyWithoutCreatedByNestedInput
  Reward?: Prisma.RewardUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateWithoutBadgesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  xp?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  streakCount?: Prisma.IntFieldUpdateOperationsInput | number
  lastLogin?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attempts?: Prisma.AttemptUncheckedUpdateManyWithoutUserNestedInput
  leaderboard?: Prisma.LeaderboardUncheckedUpdateOneWithoutUserNestedInput
  createdQuizzes?: Prisma.QuizUncheckedUpdateManyWithoutCreatedByNestedInput
  Reward?: Prisma.RewardUncheckedUpdateManyWithoutUserNestedInput
}

export type UserCreateWithoutLeaderboardInput = {
  id?: string
  username: string
  email: string
  password: string
  xp?: number
  level?: number
  streakCount?: number
  lastLogin?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  badges?: Prisma.UserBadgeCreateNestedManyWithoutUserInput
  attempts?: Prisma.AttemptCreateNestedManyWithoutUserInput
  createdQuizzes?: Prisma.QuizCreateNestedManyWithoutCreatedByInput
  Reward?: Prisma.RewardCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateWithoutLeaderboardInput = {
  id?: string
  username: string
  email: string
  password: string
  xp?: number
  level?: number
  streakCount?: number
  lastLogin?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  badges?: Prisma.UserBadgeUncheckedCreateNestedManyWithoutUserInput
  attempts?: Prisma.AttemptUncheckedCreateNestedManyWithoutUserInput
  createdQuizzes?: Prisma.QuizUncheckedCreateNestedManyWithoutCreatedByInput
  Reward?: Prisma.RewardUncheckedCreateNestedManyWithoutUserInput
}

export type UserCreateOrConnectWithoutLeaderboardInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutLeaderboardInput, Prisma.UserUncheckedCreateWithoutLeaderboardInput>
}

export type UserUpsertWithoutLeaderboardInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutLeaderboardInput, Prisma.UserUncheckedUpdateWithoutLeaderboardInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutLeaderboardInput, Prisma.UserUncheckedCreateWithoutLeaderboardInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutLeaderboardInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutLeaderboardInput, Prisma.UserUncheckedUpdateWithoutLeaderboardInput>
}

export type UserUpdateWithoutLeaderboardInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  xp?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  streakCount?: Prisma.IntFieldUpdateOperationsInput | number
  lastLogin?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  badges?: Prisma.UserBadgeUpdateManyWithoutUserNestedInput
  attempts?: Prisma.AttemptUpdateManyWithoutUserNestedInput
  createdQuizzes?: Prisma.QuizUpdateManyWithoutCreatedByNestedInput
  Reward?: Prisma.RewardUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateWithoutLeaderboardInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  xp?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  streakCount?: Prisma.IntFieldUpdateOperationsInput | number
  lastLogin?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  badges?: Prisma.UserBadgeUncheckedUpdateManyWithoutUserNestedInput
  attempts?: Prisma.AttemptUncheckedUpdateManyWithoutUserNestedInput
  createdQuizzes?: Prisma.QuizUncheckedUpdateManyWithoutCreatedByNestedInput
  Reward?: Prisma.RewardUncheckedUpdateManyWithoutUserNestedInput
}

export type UserCreateWithoutRewardInput = {
  id?: string
  username: string
  email: string
  password: string
  xp?: number
  level?: number
  streakCount?: number
  lastLogin?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  badges?: Prisma.UserBadgeCreateNestedManyWithoutUserInput
  attempts?: Prisma.AttemptCreateNestedManyWithoutUserInput
  leaderboard?: Prisma.LeaderboardCreateNestedOneWithoutUserInput
  createdQuizzes?: Prisma.QuizCreateNestedManyWithoutCreatedByInput
}

export type UserUncheckedCreateWithoutRewardInput = {
  id?: string
  username: string
  email: string
  password: string
  xp?: number
  level?: number
  streakCount?: number
  lastLogin?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  badges?: Prisma.UserBadgeUncheckedCreateNestedManyWithoutUserInput
  attempts?: Prisma.AttemptUncheckedCreateNestedManyWithoutUserInput
  leaderboard?: Prisma.LeaderboardUncheckedCreateNestedOneWithoutUserInput
  createdQuizzes?: Prisma.QuizUncheckedCreateNestedManyWithoutCreatedByInput
}

export type UserCreateOrConnectWithoutRewardInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutRewardInput, Prisma.UserUncheckedCreateWithoutRewardInput>
}

export type UserUpsertWithoutRewardInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutRewardInput, Prisma.UserUncheckedUpdateWithoutRewardInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutRewardInput, Prisma.UserUncheckedCreateWithoutRewardInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutRewardInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutRewardInput, Prisma.UserUncheckedUpdateWithoutRewardInput>
}

export type UserUpdateWithoutRewardInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  xp?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  streakCount?: Prisma.IntFieldUpdateOperationsInput | number
  lastLogin?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  badges?: Prisma.UserBadgeUpdateManyWithoutUserNestedInput
  attempts?: Prisma.AttemptUpdateManyWithoutUserNestedInput
  leaderboard?: Prisma.LeaderboardUpdateOneWithoutUserNestedInput
  createdQuizzes?: Prisma.QuizUpdateManyWithoutCreatedByNestedInput
}

export type UserUncheckedUpdateWithoutRewardInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  xp?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  streakCount?: Prisma.IntFieldUpdateOperationsInput | number
  lastLogin?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  badges?: Prisma.UserBadgeUncheckedUpdateManyWithoutUserNestedInput
  attempts?: Prisma.AttemptUncheckedUpdateManyWithoutUserNestedInput
  leaderboard?: Prisma.LeaderboardUncheckedUpdateOneWithoutUserNestedInput
  createdQuizzes?: Prisma.QuizUncheckedUpdateManyWithoutCreatedByNestedInput
}


/**
 * Count Type UserCountOutputType
 */

export type UserCountOutputType = {
  badges: number
  attempts: number
  createdQuizzes: number
  Reward: number
}

export type UserCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  badges?: boolean | UserCountOutputTypeCountBadgesArgs
  attempts?: boolean | UserCountOutputTypeCountAttemptsArgs
  createdQuizzes?: boolean | UserCountOutputTypeCountCreatedQuizzesArgs
  Reward?: boolean | UserCountOutputTypeCountRewardArgs
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCountOutputType
   */
  select?: Prisma.UserCountOutputTypeSelect<ExtArgs> | null
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountBadgesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserBadgeWhereInput
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountAttemptsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AttemptWhereInput
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountCreatedQuizzesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.QuizWhereInput
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountRewardArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RewardWhereInput
}


export type UserSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  username?: boolean
  email?: boolean
  password?: boolean
  xp?: boolean
  level?: boolean
  streakCount?: boolean
  lastLogin?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  badges?: boolean | Prisma.User$badgesArgs<ExtArgs>
  attempts?: boolean | Prisma.User$attemptsArgs<ExtArgs>
  leaderboard?: boolean | Prisma.User$leaderboardArgs<ExtArgs>
  createdQuizzes?: boolean | Prisma.User$createdQuizzesArgs<ExtArgs>
  Reward?: boolean | Prisma.User$RewardArgs<ExtArgs>
  _count?: boolean | Prisma.UserCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["user"]>



export type UserSelectScalar = {
  id?: boolean
  username?: boolean
  email?: boolean
  password?: boolean
  xp?: boolean
  level?: boolean
  streakCount?: boolean
  lastLogin?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type UserOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "username" | "email" | "password" | "xp" | "level" | "streakCount" | "lastLogin" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
export type UserInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  badges?: boolean | Prisma.User$badgesArgs<ExtArgs>
  attempts?: boolean | Prisma.User$attemptsArgs<ExtArgs>
  leaderboard?: boolean | Prisma.User$leaderboardArgs<ExtArgs>
  createdQuizzes?: boolean | Prisma.User$createdQuizzesArgs<ExtArgs>
  Reward?: boolean | Prisma.User$RewardArgs<ExtArgs>
  _count?: boolean | Prisma.UserCountOutputTypeDefaultArgs<ExtArgs>
}

export type $UserPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    badges: Prisma.$UserBadgePayload<ExtArgs>[]
    attempts: Prisma.$AttemptPayload<ExtArgs>[]
    leaderboard: Prisma.$LeaderboardPayload<ExtArgs> | null
    createdQuizzes: Prisma.$QuizPayload<ExtArgs>[]
    Reward: Prisma.$RewardPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    username: string
    email: string
    password: string
    xp: number
    level: number
    streakCount: number
    lastLogin: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["user"]>
  composites: {}
}

export type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserPayload, S>

export type UserCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserCountAggregateInputType | true
  }

export interface UserDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
  /**
   * Find zero or one User that matches the filter.
   * @param {UserFindUniqueArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserFindUniqueArgs>(args: Prisma.SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one User that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first User that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFindFirstArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserFindFirstArgs>(args?: Prisma.SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first User that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Users that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserFindManyArgs>(args?: Prisma.SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const User = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
   */
  create<T extends UserCreateArgs>(args: Prisma.SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Users.
   * @param {UserCreateManyArgs} args - Arguments to create many Users.
   * @example
   * // Create many Users
   * const user = await prisma.user.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserCreateManyArgs>(args?: Prisma.SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const User = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
   */
  delete<T extends UserDeleteArgs>(args: Prisma.SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserUpdateArgs>(args: Prisma.SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserUpdateManyArgs>(args: Prisma.SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
   */
  upsert<T extends UserUpsertArgs>(args: Prisma.SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCountArgs} args - Arguments to filter Users to count.
   * @example
   * // Count the number of Users
   * const count = await prisma.user.count({
   *   where: {
   *     // ... the filter for the Users we want to count
   *   }
   * })
  **/
  count<T extends UserCountArgs>(
    args?: Prisma.Subset<T, UserCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a User.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserAggregateArgs>(args: Prisma.Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

  /**
   * Group by User.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserGroupByArgs['orderBy'] }
      : { orderBy?: UserGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the User model
 */
readonly fields: UserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for User.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  badges<T extends Prisma.User$badgesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$badgesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  attempts<T extends Prisma.User$attemptsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$attemptsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  leaderboard<T extends Prisma.User$leaderboardArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$leaderboardArgs<ExtArgs>>): Prisma.Prisma__LeaderboardClient<runtime.Types.Result.GetResult<Prisma.$LeaderboardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  createdQuizzes<T extends Prisma.User$createdQuizzesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$createdQuizzesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Reward<T extends Prisma.User$RewardArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$RewardArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the User model
 */
export interface UserFieldRefs {
  readonly id: Prisma.FieldRef<"User", 'String'>
  readonly username: Prisma.FieldRef<"User", 'String'>
  readonly email: Prisma.FieldRef<"User", 'String'>
  readonly password: Prisma.FieldRef<"User", 'String'>
  readonly xp: Prisma.FieldRef<"User", 'Int'>
  readonly level: Prisma.FieldRef<"User", 'Int'>
  readonly streakCount: Prisma.FieldRef<"User", 'Int'>
  readonly lastLogin: Prisma.FieldRef<"User", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"User", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"User", 'DateTime'>
}
    

// Custom InputTypes
/**
 * User findUnique
 */
export type UserFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which User to fetch.
   */
  where: Prisma.UserWhereUniqueInput
}

/**
 * User findUniqueOrThrow
 */
export type UserFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which User to fetch.
   */
  where: Prisma.UserWhereUniqueInput
}

/**
 * User findFirst
 */
export type UserFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which User to fetch.
   */
  where?: Prisma.UserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Users.
   */
  cursor?: Prisma.UserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Users.
   */
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * User findFirstOrThrow
 */
export type UserFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which User to fetch.
   */
  where?: Prisma.UserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Users.
   */
  cursor?: Prisma.UserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Users.
   */
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * User findMany
 */
export type UserFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which Users to fetch.
   */
  where?: Prisma.UserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Users.
   */
  cursor?: Prisma.UserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * User create
 */
export type UserCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * The data needed to create a User.
   */
  data: Prisma.XOR<Prisma.UserCreateInput, Prisma.UserUncheckedCreateInput>
}

/**
 * User createMany
 */
export type UserCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Users.
   */
  data: Prisma.UserCreateManyInput | Prisma.UserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * User update
 */
export type UserUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * The data needed to update a User.
   */
  data: Prisma.XOR<Prisma.UserUpdateInput, Prisma.UserUncheckedUpdateInput>
  /**
   * Choose, which User to update.
   */
  where: Prisma.UserWhereUniqueInput
}

/**
 * User updateMany
 */
export type UserUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Users.
   */
  data: Prisma.XOR<Prisma.UserUpdateManyMutationInput, Prisma.UserUncheckedUpdateManyInput>
  /**
   * Filter which Users to update
   */
  where?: Prisma.UserWhereInput
  /**
   * Limit how many Users to update.
   */
  limit?: number
}

/**
 * User upsert
 */
export type UserUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * The filter to search for the User to update in case it exists.
   */
  where: Prisma.UserWhereUniqueInput
  /**
   * In case the User found by the `where` argument doesn't exist, create a new User with this data.
   */
  create: Prisma.XOR<Prisma.UserCreateInput, Prisma.UserUncheckedCreateInput>
  /**
   * In case the User was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserUpdateInput, Prisma.UserUncheckedUpdateInput>
}

/**
 * User delete
 */
export type UserDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter which User to delete.
   */
  where: Prisma.UserWhereUniqueInput
}

/**
 * User deleteMany
 */
export type UserDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Users to delete
   */
  where?: Prisma.UserWhereInput
  /**
   * Limit how many Users to delete.
   */
  limit?: number
}

/**
 * User.badges
 */
export type User$badgesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBadge
   */
  select?: Prisma.UserBadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBadge
   */
  omit?: Prisma.UserBadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBadgeInclude<ExtArgs> | null
  where?: Prisma.UserBadgeWhereInput
  orderBy?: Prisma.UserBadgeOrderByWithRelationInput | Prisma.UserBadgeOrderByWithRelationInput[]
  cursor?: Prisma.UserBadgeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserBadgeScalarFieldEnum | Prisma.UserBadgeScalarFieldEnum[]
}

/**
 * User.attempts
 */
export type User$attemptsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Attempt
   */
  select?: Prisma.AttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Attempt
   */
  omit?: Prisma.AttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttemptInclude<ExtArgs> | null
  where?: Prisma.AttemptWhereInput
  orderBy?: Prisma.AttemptOrderByWithRelationInput | Prisma.AttemptOrderByWithRelationInput[]
  cursor?: Prisma.AttemptWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AttemptScalarFieldEnum | Prisma.AttemptScalarFieldEnum[]
}

/**
 * User.leaderboard
 */
export type User$leaderboardArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Leaderboard
   */
  select?: Prisma.LeaderboardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Leaderboard
   */
  omit?: Prisma.LeaderboardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaderboardInclude<ExtArgs> | null
  where?: Prisma.LeaderboardWhereInput
}

/**
 * User.createdQuizzes
 */
export type User$createdQuizzesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Quiz
   */
  select?: Prisma.QuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Quiz
   */
  omit?: Prisma.QuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizInclude<ExtArgs> | null
  where?: Prisma.QuizWhereInput
  orderBy?: Prisma.QuizOrderByWithRelationInput | Prisma.QuizOrderByWithRelationInput[]
  cursor?: Prisma.QuizWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.QuizScalarFieldEnum | Prisma.QuizScalarFieldEnum[]
}

/**
 * User.Reward
 */
export type User$RewardArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reward
   */
  select?: Prisma.RewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reward
   */
  omit?: Prisma.RewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RewardInclude<ExtArgs> | null
  where?: Prisma.RewardWhereInput
  orderBy?: Prisma.RewardOrderByWithRelationInput | Prisma.RewardOrderByWithRelationInput[]
  cursor?: Prisma.RewardWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RewardScalarFieldEnum | Prisma.RewardScalarFieldEnum[]
}

/**
 * User without action
 */
export type UserDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
}

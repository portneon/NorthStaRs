
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Reward` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Reward
 * 
 */
export type RewardModel = runtime.Types.Result.DefaultSelection<Prisma.$RewardPayload>

export type AggregateReward = {
  _count: RewardCountAggregateOutputType | null
  _avg: RewardAvgAggregateOutputType | null
  _sum: RewardSumAggregateOutputType | null
  _min: RewardMinAggregateOutputType | null
  _max: RewardMaxAggregateOutputType | null
}

export type RewardAvgAggregateOutputType = {
  amount: number | null
}

export type RewardSumAggregateOutputType = {
  amount: number | null
}

export type RewardMinAggregateOutputType = {
  id: string | null
  type: string | null
  amount: number | null
  userId: string | null
  createdAt: Date | null
}

export type RewardMaxAggregateOutputType = {
  id: string | null
  type: string | null
  amount: number | null
  userId: string | null
  createdAt: Date | null
}

export type RewardCountAggregateOutputType = {
  id: number
  type: number
  amount: number
  userId: number
  createdAt: number
  _all: number
}


export type RewardAvgAggregateInputType = {
  amount?: true
}

export type RewardSumAggregateInputType = {
  amount?: true
}

export type RewardMinAggregateInputType = {
  id?: true
  type?: true
  amount?: true
  userId?: true
  createdAt?: true
}

export type RewardMaxAggregateInputType = {
  id?: true
  type?: true
  amount?: true
  userId?: true
  createdAt?: true
}

export type RewardCountAggregateInputType = {
  id?: true
  type?: true
  amount?: true
  userId?: true
  createdAt?: true
  _all?: true
}

export type RewardAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Reward to aggregate.
   */
  where?: Prisma.RewardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rewards to fetch.
   */
  orderBy?: Prisma.RewardOrderByWithRelationInput | Prisma.RewardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RewardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rewards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rewards.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Rewards
  **/
  _count?: true | RewardCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RewardAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RewardSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RewardMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RewardMaxAggregateInputType
}

export type GetRewardAggregateType<T extends RewardAggregateArgs> = {
      [P in keyof T & keyof AggregateReward]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateReward[P]>
    : Prisma.GetScalarType<T[P], AggregateReward[P]>
}




export type RewardGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RewardWhereInput
  orderBy?: Prisma.RewardOrderByWithAggregationInput | Prisma.RewardOrderByWithAggregationInput[]
  by: Prisma.RewardScalarFieldEnum[] | Prisma.RewardScalarFieldEnum
  having?: Prisma.RewardScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RewardCountAggregateInputType | true
  _avg?: RewardAvgAggregateInputType
  _sum?: RewardSumAggregateInputType
  _min?: RewardMinAggregateInputType
  _max?: RewardMaxAggregateInputType
}

export type RewardGroupByOutputType = {
  id: string
  type: string
  amount: number
  userId: string
  createdAt: Date
  _count: RewardCountAggregateOutputType | null
  _avg: RewardAvgAggregateOutputType | null
  _sum: RewardSumAggregateOutputType | null
  _min: RewardMinAggregateOutputType | null
  _max: RewardMaxAggregateOutputType | null
}

type GetRewardGroupByPayload<T extends RewardGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RewardGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RewardGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RewardGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RewardGroupByOutputType[P]>
      }
    >
  >



export type RewardWhereInput = {
  AND?: Prisma.RewardWhereInput | Prisma.RewardWhereInput[]
  OR?: Prisma.RewardWhereInput[]
  NOT?: Prisma.RewardWhereInput | Prisma.RewardWhereInput[]
  id?: Prisma.StringFilter<"Reward"> | string
  type?: Prisma.StringFilter<"Reward"> | string
  amount?: Prisma.IntFilter<"Reward"> | number
  userId?: Prisma.StringFilter<"Reward"> | string
  createdAt?: Prisma.DateTimeFilter<"Reward"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type RewardOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  _relevance?: Prisma.RewardOrderByRelevanceInput
}

export type RewardWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.RewardWhereInput | Prisma.RewardWhereInput[]
  OR?: Prisma.RewardWhereInput[]
  NOT?: Prisma.RewardWhereInput | Prisma.RewardWhereInput[]
  type?: Prisma.StringFilter<"Reward"> | string
  amount?: Prisma.IntFilter<"Reward"> | number
  userId?: Prisma.StringFilter<"Reward"> | string
  createdAt?: Prisma.DateTimeFilter<"Reward"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type RewardOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.RewardCountOrderByAggregateInput
  _avg?: Prisma.RewardAvgOrderByAggregateInput
  _max?: Prisma.RewardMaxOrderByAggregateInput
  _min?: Prisma.RewardMinOrderByAggregateInput
  _sum?: Prisma.RewardSumOrderByAggregateInput
}

export type RewardScalarWhereWithAggregatesInput = {
  AND?: Prisma.RewardScalarWhereWithAggregatesInput | Prisma.RewardScalarWhereWithAggregatesInput[]
  OR?: Prisma.RewardScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RewardScalarWhereWithAggregatesInput | Prisma.RewardScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Reward"> | string
  type?: Prisma.StringWithAggregatesFilter<"Reward"> | string
  amount?: Prisma.IntWithAggregatesFilter<"Reward"> | number
  userId?: Prisma.StringWithAggregatesFilter<"Reward"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Reward"> | Date | string
}

export type RewardCreateInput = {
  id?: string
  type: string
  amount?: number
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutRewardInput
}

export type RewardUncheckedCreateInput = {
  id?: string
  type: string
  amount?: number
  userId: string
  createdAt?: Date | string
}

export type RewardUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutRewardNestedInput
}

export type RewardUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RewardCreateManyInput = {
  id?: string
  type: string
  amount?: number
  userId: string
  createdAt?: Date | string
}

export type RewardUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RewardUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RewardListRelationFilter = {
  every?: Prisma.RewardWhereInput
  some?: Prisma.RewardWhereInput
  none?: Prisma.RewardWhereInput
}

export type RewardOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type RewardOrderByRelevanceInput = {
  fields: Prisma.RewardOrderByRelevanceFieldEnum | Prisma.RewardOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type RewardCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type RewardAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type RewardMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type RewardMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type RewardSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type RewardCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.RewardCreateWithoutUserInput, Prisma.RewardUncheckedCreateWithoutUserInput> | Prisma.RewardCreateWithoutUserInput[] | Prisma.RewardUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.RewardCreateOrConnectWithoutUserInput | Prisma.RewardCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.RewardCreateManyUserInputEnvelope
  connect?: Prisma.RewardWhereUniqueInput | Prisma.RewardWhereUniqueInput[]
}

export type RewardUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.RewardCreateWithoutUserInput, Prisma.RewardUncheckedCreateWithoutUserInput> | Prisma.RewardCreateWithoutUserInput[] | Prisma.RewardUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.RewardCreateOrConnectWithoutUserInput | Prisma.RewardCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.RewardCreateManyUserInputEnvelope
  connect?: Prisma.RewardWhereUniqueInput | Prisma.RewardWhereUniqueInput[]
}

export type RewardUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.RewardCreateWithoutUserInput, Prisma.RewardUncheckedCreateWithoutUserInput> | Prisma.RewardCreateWithoutUserInput[] | Prisma.RewardUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.RewardCreateOrConnectWithoutUserInput | Prisma.RewardCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.RewardUpsertWithWhereUniqueWithoutUserInput | Prisma.RewardUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.RewardCreateManyUserInputEnvelope
  set?: Prisma.RewardWhereUniqueInput | Prisma.RewardWhereUniqueInput[]
  disconnect?: Prisma.RewardWhereUniqueInput | Prisma.RewardWhereUniqueInput[]
  delete?: Prisma.RewardWhereUniqueInput | Prisma.RewardWhereUniqueInput[]
  connect?: Prisma.RewardWhereUniqueInput | Prisma.RewardWhereUniqueInput[]
  update?: Prisma.RewardUpdateWithWhereUniqueWithoutUserInput | Prisma.RewardUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.RewardUpdateManyWithWhereWithoutUserInput | Prisma.RewardUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.RewardScalarWhereInput | Prisma.RewardScalarWhereInput[]
}

export type RewardUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.RewardCreateWithoutUserInput, Prisma.RewardUncheckedCreateWithoutUserInput> | Prisma.RewardCreateWithoutUserInput[] | Prisma.RewardUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.RewardCreateOrConnectWithoutUserInput | Prisma.RewardCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.RewardUpsertWithWhereUniqueWithoutUserInput | Prisma.RewardUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.RewardCreateManyUserInputEnvelope
  set?: Prisma.RewardWhereUniqueInput | Prisma.RewardWhereUniqueInput[]
  disconnect?: Prisma.RewardWhereUniqueInput | Prisma.RewardWhereUniqueInput[]
  delete?: Prisma.RewardWhereUniqueInput | Prisma.RewardWhereUniqueInput[]
  connect?: Prisma.RewardWhereUniqueInput | Prisma.RewardWhereUniqueInput[]
  update?: Prisma.RewardUpdateWithWhereUniqueWithoutUserInput | Prisma.RewardUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.RewardUpdateManyWithWhereWithoutUserInput | Prisma.RewardUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.RewardScalarWhereInput | Prisma.RewardScalarWhereInput[]
}

export type RewardCreateWithoutUserInput = {
  id?: string
  type: string
  amount?: number
  createdAt?: Date | string
}

export type RewardUncheckedCreateWithoutUserInput = {
  id?: string
  type: string
  amount?: number
  createdAt?: Date | string
}

export type RewardCreateOrConnectWithoutUserInput = {
  where: Prisma.RewardWhereUniqueInput
  create: Prisma.XOR<Prisma.RewardCreateWithoutUserInput, Prisma.RewardUncheckedCreateWithoutUserInput>
}

export type RewardCreateManyUserInputEnvelope = {
  data: Prisma.RewardCreateManyUserInput | Prisma.RewardCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type RewardUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.RewardWhereUniqueInput
  update: Prisma.XOR<Prisma.RewardUpdateWithoutUserInput, Prisma.RewardUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.RewardCreateWithoutUserInput, Prisma.RewardUncheckedCreateWithoutUserInput>
}

export type RewardUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.RewardWhereUniqueInput
  data: Prisma.XOR<Prisma.RewardUpdateWithoutUserInput, Prisma.RewardUncheckedUpdateWithoutUserInput>
}

export type RewardUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.RewardScalarWhereInput
  data: Prisma.XOR<Prisma.RewardUpdateManyMutationInput, Prisma.RewardUncheckedUpdateManyWithoutUserInput>
}

export type RewardScalarWhereInput = {
  AND?: Prisma.RewardScalarWhereInput | Prisma.RewardScalarWhereInput[]
  OR?: Prisma.RewardScalarWhereInput[]
  NOT?: Prisma.RewardScalarWhereInput | Prisma.RewardScalarWhereInput[]
  id?: Prisma.StringFilter<"Reward"> | string
  type?: Prisma.StringFilter<"Reward"> | string
  amount?: Prisma.IntFilter<"Reward"> | number
  userId?: Prisma.StringFilter<"Reward"> | string
  createdAt?: Prisma.DateTimeFilter<"Reward"> | Date | string
}

export type RewardCreateManyUserInput = {
  id?: string
  type: string
  amount?: number
  createdAt?: Date | string
}

export type RewardUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RewardUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RewardUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type RewardSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  amount?: boolean
  userId?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["reward"]>



export type RewardSelectScalar = {
  id?: boolean
  type?: boolean
  amount?: boolean
  userId?: boolean
  createdAt?: boolean
}

export type RewardOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "type" | "amount" | "userId" | "createdAt", ExtArgs["result"]["reward"]>
export type RewardInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $RewardPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Reward"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    type: string
    amount: number
    userId: string
    createdAt: Date
  }, ExtArgs["result"]["reward"]>
  composites: {}
}

export type RewardGetPayload<S extends boolean | null | undefined | RewardDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RewardPayload, S>

export type RewardCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RewardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RewardCountAggregateInputType | true
  }

export interface RewardDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reward'], meta: { name: 'Reward' } }
  /**
   * Find zero or one Reward that matches the filter.
   * @param {RewardFindUniqueArgs} args - Arguments to find a Reward
   * @example
   * // Get one Reward
   * const reward = await prisma.reward.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RewardFindUniqueArgs>(args: Prisma.SelectSubset<T, RewardFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RewardClient<runtime.Types.Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Reward that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RewardFindUniqueOrThrowArgs} args - Arguments to find a Reward
   * @example
   * // Get one Reward
   * const reward = await prisma.reward.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RewardFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RewardFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RewardClient<runtime.Types.Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Reward that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RewardFindFirstArgs} args - Arguments to find a Reward
   * @example
   * // Get one Reward
   * const reward = await prisma.reward.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RewardFindFirstArgs>(args?: Prisma.SelectSubset<T, RewardFindFirstArgs<ExtArgs>>): Prisma.Prisma__RewardClient<runtime.Types.Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Reward that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RewardFindFirstOrThrowArgs} args - Arguments to find a Reward
   * @example
   * // Get one Reward
   * const reward = await prisma.reward.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RewardFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RewardFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RewardClient<runtime.Types.Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Rewards that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RewardFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Rewards
   * const rewards = await prisma.reward.findMany()
   * 
   * // Get first 10 Rewards
   * const rewards = await prisma.reward.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const rewardWithIdOnly = await prisma.reward.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RewardFindManyArgs>(args?: Prisma.SelectSubset<T, RewardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Reward.
   * @param {RewardCreateArgs} args - Arguments to create a Reward.
   * @example
   * // Create one Reward
   * const Reward = await prisma.reward.create({
   *   data: {
   *     // ... data to create a Reward
   *   }
   * })
   * 
   */
  create<T extends RewardCreateArgs>(args: Prisma.SelectSubset<T, RewardCreateArgs<ExtArgs>>): Prisma.Prisma__RewardClient<runtime.Types.Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Rewards.
   * @param {RewardCreateManyArgs} args - Arguments to create many Rewards.
   * @example
   * // Create many Rewards
   * const reward = await prisma.reward.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RewardCreateManyArgs>(args?: Prisma.SelectSubset<T, RewardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Reward.
   * @param {RewardDeleteArgs} args - Arguments to delete one Reward.
   * @example
   * // Delete one Reward
   * const Reward = await prisma.reward.delete({
   *   where: {
   *     // ... filter to delete one Reward
   *   }
   * })
   * 
   */
  delete<T extends RewardDeleteArgs>(args: Prisma.SelectSubset<T, RewardDeleteArgs<ExtArgs>>): Prisma.Prisma__RewardClient<runtime.Types.Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Reward.
   * @param {RewardUpdateArgs} args - Arguments to update one Reward.
   * @example
   * // Update one Reward
   * const reward = await prisma.reward.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RewardUpdateArgs>(args: Prisma.SelectSubset<T, RewardUpdateArgs<ExtArgs>>): Prisma.Prisma__RewardClient<runtime.Types.Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Rewards.
   * @param {RewardDeleteManyArgs} args - Arguments to filter Rewards to delete.
   * @example
   * // Delete a few Rewards
   * const { count } = await prisma.reward.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RewardDeleteManyArgs>(args?: Prisma.SelectSubset<T, RewardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Rewards.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RewardUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Rewards
   * const reward = await prisma.reward.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RewardUpdateManyArgs>(args: Prisma.SelectSubset<T, RewardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Reward.
   * @param {RewardUpsertArgs} args - Arguments to update or create a Reward.
   * @example
   * // Update or create a Reward
   * const reward = await prisma.reward.upsert({
   *   create: {
   *     // ... data to create a Reward
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Reward we want to update
   *   }
   * })
   */
  upsert<T extends RewardUpsertArgs>(args: Prisma.SelectSubset<T, RewardUpsertArgs<ExtArgs>>): Prisma.Prisma__RewardClient<runtime.Types.Result.GetResult<Prisma.$RewardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Rewards.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RewardCountArgs} args - Arguments to filter Rewards to count.
   * @example
   * // Count the number of Rewards
   * const count = await prisma.reward.count({
   *   where: {
   *     // ... the filter for the Rewards we want to count
   *   }
   * })
  **/
  count<T extends RewardCountArgs>(
    args?: Prisma.Subset<T, RewardCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RewardCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Reward.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RewardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RewardAggregateArgs>(args: Prisma.Subset<T, RewardAggregateArgs>): Prisma.PrismaPromise<GetRewardAggregateType<T>>

  /**
   * Group by Reward.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RewardGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RewardGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RewardGroupByArgs['orderBy'] }
      : { orderBy?: RewardGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RewardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRewardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Reward model
 */
readonly fields: RewardFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Reward.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RewardClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Reward model
 */
export interface RewardFieldRefs {
  readonly id: Prisma.FieldRef<"Reward", 'String'>
  readonly type: Prisma.FieldRef<"Reward", 'String'>
  readonly amount: Prisma.FieldRef<"Reward", 'Int'>
  readonly userId: Prisma.FieldRef<"Reward", 'String'>
  readonly createdAt: Prisma.FieldRef<"Reward", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Reward findUnique
 */
export type RewardFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reward
   */
  select?: Prisma.RewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reward
   */
  omit?: Prisma.RewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RewardInclude<ExtArgs> | null
  /**
   * Filter, which Reward to fetch.
   */
  where: Prisma.RewardWhereUniqueInput
}

/**
 * Reward findUniqueOrThrow
 */
export type RewardFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reward
   */
  select?: Prisma.RewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reward
   */
  omit?: Prisma.RewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RewardInclude<ExtArgs> | null
  /**
   * Filter, which Reward to fetch.
   */
  where: Prisma.RewardWhereUniqueInput
}

/**
 * Reward findFirst
 */
export type RewardFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reward
   */
  select?: Prisma.RewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reward
   */
  omit?: Prisma.RewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RewardInclude<ExtArgs> | null
  /**
   * Filter, which Reward to fetch.
   */
  where?: Prisma.RewardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rewards to fetch.
   */
  orderBy?: Prisma.RewardOrderByWithRelationInput | Prisma.RewardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Rewards.
   */
  cursor?: Prisma.RewardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rewards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rewards.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Rewards.
   */
  distinct?: Prisma.RewardScalarFieldEnum | Prisma.RewardScalarFieldEnum[]
}

/**
 * Reward findFirstOrThrow
 */
export type RewardFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reward
   */
  select?: Prisma.RewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reward
   */
  omit?: Prisma.RewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RewardInclude<ExtArgs> | null
  /**
   * Filter, which Reward to fetch.
   */
  where?: Prisma.RewardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rewards to fetch.
   */
  orderBy?: Prisma.RewardOrderByWithRelationInput | Prisma.RewardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Rewards.
   */
  cursor?: Prisma.RewardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rewards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rewards.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Rewards.
   */
  distinct?: Prisma.RewardScalarFieldEnum | Prisma.RewardScalarFieldEnum[]
}

/**
 * Reward findMany
 */
export type RewardFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reward
   */
  select?: Prisma.RewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reward
   */
  omit?: Prisma.RewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RewardInclude<ExtArgs> | null
  /**
   * Filter, which Rewards to fetch.
   */
  where?: Prisma.RewardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rewards to fetch.
   */
  orderBy?: Prisma.RewardOrderByWithRelationInput | Prisma.RewardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Rewards.
   */
  cursor?: Prisma.RewardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rewards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rewards.
   */
  skip?: number
  distinct?: Prisma.RewardScalarFieldEnum | Prisma.RewardScalarFieldEnum[]
}

/**
 * Reward create
 */
export type RewardCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reward
   */
  select?: Prisma.RewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reward
   */
  omit?: Prisma.RewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RewardInclude<ExtArgs> | null
  /**
   * The data needed to create a Reward.
   */
  data: Prisma.XOR<Prisma.RewardCreateInput, Prisma.RewardUncheckedCreateInput>
}

/**
 * Reward createMany
 */
export type RewardCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Rewards.
   */
  data: Prisma.RewardCreateManyInput | Prisma.RewardCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Reward update
 */
export type RewardUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reward
   */
  select?: Prisma.RewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reward
   */
  omit?: Prisma.RewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RewardInclude<ExtArgs> | null
  /**
   * The data needed to update a Reward.
   */
  data: Prisma.XOR<Prisma.RewardUpdateInput, Prisma.RewardUncheckedUpdateInput>
  /**
   * Choose, which Reward to update.
   */
  where: Prisma.RewardWhereUniqueInput
}

/**
 * Reward updateMany
 */
export type RewardUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Rewards.
   */
  data: Prisma.XOR<Prisma.RewardUpdateManyMutationInput, Prisma.RewardUncheckedUpdateManyInput>
  /**
   * Filter which Rewards to update
   */
  where?: Prisma.RewardWhereInput
  /**
   * Limit how many Rewards to update.
   */
  limit?: number
}

/**
 * Reward upsert
 */
export type RewardUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reward
   */
  select?: Prisma.RewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reward
   */
  omit?: Prisma.RewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RewardInclude<ExtArgs> | null
  /**
   * The filter to search for the Reward to update in case it exists.
   */
  where: Prisma.RewardWhereUniqueInput
  /**
   * In case the Reward found by the `where` argument doesn't exist, create a new Reward with this data.
   */
  create: Prisma.XOR<Prisma.RewardCreateInput, Prisma.RewardUncheckedCreateInput>
  /**
   * In case the Reward was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RewardUpdateInput, Prisma.RewardUncheckedUpdateInput>
}

/**
 * Reward delete
 */
export type RewardDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reward
   */
  select?: Prisma.RewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reward
   */
  omit?: Prisma.RewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RewardInclude<ExtArgs> | null
  /**
   * Filter which Reward to delete.
   */
  where: Prisma.RewardWhereUniqueInput
}

/**
 * Reward deleteMany
 */
export type RewardDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Rewards to delete
   */
  where?: Prisma.RewardWhereInput
  /**
   * Limit how many Rewards to delete.
   */
  limit?: number
}

/**
 * Reward without action
 */
export type RewardDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reward
   */
  select?: Prisma.RewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reward
   */
  omit?: Prisma.RewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RewardInclude<ExtArgs> | null
}

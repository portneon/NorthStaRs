
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Question` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Question
 * 
 */
export type QuestionModel = runtime.Types.Result.DefaultSelection<Prisma.$QuestionPayload>

export type AggregateQuestion = {
  _count: QuestionCountAggregateOutputType | null
  _min: QuestionMinAggregateOutputType | null
  _max: QuestionMaxAggregateOutputType | null
}

export type QuestionMinAggregateOutputType = {
  id: string | null
  text: string | null
  quizId: string | null
  correctOptionId: string | null
  explanation: string | null
}

export type QuestionMaxAggregateOutputType = {
  id: string | null
  text: string | null
  quizId: string | null
  correctOptionId: string | null
  explanation: string | null
}

export type QuestionCountAggregateOutputType = {
  id: number
  text: number
  quizId: number
  correctOptionId: number
  explanation: number
  _all: number
}


export type QuestionMinAggregateInputType = {
  id?: true
  text?: true
  quizId?: true
  correctOptionId?: true
  explanation?: true
}

export type QuestionMaxAggregateInputType = {
  id?: true
  text?: true
  quizId?: true
  correctOptionId?: true
  explanation?: true
}

export type QuestionCountAggregateInputType = {
  id?: true
  text?: true
  quizId?: true
  correctOptionId?: true
  explanation?: true
  _all?: true
}

export type QuestionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Question to aggregate.
   */
  where?: Prisma.QuestionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Questions to fetch.
   */
  orderBy?: Prisma.QuestionOrderByWithRelationInput | Prisma.QuestionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.QuestionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Questions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Questions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Questions
  **/
  _count?: true | QuestionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: QuestionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: QuestionMaxAggregateInputType
}

export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
      [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateQuestion[P]>
    : Prisma.GetScalarType<T[P], AggregateQuestion[P]>
}




export type QuestionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.QuestionWhereInput
  orderBy?: Prisma.QuestionOrderByWithAggregationInput | Prisma.QuestionOrderByWithAggregationInput[]
  by: Prisma.QuestionScalarFieldEnum[] | Prisma.QuestionScalarFieldEnum
  having?: Prisma.QuestionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: QuestionCountAggregateInputType | true
  _min?: QuestionMinAggregateInputType
  _max?: QuestionMaxAggregateInputType
}

export type QuestionGroupByOutputType = {
  id: string
  text: string
  quizId: string
  correctOptionId: string
  explanation: string | null
  _count: QuestionCountAggregateOutputType | null
  _min: QuestionMinAggregateOutputType | null
  _max: QuestionMaxAggregateOutputType | null
}

type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<QuestionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], QuestionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], QuestionGroupByOutputType[P]>
      }
    >
  >



export type QuestionWhereInput = {
  AND?: Prisma.QuestionWhereInput | Prisma.QuestionWhereInput[]
  OR?: Prisma.QuestionWhereInput[]
  NOT?: Prisma.QuestionWhereInput | Prisma.QuestionWhereInput[]
  id?: Prisma.StringFilter<"Question"> | string
  text?: Prisma.StringFilter<"Question"> | string
  quizId?: Prisma.StringFilter<"Question"> | string
  correctOptionId?: Prisma.StringFilter<"Question"> | string
  explanation?: Prisma.StringNullableFilter<"Question"> | string | null
  quiz?: Prisma.XOR<Prisma.QuizScalarRelationFilter, Prisma.QuizWhereInput>
  options?: Prisma.OptionListRelationFilter
  userAnswers?: Prisma.UserAnswerListRelationFilter
}

export type QuestionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  correctOptionId?: Prisma.SortOrder
  explanation?: Prisma.SortOrderInput | Prisma.SortOrder
  quiz?: Prisma.QuizOrderByWithRelationInput
  options?: Prisma.OptionOrderByRelationAggregateInput
  userAnswers?: Prisma.UserAnswerOrderByRelationAggregateInput
  _relevance?: Prisma.QuestionOrderByRelevanceInput
}

export type QuestionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.QuestionWhereInput | Prisma.QuestionWhereInput[]
  OR?: Prisma.QuestionWhereInput[]
  NOT?: Prisma.QuestionWhereInput | Prisma.QuestionWhereInput[]
  text?: Prisma.StringFilter<"Question"> | string
  quizId?: Prisma.StringFilter<"Question"> | string
  correctOptionId?: Prisma.StringFilter<"Question"> | string
  explanation?: Prisma.StringNullableFilter<"Question"> | string | null
  quiz?: Prisma.XOR<Prisma.QuizScalarRelationFilter, Prisma.QuizWhereInput>
  options?: Prisma.OptionListRelationFilter
  userAnswers?: Prisma.UserAnswerListRelationFilter
}, "id">

export type QuestionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  correctOptionId?: Prisma.SortOrder
  explanation?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.QuestionCountOrderByAggregateInput
  _max?: Prisma.QuestionMaxOrderByAggregateInput
  _min?: Prisma.QuestionMinOrderByAggregateInput
}

export type QuestionScalarWhereWithAggregatesInput = {
  AND?: Prisma.QuestionScalarWhereWithAggregatesInput | Prisma.QuestionScalarWhereWithAggregatesInput[]
  OR?: Prisma.QuestionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.QuestionScalarWhereWithAggregatesInput | Prisma.QuestionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Question"> | string
  text?: Prisma.StringWithAggregatesFilter<"Question"> | string
  quizId?: Prisma.StringWithAggregatesFilter<"Question"> | string
  correctOptionId?: Prisma.StringWithAggregatesFilter<"Question"> | string
  explanation?: Prisma.StringNullableWithAggregatesFilter<"Question"> | string | null
}

export type QuestionCreateInput = {
  id?: string
  text: string
  correctOptionId: string
  explanation?: string | null
  quiz: Prisma.QuizCreateNestedOneWithoutQuestionsInput
  options?: Prisma.OptionCreateNestedManyWithoutQuestionInput
  userAnswers?: Prisma.UserAnswerCreateNestedManyWithoutQuestionInput
}

export type QuestionUncheckedCreateInput = {
  id?: string
  text: string
  quizId: string
  correctOptionId: string
  explanation?: string | null
  options?: Prisma.OptionUncheckedCreateNestedManyWithoutQuestionInput
  userAnswers?: Prisma.UserAnswerUncheckedCreateNestedManyWithoutQuestionInput
}

export type QuestionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  correctOptionId?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  quiz?: Prisma.QuizUpdateOneRequiredWithoutQuestionsNestedInput
  options?: Prisma.OptionUpdateManyWithoutQuestionNestedInput
  userAnswers?: Prisma.UserAnswerUpdateManyWithoutQuestionNestedInput
}

export type QuestionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  quizId?: Prisma.StringFieldUpdateOperationsInput | string
  correctOptionId?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  options?: Prisma.OptionUncheckedUpdateManyWithoutQuestionNestedInput
  userAnswers?: Prisma.UserAnswerUncheckedUpdateManyWithoutQuestionNestedInput
}

export type QuestionCreateManyInput = {
  id?: string
  text: string
  quizId: string
  correctOptionId: string
  explanation?: string | null
}

export type QuestionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  correctOptionId?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type QuestionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  quizId?: Prisma.StringFieldUpdateOperationsInput | string
  correctOptionId?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type QuestionListRelationFilter = {
  every?: Prisma.QuestionWhereInput
  some?: Prisma.QuestionWhereInput
  none?: Prisma.QuestionWhereInput
}

export type QuestionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type QuestionOrderByRelevanceInput = {
  fields: Prisma.QuestionOrderByRelevanceFieldEnum | Prisma.QuestionOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type QuestionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  correctOptionId?: Prisma.SortOrder
  explanation?: Prisma.SortOrder
}

export type QuestionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  correctOptionId?: Prisma.SortOrder
  explanation?: Prisma.SortOrder
}

export type QuestionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  correctOptionId?: Prisma.SortOrder
  explanation?: Prisma.SortOrder
}

export type QuestionScalarRelationFilter = {
  is?: Prisma.QuestionWhereInput
  isNot?: Prisma.QuestionWhereInput
}

export type QuestionCreateNestedManyWithoutQuizInput = {
  create?: Prisma.XOR<Prisma.QuestionCreateWithoutQuizInput, Prisma.QuestionUncheckedCreateWithoutQuizInput> | Prisma.QuestionCreateWithoutQuizInput[] | Prisma.QuestionUncheckedCreateWithoutQuizInput[]
  connectOrCreate?: Prisma.QuestionCreateOrConnectWithoutQuizInput | Prisma.QuestionCreateOrConnectWithoutQuizInput[]
  createMany?: Prisma.QuestionCreateManyQuizInputEnvelope
  connect?: Prisma.QuestionWhereUniqueInput | Prisma.QuestionWhereUniqueInput[]
}

export type QuestionUncheckedCreateNestedManyWithoutQuizInput = {
  create?: Prisma.XOR<Prisma.QuestionCreateWithoutQuizInput, Prisma.QuestionUncheckedCreateWithoutQuizInput> | Prisma.QuestionCreateWithoutQuizInput[] | Prisma.QuestionUncheckedCreateWithoutQuizInput[]
  connectOrCreate?: Prisma.QuestionCreateOrConnectWithoutQuizInput | Prisma.QuestionCreateOrConnectWithoutQuizInput[]
  createMany?: Prisma.QuestionCreateManyQuizInputEnvelope
  connect?: Prisma.QuestionWhereUniqueInput | Prisma.QuestionWhereUniqueInput[]
}

export type QuestionUpdateManyWithoutQuizNestedInput = {
  create?: Prisma.XOR<Prisma.QuestionCreateWithoutQuizInput, Prisma.QuestionUncheckedCreateWithoutQuizInput> | Prisma.QuestionCreateWithoutQuizInput[] | Prisma.QuestionUncheckedCreateWithoutQuizInput[]
  connectOrCreate?: Prisma.QuestionCreateOrConnectWithoutQuizInput | Prisma.QuestionCreateOrConnectWithoutQuizInput[]
  upsert?: Prisma.QuestionUpsertWithWhereUniqueWithoutQuizInput | Prisma.QuestionUpsertWithWhereUniqueWithoutQuizInput[]
  createMany?: Prisma.QuestionCreateManyQuizInputEnvelope
  set?: Prisma.QuestionWhereUniqueInput | Prisma.QuestionWhereUniqueInput[]
  disconnect?: Prisma.QuestionWhereUniqueInput | Prisma.QuestionWhereUniqueInput[]
  delete?: Prisma.QuestionWhereUniqueInput | Prisma.QuestionWhereUniqueInput[]
  connect?: Prisma.QuestionWhereUniqueInput | Prisma.QuestionWhereUniqueInput[]
  update?: Prisma.QuestionUpdateWithWhereUniqueWithoutQuizInput | Prisma.QuestionUpdateWithWhereUniqueWithoutQuizInput[]
  updateMany?: Prisma.QuestionUpdateManyWithWhereWithoutQuizInput | Prisma.QuestionUpdateManyWithWhereWithoutQuizInput[]
  deleteMany?: Prisma.QuestionScalarWhereInput | Prisma.QuestionScalarWhereInput[]
}

export type QuestionUncheckedUpdateManyWithoutQuizNestedInput = {
  create?: Prisma.XOR<Prisma.QuestionCreateWithoutQuizInput, Prisma.QuestionUncheckedCreateWithoutQuizInput> | Prisma.QuestionCreateWithoutQuizInput[] | Prisma.QuestionUncheckedCreateWithoutQuizInput[]
  connectOrCreate?: Prisma.QuestionCreateOrConnectWithoutQuizInput | Prisma.QuestionCreateOrConnectWithoutQuizInput[]
  upsert?: Prisma.QuestionUpsertWithWhereUniqueWithoutQuizInput | Prisma.QuestionUpsertWithWhereUniqueWithoutQuizInput[]
  createMany?: Prisma.QuestionCreateManyQuizInputEnvelope
  set?: Prisma.QuestionWhereUniqueInput | Prisma.QuestionWhereUniqueInput[]
  disconnect?: Prisma.QuestionWhereUniqueInput | Prisma.QuestionWhereUniqueInput[]
  delete?: Prisma.QuestionWhereUniqueInput | Prisma.QuestionWhereUniqueInput[]
  connect?: Prisma.QuestionWhereUniqueInput | Prisma.QuestionWhereUniqueInput[]
  update?: Prisma.QuestionUpdateWithWhereUniqueWithoutQuizInput | Prisma.QuestionUpdateWithWhereUniqueWithoutQuizInput[]
  updateMany?: Prisma.QuestionUpdateManyWithWhereWithoutQuizInput | Prisma.QuestionUpdateManyWithWhereWithoutQuizInput[]
  deleteMany?: Prisma.QuestionScalarWhereInput | Prisma.QuestionScalarWhereInput[]
}

export type QuestionCreateNestedOneWithoutOptionsInput = {
  create?: Prisma.XOR<Prisma.QuestionCreateWithoutOptionsInput, Prisma.QuestionUncheckedCreateWithoutOptionsInput>
  connectOrCreate?: Prisma.QuestionCreateOrConnectWithoutOptionsInput
  connect?: Prisma.QuestionWhereUniqueInput
}

export type QuestionUpdateOneRequiredWithoutOptionsNestedInput = {
  create?: Prisma.XOR<Prisma.QuestionCreateWithoutOptionsInput, Prisma.QuestionUncheckedCreateWithoutOptionsInput>
  connectOrCreate?: Prisma.QuestionCreateOrConnectWithoutOptionsInput
  upsert?: Prisma.QuestionUpsertWithoutOptionsInput
  connect?: Prisma.QuestionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.QuestionUpdateToOneWithWhereWithoutOptionsInput, Prisma.QuestionUpdateWithoutOptionsInput>, Prisma.QuestionUncheckedUpdateWithoutOptionsInput>
}

export type QuestionCreateNestedOneWithoutUserAnswersInput = {
  create?: Prisma.XOR<Prisma.QuestionCreateWithoutUserAnswersInput, Prisma.QuestionUncheckedCreateWithoutUserAnswersInput>
  connectOrCreate?: Prisma.QuestionCreateOrConnectWithoutUserAnswersInput
  connect?: Prisma.QuestionWhereUniqueInput
}

export type QuestionUpdateOneRequiredWithoutUserAnswersNestedInput = {
  create?: Prisma.XOR<Prisma.QuestionCreateWithoutUserAnswersInput, Prisma.QuestionUncheckedCreateWithoutUserAnswersInput>
  connectOrCreate?: Prisma.QuestionCreateOrConnectWithoutUserAnswersInput
  upsert?: Prisma.QuestionUpsertWithoutUserAnswersInput
  connect?: Prisma.QuestionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.QuestionUpdateToOneWithWhereWithoutUserAnswersInput, Prisma.QuestionUpdateWithoutUserAnswersInput>, Prisma.QuestionUncheckedUpdateWithoutUserAnswersInput>
}

export type QuestionCreateWithoutQuizInput = {
  id?: string
  text: string
  correctOptionId: string
  explanation?: string | null
  options?: Prisma.OptionCreateNestedManyWithoutQuestionInput
  userAnswers?: Prisma.UserAnswerCreateNestedManyWithoutQuestionInput
}

export type QuestionUncheckedCreateWithoutQuizInput = {
  id?: string
  text: string
  correctOptionId: string
  explanation?: string | null
  options?: Prisma.OptionUncheckedCreateNestedManyWithoutQuestionInput
  userAnswers?: Prisma.UserAnswerUncheckedCreateNestedManyWithoutQuestionInput
}

export type QuestionCreateOrConnectWithoutQuizInput = {
  where: Prisma.QuestionWhereUniqueInput
  create: Prisma.XOR<Prisma.QuestionCreateWithoutQuizInput, Prisma.QuestionUncheckedCreateWithoutQuizInput>
}

export type QuestionCreateManyQuizInputEnvelope = {
  data: Prisma.QuestionCreateManyQuizInput | Prisma.QuestionCreateManyQuizInput[]
  skipDuplicates?: boolean
}

export type QuestionUpsertWithWhereUniqueWithoutQuizInput = {
  where: Prisma.QuestionWhereUniqueInput
  update: Prisma.XOR<Prisma.QuestionUpdateWithoutQuizInput, Prisma.QuestionUncheckedUpdateWithoutQuizInput>
  create: Prisma.XOR<Prisma.QuestionCreateWithoutQuizInput, Prisma.QuestionUncheckedCreateWithoutQuizInput>
}

export type QuestionUpdateWithWhereUniqueWithoutQuizInput = {
  where: Prisma.QuestionWhereUniqueInput
  data: Prisma.XOR<Prisma.QuestionUpdateWithoutQuizInput, Prisma.QuestionUncheckedUpdateWithoutQuizInput>
}

export type QuestionUpdateManyWithWhereWithoutQuizInput = {
  where: Prisma.QuestionScalarWhereInput
  data: Prisma.XOR<Prisma.QuestionUpdateManyMutationInput, Prisma.QuestionUncheckedUpdateManyWithoutQuizInput>
}

export type QuestionScalarWhereInput = {
  AND?: Prisma.QuestionScalarWhereInput | Prisma.QuestionScalarWhereInput[]
  OR?: Prisma.QuestionScalarWhereInput[]
  NOT?: Prisma.QuestionScalarWhereInput | Prisma.QuestionScalarWhereInput[]
  id?: Prisma.StringFilter<"Question"> | string
  text?: Prisma.StringFilter<"Question"> | string
  quizId?: Prisma.StringFilter<"Question"> | string
  correctOptionId?: Prisma.StringFilter<"Question"> | string
  explanation?: Prisma.StringNullableFilter<"Question"> | string | null
}

export type QuestionCreateWithoutOptionsInput = {
  id?: string
  text: string
  correctOptionId: string
  explanation?: string | null
  quiz: Prisma.QuizCreateNestedOneWithoutQuestionsInput
  userAnswers?: Prisma.UserAnswerCreateNestedManyWithoutQuestionInput
}

export type QuestionUncheckedCreateWithoutOptionsInput = {
  id?: string
  text: string
  quizId: string
  correctOptionId: string
  explanation?: string | null
  userAnswers?: Prisma.UserAnswerUncheckedCreateNestedManyWithoutQuestionInput
}

export type QuestionCreateOrConnectWithoutOptionsInput = {
  where: Prisma.QuestionWhereUniqueInput
  create: Prisma.XOR<Prisma.QuestionCreateWithoutOptionsInput, Prisma.QuestionUncheckedCreateWithoutOptionsInput>
}

export type QuestionUpsertWithoutOptionsInput = {
  update: Prisma.XOR<Prisma.QuestionUpdateWithoutOptionsInput, Prisma.QuestionUncheckedUpdateWithoutOptionsInput>
  create: Prisma.XOR<Prisma.QuestionCreateWithoutOptionsInput, Prisma.QuestionUncheckedCreateWithoutOptionsInput>
  where?: Prisma.QuestionWhereInput
}

export type QuestionUpdateToOneWithWhereWithoutOptionsInput = {
  where?: Prisma.QuestionWhereInput
  data: Prisma.XOR<Prisma.QuestionUpdateWithoutOptionsInput, Prisma.QuestionUncheckedUpdateWithoutOptionsInput>
}

export type QuestionUpdateWithoutOptionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  correctOptionId?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  quiz?: Prisma.QuizUpdateOneRequiredWithoutQuestionsNestedInput
  userAnswers?: Prisma.UserAnswerUpdateManyWithoutQuestionNestedInput
}

export type QuestionUncheckedUpdateWithoutOptionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  quizId?: Prisma.StringFieldUpdateOperationsInput | string
  correctOptionId?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAnswers?: Prisma.UserAnswerUncheckedUpdateManyWithoutQuestionNestedInput
}

export type QuestionCreateWithoutUserAnswersInput = {
  id?: string
  text: string
  correctOptionId: string
  explanation?: string | null
  quiz: Prisma.QuizCreateNestedOneWithoutQuestionsInput
  options?: Prisma.OptionCreateNestedManyWithoutQuestionInput
}

export type QuestionUncheckedCreateWithoutUserAnswersInput = {
  id?: string
  text: string
  quizId: string
  correctOptionId: string
  explanation?: string | null
  options?: Prisma.OptionUncheckedCreateNestedManyWithoutQuestionInput
}

export type QuestionCreateOrConnectWithoutUserAnswersInput = {
  where: Prisma.QuestionWhereUniqueInput
  create: Prisma.XOR<Prisma.QuestionCreateWithoutUserAnswersInput, Prisma.QuestionUncheckedCreateWithoutUserAnswersInput>
}

export type QuestionUpsertWithoutUserAnswersInput = {
  update: Prisma.XOR<Prisma.QuestionUpdateWithoutUserAnswersInput, Prisma.QuestionUncheckedUpdateWithoutUserAnswersInput>
  create: Prisma.XOR<Prisma.QuestionCreateWithoutUserAnswersInput, Prisma.QuestionUncheckedCreateWithoutUserAnswersInput>
  where?: Prisma.QuestionWhereInput
}

export type QuestionUpdateToOneWithWhereWithoutUserAnswersInput = {
  where?: Prisma.QuestionWhereInput
  data: Prisma.XOR<Prisma.QuestionUpdateWithoutUserAnswersInput, Prisma.QuestionUncheckedUpdateWithoutUserAnswersInput>
}

export type QuestionUpdateWithoutUserAnswersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  correctOptionId?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  quiz?: Prisma.QuizUpdateOneRequiredWithoutQuestionsNestedInput
  options?: Prisma.OptionUpdateManyWithoutQuestionNestedInput
}

export type QuestionUncheckedUpdateWithoutUserAnswersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  quizId?: Prisma.StringFieldUpdateOperationsInput | string
  correctOptionId?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  options?: Prisma.OptionUncheckedUpdateManyWithoutQuestionNestedInput
}

export type QuestionCreateManyQuizInput = {
  id?: string
  text: string
  correctOptionId: string
  explanation?: string | null
}

export type QuestionUpdateWithoutQuizInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  correctOptionId?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  options?: Prisma.OptionUpdateManyWithoutQuestionNestedInput
  userAnswers?: Prisma.UserAnswerUpdateManyWithoutQuestionNestedInput
}

export type QuestionUncheckedUpdateWithoutQuizInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  correctOptionId?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  options?: Prisma.OptionUncheckedUpdateManyWithoutQuestionNestedInput
  userAnswers?: Prisma.UserAnswerUncheckedUpdateManyWithoutQuestionNestedInput
}

export type QuestionUncheckedUpdateManyWithoutQuizInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  correctOptionId?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type QuestionCountOutputType
 */

export type QuestionCountOutputType = {
  options: number
  userAnswers: number
}

export type QuestionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  options?: boolean | QuestionCountOutputTypeCountOptionsArgs
  userAnswers?: boolean | QuestionCountOutputTypeCountUserAnswersArgs
}

/**
 * QuestionCountOutputType without action
 */
export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuestionCountOutputType
   */
  select?: Prisma.QuestionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * QuestionCountOutputType without action
 */
export type QuestionCountOutputTypeCountOptionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OptionWhereInput
}

/**
 * QuestionCountOutputType without action
 */
export type QuestionCountOutputTypeCountUserAnswersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserAnswerWhereInput
}


export type QuestionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
  quizId?: boolean
  correctOptionId?: boolean
  explanation?: boolean
  quiz?: boolean | Prisma.QuizDefaultArgs<ExtArgs>
  options?: boolean | Prisma.Question$optionsArgs<ExtArgs>
  userAnswers?: boolean | Prisma.Question$userAnswersArgs<ExtArgs>
  _count?: boolean | Prisma.QuestionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["question"]>



export type QuestionSelectScalar = {
  id?: boolean
  text?: boolean
  quizId?: boolean
  correctOptionId?: boolean
  explanation?: boolean
}

export type QuestionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "text" | "quizId" | "correctOptionId" | "explanation", ExtArgs["result"]["question"]>
export type QuestionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  quiz?: boolean | Prisma.QuizDefaultArgs<ExtArgs>
  options?: boolean | Prisma.Question$optionsArgs<ExtArgs>
  userAnswers?: boolean | Prisma.Question$userAnswersArgs<ExtArgs>
  _count?: boolean | Prisma.QuestionCountOutputTypeDefaultArgs<ExtArgs>
}

export type $QuestionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Question"
  objects: {
    quiz: Prisma.$QuizPayload<ExtArgs>
    options: Prisma.$OptionPayload<ExtArgs>[]
    userAnswers: Prisma.$UserAnswerPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    text: string
    quizId: string
    correctOptionId: string
    explanation: string | null
  }, ExtArgs["result"]["question"]>
  composites: {}
}

export type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$QuestionPayload, S>

export type QuestionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: QuestionCountAggregateInputType | true
  }

export interface QuestionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
  /**
   * Find zero or one Question that matches the filter.
   * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
   * @example
   * // Get one Question
   * const question = await prisma.question.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends QuestionFindUniqueArgs>(args: Prisma.SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__QuestionClient<runtime.Types.Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Question that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
   * @example
   * // Get one Question
   * const question = await prisma.question.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__QuestionClient<runtime.Types.Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Question that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionFindFirstArgs} args - Arguments to find a Question
   * @example
   * // Get one Question
   * const question = await prisma.question.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends QuestionFindFirstArgs>(args?: Prisma.SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma.Prisma__QuestionClient<runtime.Types.Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Question that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
   * @example
   * // Get one Question
   * const question = await prisma.question.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__QuestionClient<runtime.Types.Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Questions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Questions
   * const questions = await prisma.question.findMany()
   * 
   * // Get first 10 Questions
   * const questions = await prisma.question.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends QuestionFindManyArgs>(args?: Prisma.SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Question.
   * @param {QuestionCreateArgs} args - Arguments to create a Question.
   * @example
   * // Create one Question
   * const Question = await prisma.question.create({
   *   data: {
   *     // ... data to create a Question
   *   }
   * })
   * 
   */
  create<T extends QuestionCreateArgs>(args: Prisma.SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma.Prisma__QuestionClient<runtime.Types.Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Questions.
   * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
   * @example
   * // Create many Questions
   * const question = await prisma.question.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends QuestionCreateManyArgs>(args?: Prisma.SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Question.
   * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
   * @example
   * // Delete one Question
   * const Question = await prisma.question.delete({
   *   where: {
   *     // ... filter to delete one Question
   *   }
   * })
   * 
   */
  delete<T extends QuestionDeleteArgs>(args: Prisma.SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma.Prisma__QuestionClient<runtime.Types.Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Question.
   * @param {QuestionUpdateArgs} args - Arguments to update one Question.
   * @example
   * // Update one Question
   * const question = await prisma.question.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends QuestionUpdateArgs>(args: Prisma.SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma.Prisma__QuestionClient<runtime.Types.Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Questions.
   * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
   * @example
   * // Delete a few Questions
   * const { count } = await prisma.question.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends QuestionDeleteManyArgs>(args?: Prisma.SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Questions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Questions
   * const question = await prisma.question.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends QuestionUpdateManyArgs>(args: Prisma.SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Question.
   * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
   * @example
   * // Update or create a Question
   * const question = await prisma.question.upsert({
   *   create: {
   *     // ... data to create a Question
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Question we want to update
   *   }
   * })
   */
  upsert<T extends QuestionUpsertArgs>(args: Prisma.SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma.Prisma__QuestionClient<runtime.Types.Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Questions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
   * @example
   * // Count the number of Questions
   * const count = await prisma.question.count({
   *   where: {
   *     // ... the filter for the Questions we want to count
   *   }
   * })
  **/
  count<T extends QuestionCountArgs>(
    args?: Prisma.Subset<T, QuestionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], QuestionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Question.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends QuestionAggregateArgs>(args: Prisma.Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

  /**
   * Group by Question.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends QuestionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: QuestionGroupByArgs['orderBy'] }
      : { orderBy?: QuestionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Question model
 */
readonly fields: QuestionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Question.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  quiz<T extends Prisma.QuizDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.QuizDefaultArgs<ExtArgs>>): Prisma.Prisma__QuizClient<runtime.Types.Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  options<T extends Prisma.Question$optionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Question$optionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  userAnswers<T extends Prisma.Question$userAnswersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Question$userAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Question model
 */
export interface QuestionFieldRefs {
  readonly id: Prisma.FieldRef<"Question", 'String'>
  readonly text: Prisma.FieldRef<"Question", 'String'>
  readonly quizId: Prisma.FieldRef<"Question", 'String'>
  readonly correctOptionId: Prisma.FieldRef<"Question", 'String'>
  readonly explanation: Prisma.FieldRef<"Question", 'String'>
}
    

// Custom InputTypes
/**
 * Question findUnique
 */
export type QuestionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Question
   */
  select?: Prisma.QuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Question
   */
  omit?: Prisma.QuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionInclude<ExtArgs> | null
  /**
   * Filter, which Question to fetch.
   */
  where: Prisma.QuestionWhereUniqueInput
}

/**
 * Question findUniqueOrThrow
 */
export type QuestionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Question
   */
  select?: Prisma.QuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Question
   */
  omit?: Prisma.QuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionInclude<ExtArgs> | null
  /**
   * Filter, which Question to fetch.
   */
  where: Prisma.QuestionWhereUniqueInput
}

/**
 * Question findFirst
 */
export type QuestionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Question
   */
  select?: Prisma.QuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Question
   */
  omit?: Prisma.QuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionInclude<ExtArgs> | null
  /**
   * Filter, which Question to fetch.
   */
  where?: Prisma.QuestionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Questions to fetch.
   */
  orderBy?: Prisma.QuestionOrderByWithRelationInput | Prisma.QuestionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Questions.
   */
  cursor?: Prisma.QuestionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Questions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Questions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Questions.
   */
  distinct?: Prisma.QuestionScalarFieldEnum | Prisma.QuestionScalarFieldEnum[]
}

/**
 * Question findFirstOrThrow
 */
export type QuestionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Question
   */
  select?: Prisma.QuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Question
   */
  omit?: Prisma.QuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionInclude<ExtArgs> | null
  /**
   * Filter, which Question to fetch.
   */
  where?: Prisma.QuestionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Questions to fetch.
   */
  orderBy?: Prisma.QuestionOrderByWithRelationInput | Prisma.QuestionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Questions.
   */
  cursor?: Prisma.QuestionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Questions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Questions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Questions.
   */
  distinct?: Prisma.QuestionScalarFieldEnum | Prisma.QuestionScalarFieldEnum[]
}

/**
 * Question findMany
 */
export type QuestionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Question
   */
  select?: Prisma.QuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Question
   */
  omit?: Prisma.QuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionInclude<ExtArgs> | null
  /**
   * Filter, which Questions to fetch.
   */
  where?: Prisma.QuestionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Questions to fetch.
   */
  orderBy?: Prisma.QuestionOrderByWithRelationInput | Prisma.QuestionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Questions.
   */
  cursor?: Prisma.QuestionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Questions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Questions.
   */
  skip?: number
  distinct?: Prisma.QuestionScalarFieldEnum | Prisma.QuestionScalarFieldEnum[]
}

/**
 * Question create
 */
export type QuestionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Question
   */
  select?: Prisma.QuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Question
   */
  omit?: Prisma.QuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionInclude<ExtArgs> | null
  /**
   * The data needed to create a Question.
   */
  data: Prisma.XOR<Prisma.QuestionCreateInput, Prisma.QuestionUncheckedCreateInput>
}

/**
 * Question createMany
 */
export type QuestionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Questions.
   */
  data: Prisma.QuestionCreateManyInput | Prisma.QuestionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Question update
 */
export type QuestionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Question
   */
  select?: Prisma.QuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Question
   */
  omit?: Prisma.QuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionInclude<ExtArgs> | null
  /**
   * The data needed to update a Question.
   */
  data: Prisma.XOR<Prisma.QuestionUpdateInput, Prisma.QuestionUncheckedUpdateInput>
  /**
   * Choose, which Question to update.
   */
  where: Prisma.QuestionWhereUniqueInput
}

/**
 * Question updateMany
 */
export type QuestionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Questions.
   */
  data: Prisma.XOR<Prisma.QuestionUpdateManyMutationInput, Prisma.QuestionUncheckedUpdateManyInput>
  /**
   * Filter which Questions to update
   */
  where?: Prisma.QuestionWhereInput
  /**
   * Limit how many Questions to update.
   */
  limit?: number
}

/**
 * Question upsert
 */
export type QuestionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Question
   */
  select?: Prisma.QuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Question
   */
  omit?: Prisma.QuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionInclude<ExtArgs> | null
  /**
   * The filter to search for the Question to update in case it exists.
   */
  where: Prisma.QuestionWhereUniqueInput
  /**
   * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
   */
  create: Prisma.XOR<Prisma.QuestionCreateInput, Prisma.QuestionUncheckedCreateInput>
  /**
   * In case the Question was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.QuestionUpdateInput, Prisma.QuestionUncheckedUpdateInput>
}

/**
 * Question delete
 */
export type QuestionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Question
   */
  select?: Prisma.QuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Question
   */
  omit?: Prisma.QuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionInclude<ExtArgs> | null
  /**
   * Filter which Question to delete.
   */
  where: Prisma.QuestionWhereUniqueInput
}

/**
 * Question deleteMany
 */
export type QuestionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Questions to delete
   */
  where?: Prisma.QuestionWhereInput
  /**
   * Limit how many Questions to delete.
   */
  limit?: number
}

/**
 * Question.options
 */
export type Question$optionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Option
   */
  select?: Prisma.OptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Option
   */
  omit?: Prisma.OptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OptionInclude<ExtArgs> | null
  where?: Prisma.OptionWhereInput
  orderBy?: Prisma.OptionOrderByWithRelationInput | Prisma.OptionOrderByWithRelationInput[]
  cursor?: Prisma.OptionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OptionScalarFieldEnum | Prisma.OptionScalarFieldEnum[]
}

/**
 * Question.userAnswers
 */
export type Question$userAnswersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserAnswer
   */
  select?: Prisma.UserAnswerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserAnswer
   */
  omit?: Prisma.UserAnswerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserAnswerInclude<ExtArgs> | null
  where?: Prisma.UserAnswerWhereInput
  orderBy?: Prisma.UserAnswerOrderByWithRelationInput | Prisma.UserAnswerOrderByWithRelationInput[]
  cursor?: Prisma.UserAnswerWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserAnswerScalarFieldEnum | Prisma.UserAnswerScalarFieldEnum[]
}

/**
 * Question without action
 */
export type QuestionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Question
   */
  select?: Prisma.QuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Question
   */
  omit?: Prisma.QuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionInclude<ExtArgs> | null
}

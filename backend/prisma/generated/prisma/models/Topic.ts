
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Topic` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Topic
 * 
 */
export type TopicModel = runtime.Types.Result.DefaultSelection<Prisma.$TopicPayload>

export type AggregateTopic = {
  _count: TopicCountAggregateOutputType | null
  _min: TopicMinAggregateOutputType | null
  _max: TopicMaxAggregateOutputType | null
}

export type TopicMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  courseId: string | null
}

export type TopicMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  courseId: string | null
}

export type TopicCountAggregateOutputType = {
  id: number
  name: number
  description: number
  courseId: number
  _all: number
}


export type TopicMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  courseId?: true
}

export type TopicMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  courseId?: true
}

export type TopicCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  courseId?: true
  _all?: true
}

export type TopicAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Topic to aggregate.
   */
  where?: Prisma.TopicWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Topics to fetch.
   */
  orderBy?: Prisma.TopicOrderByWithRelationInput | Prisma.TopicOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TopicWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Topics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Topics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Topics
  **/
  _count?: true | TopicCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TopicMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TopicMaxAggregateInputType
}

export type GetTopicAggregateType<T extends TopicAggregateArgs> = {
      [P in keyof T & keyof AggregateTopic]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTopic[P]>
    : Prisma.GetScalarType<T[P], AggregateTopic[P]>
}




export type TopicGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TopicWhereInput
  orderBy?: Prisma.TopicOrderByWithAggregationInput | Prisma.TopicOrderByWithAggregationInput[]
  by: Prisma.TopicScalarFieldEnum[] | Prisma.TopicScalarFieldEnum
  having?: Prisma.TopicScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TopicCountAggregateInputType | true
  _min?: TopicMinAggregateInputType
  _max?: TopicMaxAggregateInputType
}

export type TopicGroupByOutputType = {
  id: string
  name: string
  description: string | null
  courseId: string | null
  _count: TopicCountAggregateOutputType | null
  _min: TopicMinAggregateOutputType | null
  _max: TopicMaxAggregateOutputType | null
}

type GetTopicGroupByPayload<T extends TopicGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TopicGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TopicGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TopicGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TopicGroupByOutputType[P]>
      }
    >
  >



export type TopicWhereInput = {
  AND?: Prisma.TopicWhereInput | Prisma.TopicWhereInput[]
  OR?: Prisma.TopicWhereInput[]
  NOT?: Prisma.TopicWhereInput | Prisma.TopicWhereInput[]
  id?: Prisma.StringFilter<"Topic"> | string
  name?: Prisma.StringFilter<"Topic"> | string
  description?: Prisma.StringNullableFilter<"Topic"> | string | null
  courseId?: Prisma.StringNullableFilter<"Topic"> | string | null
  course?: Prisma.XOR<Prisma.CourseNullableScalarRelationFilter, Prisma.CourseWhereInput> | null
  quizzes?: Prisma.QuizListRelationFilter
}

export type TopicOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  courseId?: Prisma.SortOrderInput | Prisma.SortOrder
  course?: Prisma.CourseOrderByWithRelationInput
  quizzes?: Prisma.QuizOrderByRelationAggregateInput
  _relevance?: Prisma.TopicOrderByRelevanceInput
}

export type TopicWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TopicWhereInput | Prisma.TopicWhereInput[]
  OR?: Prisma.TopicWhereInput[]
  NOT?: Prisma.TopicWhereInput | Prisma.TopicWhereInput[]
  name?: Prisma.StringFilter<"Topic"> | string
  description?: Prisma.StringNullableFilter<"Topic"> | string | null
  courseId?: Prisma.StringNullableFilter<"Topic"> | string | null
  course?: Prisma.XOR<Prisma.CourseNullableScalarRelationFilter, Prisma.CourseWhereInput> | null
  quizzes?: Prisma.QuizListRelationFilter
}, "id">

export type TopicOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  courseId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.TopicCountOrderByAggregateInput
  _max?: Prisma.TopicMaxOrderByAggregateInput
  _min?: Prisma.TopicMinOrderByAggregateInput
}

export type TopicScalarWhereWithAggregatesInput = {
  AND?: Prisma.TopicScalarWhereWithAggregatesInput | Prisma.TopicScalarWhereWithAggregatesInput[]
  OR?: Prisma.TopicScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TopicScalarWhereWithAggregatesInput | Prisma.TopicScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Topic"> | string
  name?: Prisma.StringWithAggregatesFilter<"Topic"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Topic"> | string | null
  courseId?: Prisma.StringNullableWithAggregatesFilter<"Topic"> | string | null
}

export type TopicCreateInput = {
  id?: string
  name: string
  description?: string | null
  course?: Prisma.CourseCreateNestedOneWithoutTopicsInput
  quizzes?: Prisma.QuizCreateNestedManyWithoutTopicInput
}

export type TopicUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  courseId?: string | null
  quizzes?: Prisma.QuizUncheckedCreateNestedManyWithoutTopicInput
}

export type TopicUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  course?: Prisma.CourseUpdateOneWithoutTopicsNestedInput
  quizzes?: Prisma.QuizUpdateManyWithoutTopicNestedInput
}

export type TopicUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  courseId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  quizzes?: Prisma.QuizUncheckedUpdateManyWithoutTopicNestedInput
}

export type TopicCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  courseId?: string | null
}

export type TopicUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TopicUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  courseId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TopicListRelationFilter = {
  every?: Prisma.TopicWhereInput
  some?: Prisma.TopicWhereInput
  none?: Prisma.TopicWhereInput
}

export type TopicOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TopicOrderByRelevanceInput = {
  fields: Prisma.TopicOrderByRelevanceFieldEnum | Prisma.TopicOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type TopicCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  courseId?: Prisma.SortOrder
}

export type TopicMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  courseId?: Prisma.SortOrder
}

export type TopicMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  courseId?: Prisma.SortOrder
}

export type TopicNullableScalarRelationFilter = {
  is?: Prisma.TopicWhereInput | null
  isNot?: Prisma.TopicWhereInput | null
}

export type TopicCreateNestedManyWithoutCourseInput = {
  create?: Prisma.XOR<Prisma.TopicCreateWithoutCourseInput, Prisma.TopicUncheckedCreateWithoutCourseInput> | Prisma.TopicCreateWithoutCourseInput[] | Prisma.TopicUncheckedCreateWithoutCourseInput[]
  connectOrCreate?: Prisma.TopicCreateOrConnectWithoutCourseInput | Prisma.TopicCreateOrConnectWithoutCourseInput[]
  createMany?: Prisma.TopicCreateManyCourseInputEnvelope
  connect?: Prisma.TopicWhereUniqueInput | Prisma.TopicWhereUniqueInput[]
}

export type TopicUncheckedCreateNestedManyWithoutCourseInput = {
  create?: Prisma.XOR<Prisma.TopicCreateWithoutCourseInput, Prisma.TopicUncheckedCreateWithoutCourseInput> | Prisma.TopicCreateWithoutCourseInput[] | Prisma.TopicUncheckedCreateWithoutCourseInput[]
  connectOrCreate?: Prisma.TopicCreateOrConnectWithoutCourseInput | Prisma.TopicCreateOrConnectWithoutCourseInput[]
  createMany?: Prisma.TopicCreateManyCourseInputEnvelope
  connect?: Prisma.TopicWhereUniqueInput | Prisma.TopicWhereUniqueInput[]
}

export type TopicUpdateManyWithoutCourseNestedInput = {
  create?: Prisma.XOR<Prisma.TopicCreateWithoutCourseInput, Prisma.TopicUncheckedCreateWithoutCourseInput> | Prisma.TopicCreateWithoutCourseInput[] | Prisma.TopicUncheckedCreateWithoutCourseInput[]
  connectOrCreate?: Prisma.TopicCreateOrConnectWithoutCourseInput | Prisma.TopicCreateOrConnectWithoutCourseInput[]
  upsert?: Prisma.TopicUpsertWithWhereUniqueWithoutCourseInput | Prisma.TopicUpsertWithWhereUniqueWithoutCourseInput[]
  createMany?: Prisma.TopicCreateManyCourseInputEnvelope
  set?: Prisma.TopicWhereUniqueInput | Prisma.TopicWhereUniqueInput[]
  disconnect?: Prisma.TopicWhereUniqueInput | Prisma.TopicWhereUniqueInput[]
  delete?: Prisma.TopicWhereUniqueInput | Prisma.TopicWhereUniqueInput[]
  connect?: Prisma.TopicWhereUniqueInput | Prisma.TopicWhereUniqueInput[]
  update?: Prisma.TopicUpdateWithWhereUniqueWithoutCourseInput | Prisma.TopicUpdateWithWhereUniqueWithoutCourseInput[]
  updateMany?: Prisma.TopicUpdateManyWithWhereWithoutCourseInput | Prisma.TopicUpdateManyWithWhereWithoutCourseInput[]
  deleteMany?: Prisma.TopicScalarWhereInput | Prisma.TopicScalarWhereInput[]
}

export type TopicUncheckedUpdateManyWithoutCourseNestedInput = {
  create?: Prisma.XOR<Prisma.TopicCreateWithoutCourseInput, Prisma.TopicUncheckedCreateWithoutCourseInput> | Prisma.TopicCreateWithoutCourseInput[] | Prisma.TopicUncheckedCreateWithoutCourseInput[]
  connectOrCreate?: Prisma.TopicCreateOrConnectWithoutCourseInput | Prisma.TopicCreateOrConnectWithoutCourseInput[]
  upsert?: Prisma.TopicUpsertWithWhereUniqueWithoutCourseInput | Prisma.TopicUpsertWithWhereUniqueWithoutCourseInput[]
  createMany?: Prisma.TopicCreateManyCourseInputEnvelope
  set?: Prisma.TopicWhereUniqueInput | Prisma.TopicWhereUniqueInput[]
  disconnect?: Prisma.TopicWhereUniqueInput | Prisma.TopicWhereUniqueInput[]
  delete?: Prisma.TopicWhereUniqueInput | Prisma.TopicWhereUniqueInput[]
  connect?: Prisma.TopicWhereUniqueInput | Prisma.TopicWhereUniqueInput[]
  update?: Prisma.TopicUpdateWithWhereUniqueWithoutCourseInput | Prisma.TopicUpdateWithWhereUniqueWithoutCourseInput[]
  updateMany?: Prisma.TopicUpdateManyWithWhereWithoutCourseInput | Prisma.TopicUpdateManyWithWhereWithoutCourseInput[]
  deleteMany?: Prisma.TopicScalarWhereInput | Prisma.TopicScalarWhereInput[]
}

export type TopicCreateNestedOneWithoutQuizzesInput = {
  create?: Prisma.XOR<Prisma.TopicCreateWithoutQuizzesInput, Prisma.TopicUncheckedCreateWithoutQuizzesInput>
  connectOrCreate?: Prisma.TopicCreateOrConnectWithoutQuizzesInput
  connect?: Prisma.TopicWhereUniqueInput
}

export type TopicUpdateOneWithoutQuizzesNestedInput = {
  create?: Prisma.XOR<Prisma.TopicCreateWithoutQuizzesInput, Prisma.TopicUncheckedCreateWithoutQuizzesInput>
  connectOrCreate?: Prisma.TopicCreateOrConnectWithoutQuizzesInput
  upsert?: Prisma.TopicUpsertWithoutQuizzesInput
  disconnect?: Prisma.TopicWhereInput | boolean
  delete?: Prisma.TopicWhereInput | boolean
  connect?: Prisma.TopicWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TopicUpdateToOneWithWhereWithoutQuizzesInput, Prisma.TopicUpdateWithoutQuizzesInput>, Prisma.TopicUncheckedUpdateWithoutQuizzesInput>
}

export type TopicCreateWithoutCourseInput = {
  id?: string
  name: string
  description?: string | null
  quizzes?: Prisma.QuizCreateNestedManyWithoutTopicInput
}

export type TopicUncheckedCreateWithoutCourseInput = {
  id?: string
  name: string
  description?: string | null
  quizzes?: Prisma.QuizUncheckedCreateNestedManyWithoutTopicInput
}

export type TopicCreateOrConnectWithoutCourseInput = {
  where: Prisma.TopicWhereUniqueInput
  create: Prisma.XOR<Prisma.TopicCreateWithoutCourseInput, Prisma.TopicUncheckedCreateWithoutCourseInput>
}

export type TopicCreateManyCourseInputEnvelope = {
  data: Prisma.TopicCreateManyCourseInput | Prisma.TopicCreateManyCourseInput[]
  skipDuplicates?: boolean
}

export type TopicUpsertWithWhereUniqueWithoutCourseInput = {
  where: Prisma.TopicWhereUniqueInput
  update: Prisma.XOR<Prisma.TopicUpdateWithoutCourseInput, Prisma.TopicUncheckedUpdateWithoutCourseInput>
  create: Prisma.XOR<Prisma.TopicCreateWithoutCourseInput, Prisma.TopicUncheckedCreateWithoutCourseInput>
}

export type TopicUpdateWithWhereUniqueWithoutCourseInput = {
  where: Prisma.TopicWhereUniqueInput
  data: Prisma.XOR<Prisma.TopicUpdateWithoutCourseInput, Prisma.TopicUncheckedUpdateWithoutCourseInput>
}

export type TopicUpdateManyWithWhereWithoutCourseInput = {
  where: Prisma.TopicScalarWhereInput
  data: Prisma.XOR<Prisma.TopicUpdateManyMutationInput, Prisma.TopicUncheckedUpdateManyWithoutCourseInput>
}

export type TopicScalarWhereInput = {
  AND?: Prisma.TopicScalarWhereInput | Prisma.TopicScalarWhereInput[]
  OR?: Prisma.TopicScalarWhereInput[]
  NOT?: Prisma.TopicScalarWhereInput | Prisma.TopicScalarWhereInput[]
  id?: Prisma.StringFilter<"Topic"> | string
  name?: Prisma.StringFilter<"Topic"> | string
  description?: Prisma.StringNullableFilter<"Topic"> | string | null
  courseId?: Prisma.StringNullableFilter<"Topic"> | string | null
}

export type TopicCreateWithoutQuizzesInput = {
  id?: string
  name: string
  description?: string | null
  course?: Prisma.CourseCreateNestedOneWithoutTopicsInput
}

export type TopicUncheckedCreateWithoutQuizzesInput = {
  id?: string
  name: string
  description?: string | null
  courseId?: string | null
}

export type TopicCreateOrConnectWithoutQuizzesInput = {
  where: Prisma.TopicWhereUniqueInput
  create: Prisma.XOR<Prisma.TopicCreateWithoutQuizzesInput, Prisma.TopicUncheckedCreateWithoutQuizzesInput>
}

export type TopicUpsertWithoutQuizzesInput = {
  update: Prisma.XOR<Prisma.TopicUpdateWithoutQuizzesInput, Prisma.TopicUncheckedUpdateWithoutQuizzesInput>
  create: Prisma.XOR<Prisma.TopicCreateWithoutQuizzesInput, Prisma.TopicUncheckedCreateWithoutQuizzesInput>
  where?: Prisma.TopicWhereInput
}

export type TopicUpdateToOneWithWhereWithoutQuizzesInput = {
  where?: Prisma.TopicWhereInput
  data: Prisma.XOR<Prisma.TopicUpdateWithoutQuizzesInput, Prisma.TopicUncheckedUpdateWithoutQuizzesInput>
}

export type TopicUpdateWithoutQuizzesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  course?: Prisma.CourseUpdateOneWithoutTopicsNestedInput
}

export type TopicUncheckedUpdateWithoutQuizzesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  courseId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TopicCreateManyCourseInput = {
  id?: string
  name: string
  description?: string | null
}

export type TopicUpdateWithoutCourseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  quizzes?: Prisma.QuizUpdateManyWithoutTopicNestedInput
}

export type TopicUncheckedUpdateWithoutCourseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  quizzes?: Prisma.QuizUncheckedUpdateManyWithoutTopicNestedInput
}

export type TopicUncheckedUpdateManyWithoutCourseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type TopicCountOutputType
 */

export type TopicCountOutputType = {
  quizzes: number
}

export type TopicCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  quizzes?: boolean | TopicCountOutputTypeCountQuizzesArgs
}

/**
 * TopicCountOutputType without action
 */
export type TopicCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TopicCountOutputType
   */
  select?: Prisma.TopicCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TopicCountOutputType without action
 */
export type TopicCountOutputTypeCountQuizzesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.QuizWhereInput
}


export type TopicSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  courseId?: boolean
  course?: boolean | Prisma.Topic$courseArgs<ExtArgs>
  quizzes?: boolean | Prisma.Topic$quizzesArgs<ExtArgs>
  _count?: boolean | Prisma.TopicCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["topic"]>



export type TopicSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  courseId?: boolean
}

export type TopicOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "courseId", ExtArgs["result"]["topic"]>
export type TopicInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  course?: boolean | Prisma.Topic$courseArgs<ExtArgs>
  quizzes?: boolean | Prisma.Topic$quizzesArgs<ExtArgs>
  _count?: boolean | Prisma.TopicCountOutputTypeDefaultArgs<ExtArgs>
}

export type $TopicPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Topic"
  objects: {
    course: Prisma.$CoursePayload<ExtArgs> | null
    quizzes: Prisma.$QuizPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    courseId: string | null
  }, ExtArgs["result"]["topic"]>
  composites: {}
}

export type TopicGetPayload<S extends boolean | null | undefined | TopicDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TopicPayload, S>

export type TopicCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TopicFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TopicCountAggregateInputType | true
  }

export interface TopicDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Topic'], meta: { name: 'Topic' } }
  /**
   * Find zero or one Topic that matches the filter.
   * @param {TopicFindUniqueArgs} args - Arguments to find a Topic
   * @example
   * // Get one Topic
   * const topic = await prisma.topic.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TopicFindUniqueArgs>(args: Prisma.SelectSubset<T, TopicFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TopicClient<runtime.Types.Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Topic that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TopicFindUniqueOrThrowArgs} args - Arguments to find a Topic
   * @example
   * // Get one Topic
   * const topic = await prisma.topic.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TopicFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TopicFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TopicClient<runtime.Types.Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Topic that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TopicFindFirstArgs} args - Arguments to find a Topic
   * @example
   * // Get one Topic
   * const topic = await prisma.topic.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TopicFindFirstArgs>(args?: Prisma.SelectSubset<T, TopicFindFirstArgs<ExtArgs>>): Prisma.Prisma__TopicClient<runtime.Types.Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Topic that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TopicFindFirstOrThrowArgs} args - Arguments to find a Topic
   * @example
   * // Get one Topic
   * const topic = await prisma.topic.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TopicFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TopicFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TopicClient<runtime.Types.Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Topics that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TopicFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Topics
   * const topics = await prisma.topic.findMany()
   * 
   * // Get first 10 Topics
   * const topics = await prisma.topic.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const topicWithIdOnly = await prisma.topic.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TopicFindManyArgs>(args?: Prisma.SelectSubset<T, TopicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Topic.
   * @param {TopicCreateArgs} args - Arguments to create a Topic.
   * @example
   * // Create one Topic
   * const Topic = await prisma.topic.create({
   *   data: {
   *     // ... data to create a Topic
   *   }
   * })
   * 
   */
  create<T extends TopicCreateArgs>(args: Prisma.SelectSubset<T, TopicCreateArgs<ExtArgs>>): Prisma.Prisma__TopicClient<runtime.Types.Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Topics.
   * @param {TopicCreateManyArgs} args - Arguments to create many Topics.
   * @example
   * // Create many Topics
   * const topic = await prisma.topic.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TopicCreateManyArgs>(args?: Prisma.SelectSubset<T, TopicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Topic.
   * @param {TopicDeleteArgs} args - Arguments to delete one Topic.
   * @example
   * // Delete one Topic
   * const Topic = await prisma.topic.delete({
   *   where: {
   *     // ... filter to delete one Topic
   *   }
   * })
   * 
   */
  delete<T extends TopicDeleteArgs>(args: Prisma.SelectSubset<T, TopicDeleteArgs<ExtArgs>>): Prisma.Prisma__TopicClient<runtime.Types.Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Topic.
   * @param {TopicUpdateArgs} args - Arguments to update one Topic.
   * @example
   * // Update one Topic
   * const topic = await prisma.topic.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TopicUpdateArgs>(args: Prisma.SelectSubset<T, TopicUpdateArgs<ExtArgs>>): Prisma.Prisma__TopicClient<runtime.Types.Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Topics.
   * @param {TopicDeleteManyArgs} args - Arguments to filter Topics to delete.
   * @example
   * // Delete a few Topics
   * const { count } = await prisma.topic.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TopicDeleteManyArgs>(args?: Prisma.SelectSubset<T, TopicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Topics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TopicUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Topics
   * const topic = await prisma.topic.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TopicUpdateManyArgs>(args: Prisma.SelectSubset<T, TopicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Topic.
   * @param {TopicUpsertArgs} args - Arguments to update or create a Topic.
   * @example
   * // Update or create a Topic
   * const topic = await prisma.topic.upsert({
   *   create: {
   *     // ... data to create a Topic
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Topic we want to update
   *   }
   * })
   */
  upsert<T extends TopicUpsertArgs>(args: Prisma.SelectSubset<T, TopicUpsertArgs<ExtArgs>>): Prisma.Prisma__TopicClient<runtime.Types.Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Topics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TopicCountArgs} args - Arguments to filter Topics to count.
   * @example
   * // Count the number of Topics
   * const count = await prisma.topic.count({
   *   where: {
   *     // ... the filter for the Topics we want to count
   *   }
   * })
  **/
  count<T extends TopicCountArgs>(
    args?: Prisma.Subset<T, TopicCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TopicCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Topic.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TopicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TopicAggregateArgs>(args: Prisma.Subset<T, TopicAggregateArgs>): Prisma.PrismaPromise<GetTopicAggregateType<T>>

  /**
   * Group by Topic.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TopicGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TopicGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TopicGroupByArgs['orderBy'] }
      : { orderBy?: TopicGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TopicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTopicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Topic model
 */
readonly fields: TopicFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Topic.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TopicClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  course<T extends Prisma.Topic$courseArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Topic$courseArgs<ExtArgs>>): Prisma.Prisma__CourseClient<runtime.Types.Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  quizzes<T extends Prisma.Topic$quizzesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Topic$quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Topic model
 */
export interface TopicFieldRefs {
  readonly id: Prisma.FieldRef<"Topic", 'String'>
  readonly name: Prisma.FieldRef<"Topic", 'String'>
  readonly description: Prisma.FieldRef<"Topic", 'String'>
  readonly courseId: Prisma.FieldRef<"Topic", 'String'>
}
    

// Custom InputTypes
/**
 * Topic findUnique
 */
export type TopicFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topic
   */
  select?: Prisma.TopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topic
   */
  omit?: Prisma.TopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopicInclude<ExtArgs> | null
  /**
   * Filter, which Topic to fetch.
   */
  where: Prisma.TopicWhereUniqueInput
}

/**
 * Topic findUniqueOrThrow
 */
export type TopicFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topic
   */
  select?: Prisma.TopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topic
   */
  omit?: Prisma.TopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopicInclude<ExtArgs> | null
  /**
   * Filter, which Topic to fetch.
   */
  where: Prisma.TopicWhereUniqueInput
}

/**
 * Topic findFirst
 */
export type TopicFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topic
   */
  select?: Prisma.TopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topic
   */
  omit?: Prisma.TopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopicInclude<ExtArgs> | null
  /**
   * Filter, which Topic to fetch.
   */
  where?: Prisma.TopicWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Topics to fetch.
   */
  orderBy?: Prisma.TopicOrderByWithRelationInput | Prisma.TopicOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Topics.
   */
  cursor?: Prisma.TopicWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Topics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Topics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Topics.
   */
  distinct?: Prisma.TopicScalarFieldEnum | Prisma.TopicScalarFieldEnum[]
}

/**
 * Topic findFirstOrThrow
 */
export type TopicFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topic
   */
  select?: Prisma.TopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topic
   */
  omit?: Prisma.TopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopicInclude<ExtArgs> | null
  /**
   * Filter, which Topic to fetch.
   */
  where?: Prisma.TopicWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Topics to fetch.
   */
  orderBy?: Prisma.TopicOrderByWithRelationInput | Prisma.TopicOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Topics.
   */
  cursor?: Prisma.TopicWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Topics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Topics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Topics.
   */
  distinct?: Prisma.TopicScalarFieldEnum | Prisma.TopicScalarFieldEnum[]
}

/**
 * Topic findMany
 */
export type TopicFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topic
   */
  select?: Prisma.TopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topic
   */
  omit?: Prisma.TopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopicInclude<ExtArgs> | null
  /**
   * Filter, which Topics to fetch.
   */
  where?: Prisma.TopicWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Topics to fetch.
   */
  orderBy?: Prisma.TopicOrderByWithRelationInput | Prisma.TopicOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Topics.
   */
  cursor?: Prisma.TopicWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Topics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Topics.
   */
  skip?: number
  distinct?: Prisma.TopicScalarFieldEnum | Prisma.TopicScalarFieldEnum[]
}

/**
 * Topic create
 */
export type TopicCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topic
   */
  select?: Prisma.TopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topic
   */
  omit?: Prisma.TopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopicInclude<ExtArgs> | null
  /**
   * The data needed to create a Topic.
   */
  data: Prisma.XOR<Prisma.TopicCreateInput, Prisma.TopicUncheckedCreateInput>
}

/**
 * Topic createMany
 */
export type TopicCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Topics.
   */
  data: Prisma.TopicCreateManyInput | Prisma.TopicCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Topic update
 */
export type TopicUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topic
   */
  select?: Prisma.TopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topic
   */
  omit?: Prisma.TopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopicInclude<ExtArgs> | null
  /**
   * The data needed to update a Topic.
   */
  data: Prisma.XOR<Prisma.TopicUpdateInput, Prisma.TopicUncheckedUpdateInput>
  /**
   * Choose, which Topic to update.
   */
  where: Prisma.TopicWhereUniqueInput
}

/**
 * Topic updateMany
 */
export type TopicUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Topics.
   */
  data: Prisma.XOR<Prisma.TopicUpdateManyMutationInput, Prisma.TopicUncheckedUpdateManyInput>
  /**
   * Filter which Topics to update
   */
  where?: Prisma.TopicWhereInput
  /**
   * Limit how many Topics to update.
   */
  limit?: number
}

/**
 * Topic upsert
 */
export type TopicUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topic
   */
  select?: Prisma.TopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topic
   */
  omit?: Prisma.TopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopicInclude<ExtArgs> | null
  /**
   * The filter to search for the Topic to update in case it exists.
   */
  where: Prisma.TopicWhereUniqueInput
  /**
   * In case the Topic found by the `where` argument doesn't exist, create a new Topic with this data.
   */
  create: Prisma.XOR<Prisma.TopicCreateInput, Prisma.TopicUncheckedCreateInput>
  /**
   * In case the Topic was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TopicUpdateInput, Prisma.TopicUncheckedUpdateInput>
}

/**
 * Topic delete
 */
export type TopicDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topic
   */
  select?: Prisma.TopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topic
   */
  omit?: Prisma.TopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopicInclude<ExtArgs> | null
  /**
   * Filter which Topic to delete.
   */
  where: Prisma.TopicWhereUniqueInput
}

/**
 * Topic deleteMany
 */
export type TopicDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Topics to delete
   */
  where?: Prisma.TopicWhereInput
  /**
   * Limit how many Topics to delete.
   */
  limit?: number
}

/**
 * Topic.course
 */
export type Topic$courseArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Course
   */
  select?: Prisma.CourseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Course
   */
  omit?: Prisma.CourseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseInclude<ExtArgs> | null
  where?: Prisma.CourseWhereInput
}

/**
 * Topic.quizzes
 */
export type Topic$quizzesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Quiz
   */
  select?: Prisma.QuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Quiz
   */
  omit?: Prisma.QuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizInclude<ExtArgs> | null
  where?: Prisma.QuizWhereInput
  orderBy?: Prisma.QuizOrderByWithRelationInput | Prisma.QuizOrderByWithRelationInput[]
  cursor?: Prisma.QuizWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.QuizScalarFieldEnum | Prisma.QuizScalarFieldEnum[]
}

/**
 * Topic without action
 */
export type TopicDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topic
   */
  select?: Prisma.TopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topic
   */
  omit?: Prisma.TopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopicInclude<ExtArgs> | null
}


/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `UserBadge` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model UserBadge
 * 
 */
export type UserBadgeModel = runtime.Types.Result.DefaultSelection<Prisma.$UserBadgePayload>

export type AggregateUserBadge = {
  _count: UserBadgeCountAggregateOutputType | null
  _min: UserBadgeMinAggregateOutputType | null
  _max: UserBadgeMaxAggregateOutputType | null
}

export type UserBadgeMinAggregateOutputType = {
  id: string | null
  userId: string | null
  badgeId: string | null
  earnedAt: Date | null
}

export type UserBadgeMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  badgeId: string | null
  earnedAt: Date | null
}

export type UserBadgeCountAggregateOutputType = {
  id: number
  userId: number
  badgeId: number
  earnedAt: number
  _all: number
}


export type UserBadgeMinAggregateInputType = {
  id?: true
  userId?: true
  badgeId?: true
  earnedAt?: true
}

export type UserBadgeMaxAggregateInputType = {
  id?: true
  userId?: true
  badgeId?: true
  earnedAt?: true
}

export type UserBadgeCountAggregateInputType = {
  id?: true
  userId?: true
  badgeId?: true
  earnedAt?: true
  _all?: true
}

export type UserBadgeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserBadge to aggregate.
   */
  where?: Prisma.UserBadgeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserBadges to fetch.
   */
  orderBy?: Prisma.UserBadgeOrderByWithRelationInput | Prisma.UserBadgeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserBadgeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserBadges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserBadges.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserBadges
  **/
  _count?: true | UserBadgeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserBadgeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserBadgeMaxAggregateInputType
}

export type GetUserBadgeAggregateType<T extends UserBadgeAggregateArgs> = {
      [P in keyof T & keyof AggregateUserBadge]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserBadge[P]>
    : Prisma.GetScalarType<T[P], AggregateUserBadge[P]>
}




export type UserBadgeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserBadgeWhereInput
  orderBy?: Prisma.UserBadgeOrderByWithAggregationInput | Prisma.UserBadgeOrderByWithAggregationInput[]
  by: Prisma.UserBadgeScalarFieldEnum[] | Prisma.UserBadgeScalarFieldEnum
  having?: Prisma.UserBadgeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserBadgeCountAggregateInputType | true
  _min?: UserBadgeMinAggregateInputType
  _max?: UserBadgeMaxAggregateInputType
}

export type UserBadgeGroupByOutputType = {
  id: string
  userId: string
  badgeId: string
  earnedAt: Date
  _count: UserBadgeCountAggregateOutputType | null
  _min: UserBadgeMinAggregateOutputType | null
  _max: UserBadgeMaxAggregateOutputType | null
}

type GetUserBadgeGroupByPayload<T extends UserBadgeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserBadgeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserBadgeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
      }
    >
  >



export type UserBadgeWhereInput = {
  AND?: Prisma.UserBadgeWhereInput | Prisma.UserBadgeWhereInput[]
  OR?: Prisma.UserBadgeWhereInput[]
  NOT?: Prisma.UserBadgeWhereInput | Prisma.UserBadgeWhereInput[]
  id?: Prisma.StringFilter<"UserBadge"> | string
  userId?: Prisma.StringFilter<"UserBadge"> | string
  badgeId?: Prisma.StringFilter<"UserBadge"> | string
  earnedAt?: Prisma.DateTimeFilter<"UserBadge"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  badge?: Prisma.XOR<Prisma.BadgeScalarRelationFilter, Prisma.BadgeWhereInput>
}

export type UserBadgeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  badgeId?: Prisma.SortOrder
  earnedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  badge?: Prisma.BadgeOrderByWithRelationInput
  _relevance?: Prisma.UserBadgeOrderByRelevanceInput
}

export type UserBadgeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.UserBadgeWhereInput | Prisma.UserBadgeWhereInput[]
  OR?: Prisma.UserBadgeWhereInput[]
  NOT?: Prisma.UserBadgeWhereInput | Prisma.UserBadgeWhereInput[]
  userId?: Prisma.StringFilter<"UserBadge"> | string
  badgeId?: Prisma.StringFilter<"UserBadge"> | string
  earnedAt?: Prisma.DateTimeFilter<"UserBadge"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  badge?: Prisma.XOR<Prisma.BadgeScalarRelationFilter, Prisma.BadgeWhereInput>
}, "id">

export type UserBadgeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  badgeId?: Prisma.SortOrder
  earnedAt?: Prisma.SortOrder
  _count?: Prisma.UserBadgeCountOrderByAggregateInput
  _max?: Prisma.UserBadgeMaxOrderByAggregateInput
  _min?: Prisma.UserBadgeMinOrderByAggregateInput
}

export type UserBadgeScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserBadgeScalarWhereWithAggregatesInput | Prisma.UserBadgeScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserBadgeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserBadgeScalarWhereWithAggregatesInput | Prisma.UserBadgeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserBadge"> | string
  userId?: Prisma.StringWithAggregatesFilter<"UserBadge"> | string
  badgeId?: Prisma.StringWithAggregatesFilter<"UserBadge"> | string
  earnedAt?: Prisma.DateTimeWithAggregatesFilter<"UserBadge"> | Date | string
}

export type UserBadgeCreateInput = {
  id?: string
  earnedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutBadgesInput
  badge: Prisma.BadgeCreateNestedOneWithoutUsersInput
}

export type UserBadgeUncheckedCreateInput = {
  id?: string
  userId: string
  badgeId: string
  earnedAt?: Date | string
}

export type UserBadgeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  earnedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutBadgesNestedInput
  badge?: Prisma.BadgeUpdateOneRequiredWithoutUsersNestedInput
}

export type UserBadgeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  badgeId?: Prisma.StringFieldUpdateOperationsInput | string
  earnedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserBadgeCreateManyInput = {
  id?: string
  userId: string
  badgeId: string
  earnedAt?: Date | string
}

export type UserBadgeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  earnedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserBadgeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  badgeId?: Prisma.StringFieldUpdateOperationsInput | string
  earnedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserBadgeListRelationFilter = {
  every?: Prisma.UserBadgeWhereInput
  some?: Prisma.UserBadgeWhereInput
  none?: Prisma.UserBadgeWhereInput
}

export type UserBadgeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserBadgeOrderByRelevanceInput = {
  fields: Prisma.UserBadgeOrderByRelevanceFieldEnum | Prisma.UserBadgeOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type UserBadgeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  badgeId?: Prisma.SortOrder
  earnedAt?: Prisma.SortOrder
}

export type UserBadgeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  badgeId?: Prisma.SortOrder
  earnedAt?: Prisma.SortOrder
}

export type UserBadgeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  badgeId?: Prisma.SortOrder
  earnedAt?: Prisma.SortOrder
}

export type UserBadgeCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserBadgeCreateWithoutUserInput, Prisma.UserBadgeUncheckedCreateWithoutUserInput> | Prisma.UserBadgeCreateWithoutUserInput[] | Prisma.UserBadgeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserBadgeCreateOrConnectWithoutUserInput | Prisma.UserBadgeCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserBadgeCreateManyUserInputEnvelope
  connect?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
}

export type UserBadgeUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserBadgeCreateWithoutUserInput, Prisma.UserBadgeUncheckedCreateWithoutUserInput> | Prisma.UserBadgeCreateWithoutUserInput[] | Prisma.UserBadgeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserBadgeCreateOrConnectWithoutUserInput | Prisma.UserBadgeCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserBadgeCreateManyUserInputEnvelope
  connect?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
}

export type UserBadgeUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserBadgeCreateWithoutUserInput, Prisma.UserBadgeUncheckedCreateWithoutUserInput> | Prisma.UserBadgeCreateWithoutUserInput[] | Prisma.UserBadgeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserBadgeCreateOrConnectWithoutUserInput | Prisma.UserBadgeCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserBadgeUpsertWithWhereUniqueWithoutUserInput | Prisma.UserBadgeUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserBadgeCreateManyUserInputEnvelope
  set?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
  disconnect?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
  delete?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
  connect?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
  update?: Prisma.UserBadgeUpdateWithWhereUniqueWithoutUserInput | Prisma.UserBadgeUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserBadgeUpdateManyWithWhereWithoutUserInput | Prisma.UserBadgeUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserBadgeScalarWhereInput | Prisma.UserBadgeScalarWhereInput[]
}

export type UserBadgeUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserBadgeCreateWithoutUserInput, Prisma.UserBadgeUncheckedCreateWithoutUserInput> | Prisma.UserBadgeCreateWithoutUserInput[] | Prisma.UserBadgeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserBadgeCreateOrConnectWithoutUserInput | Prisma.UserBadgeCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserBadgeUpsertWithWhereUniqueWithoutUserInput | Prisma.UserBadgeUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserBadgeCreateManyUserInputEnvelope
  set?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
  disconnect?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
  delete?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
  connect?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
  update?: Prisma.UserBadgeUpdateWithWhereUniqueWithoutUserInput | Prisma.UserBadgeUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserBadgeUpdateManyWithWhereWithoutUserInput | Prisma.UserBadgeUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserBadgeScalarWhereInput | Prisma.UserBadgeScalarWhereInput[]
}

export type UserBadgeCreateNestedManyWithoutBadgeInput = {
  create?: Prisma.XOR<Prisma.UserBadgeCreateWithoutBadgeInput, Prisma.UserBadgeUncheckedCreateWithoutBadgeInput> | Prisma.UserBadgeCreateWithoutBadgeInput[] | Prisma.UserBadgeUncheckedCreateWithoutBadgeInput[]
  connectOrCreate?: Prisma.UserBadgeCreateOrConnectWithoutBadgeInput | Prisma.UserBadgeCreateOrConnectWithoutBadgeInput[]
  createMany?: Prisma.UserBadgeCreateManyBadgeInputEnvelope
  connect?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
}

export type UserBadgeUncheckedCreateNestedManyWithoutBadgeInput = {
  create?: Prisma.XOR<Prisma.UserBadgeCreateWithoutBadgeInput, Prisma.UserBadgeUncheckedCreateWithoutBadgeInput> | Prisma.UserBadgeCreateWithoutBadgeInput[] | Prisma.UserBadgeUncheckedCreateWithoutBadgeInput[]
  connectOrCreate?: Prisma.UserBadgeCreateOrConnectWithoutBadgeInput | Prisma.UserBadgeCreateOrConnectWithoutBadgeInput[]
  createMany?: Prisma.UserBadgeCreateManyBadgeInputEnvelope
  connect?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
}

export type UserBadgeUpdateManyWithoutBadgeNestedInput = {
  create?: Prisma.XOR<Prisma.UserBadgeCreateWithoutBadgeInput, Prisma.UserBadgeUncheckedCreateWithoutBadgeInput> | Prisma.UserBadgeCreateWithoutBadgeInput[] | Prisma.UserBadgeUncheckedCreateWithoutBadgeInput[]
  connectOrCreate?: Prisma.UserBadgeCreateOrConnectWithoutBadgeInput | Prisma.UserBadgeCreateOrConnectWithoutBadgeInput[]
  upsert?: Prisma.UserBadgeUpsertWithWhereUniqueWithoutBadgeInput | Prisma.UserBadgeUpsertWithWhereUniqueWithoutBadgeInput[]
  createMany?: Prisma.UserBadgeCreateManyBadgeInputEnvelope
  set?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
  disconnect?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
  delete?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
  connect?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
  update?: Prisma.UserBadgeUpdateWithWhereUniqueWithoutBadgeInput | Prisma.UserBadgeUpdateWithWhereUniqueWithoutBadgeInput[]
  updateMany?: Prisma.UserBadgeUpdateManyWithWhereWithoutBadgeInput | Prisma.UserBadgeUpdateManyWithWhereWithoutBadgeInput[]
  deleteMany?: Prisma.UserBadgeScalarWhereInput | Prisma.UserBadgeScalarWhereInput[]
}

export type UserBadgeUncheckedUpdateManyWithoutBadgeNestedInput = {
  create?: Prisma.XOR<Prisma.UserBadgeCreateWithoutBadgeInput, Prisma.UserBadgeUncheckedCreateWithoutBadgeInput> | Prisma.UserBadgeCreateWithoutBadgeInput[] | Prisma.UserBadgeUncheckedCreateWithoutBadgeInput[]
  connectOrCreate?: Prisma.UserBadgeCreateOrConnectWithoutBadgeInput | Prisma.UserBadgeCreateOrConnectWithoutBadgeInput[]
  upsert?: Prisma.UserBadgeUpsertWithWhereUniqueWithoutBadgeInput | Prisma.UserBadgeUpsertWithWhereUniqueWithoutBadgeInput[]
  createMany?: Prisma.UserBadgeCreateManyBadgeInputEnvelope
  set?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
  disconnect?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
  delete?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
  connect?: Prisma.UserBadgeWhereUniqueInput | Prisma.UserBadgeWhereUniqueInput[]
  update?: Prisma.UserBadgeUpdateWithWhereUniqueWithoutBadgeInput | Prisma.UserBadgeUpdateWithWhereUniqueWithoutBadgeInput[]
  updateMany?: Prisma.UserBadgeUpdateManyWithWhereWithoutBadgeInput | Prisma.UserBadgeUpdateManyWithWhereWithoutBadgeInput[]
  deleteMany?: Prisma.UserBadgeScalarWhereInput | Prisma.UserBadgeScalarWhereInput[]
}

export type UserBadgeCreateWithoutUserInput = {
  id?: string
  earnedAt?: Date | string
  badge: Prisma.BadgeCreateNestedOneWithoutUsersInput
}

export type UserBadgeUncheckedCreateWithoutUserInput = {
  id?: string
  badgeId: string
  earnedAt?: Date | string
}

export type UserBadgeCreateOrConnectWithoutUserInput = {
  where: Prisma.UserBadgeWhereUniqueInput
  create: Prisma.XOR<Prisma.UserBadgeCreateWithoutUserInput, Prisma.UserBadgeUncheckedCreateWithoutUserInput>
}

export type UserBadgeCreateManyUserInputEnvelope = {
  data: Prisma.UserBadgeCreateManyUserInput | Prisma.UserBadgeCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserBadgeUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserBadgeWhereUniqueInput
  update: Prisma.XOR<Prisma.UserBadgeUpdateWithoutUserInput, Prisma.UserBadgeUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserBadgeCreateWithoutUserInput, Prisma.UserBadgeUncheckedCreateWithoutUserInput>
}

export type UserBadgeUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserBadgeWhereUniqueInput
  data: Prisma.XOR<Prisma.UserBadgeUpdateWithoutUserInput, Prisma.UserBadgeUncheckedUpdateWithoutUserInput>
}

export type UserBadgeUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserBadgeScalarWhereInput
  data: Prisma.XOR<Prisma.UserBadgeUpdateManyMutationInput, Prisma.UserBadgeUncheckedUpdateManyWithoutUserInput>
}

export type UserBadgeScalarWhereInput = {
  AND?: Prisma.UserBadgeScalarWhereInput | Prisma.UserBadgeScalarWhereInput[]
  OR?: Prisma.UserBadgeScalarWhereInput[]
  NOT?: Prisma.UserBadgeScalarWhereInput | Prisma.UserBadgeScalarWhereInput[]
  id?: Prisma.StringFilter<"UserBadge"> | string
  userId?: Prisma.StringFilter<"UserBadge"> | string
  badgeId?: Prisma.StringFilter<"UserBadge"> | string
  earnedAt?: Prisma.DateTimeFilter<"UserBadge"> | Date | string
}

export type UserBadgeCreateWithoutBadgeInput = {
  id?: string
  earnedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutBadgesInput
}

export type UserBadgeUncheckedCreateWithoutBadgeInput = {
  id?: string
  userId: string
  earnedAt?: Date | string
}

export type UserBadgeCreateOrConnectWithoutBadgeInput = {
  where: Prisma.UserBadgeWhereUniqueInput
  create: Prisma.XOR<Prisma.UserBadgeCreateWithoutBadgeInput, Prisma.UserBadgeUncheckedCreateWithoutBadgeInput>
}

export type UserBadgeCreateManyBadgeInputEnvelope = {
  data: Prisma.UserBadgeCreateManyBadgeInput | Prisma.UserBadgeCreateManyBadgeInput[]
  skipDuplicates?: boolean
}

export type UserBadgeUpsertWithWhereUniqueWithoutBadgeInput = {
  where: Prisma.UserBadgeWhereUniqueInput
  update: Prisma.XOR<Prisma.UserBadgeUpdateWithoutBadgeInput, Prisma.UserBadgeUncheckedUpdateWithoutBadgeInput>
  create: Prisma.XOR<Prisma.UserBadgeCreateWithoutBadgeInput, Prisma.UserBadgeUncheckedCreateWithoutBadgeInput>
}

export type UserBadgeUpdateWithWhereUniqueWithoutBadgeInput = {
  where: Prisma.UserBadgeWhereUniqueInput
  data: Prisma.XOR<Prisma.UserBadgeUpdateWithoutBadgeInput, Prisma.UserBadgeUncheckedUpdateWithoutBadgeInput>
}

export type UserBadgeUpdateManyWithWhereWithoutBadgeInput = {
  where: Prisma.UserBadgeScalarWhereInput
  data: Prisma.XOR<Prisma.UserBadgeUpdateManyMutationInput, Prisma.UserBadgeUncheckedUpdateManyWithoutBadgeInput>
}

export type UserBadgeCreateManyUserInput = {
  id?: string
  badgeId: string
  earnedAt?: Date | string
}

export type UserBadgeUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  earnedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  badge?: Prisma.BadgeUpdateOneRequiredWithoutUsersNestedInput
}

export type UserBadgeUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  badgeId?: Prisma.StringFieldUpdateOperationsInput | string
  earnedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserBadgeUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  badgeId?: Prisma.StringFieldUpdateOperationsInput | string
  earnedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserBadgeCreateManyBadgeInput = {
  id?: string
  userId: string
  earnedAt?: Date | string
}

export type UserBadgeUpdateWithoutBadgeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  earnedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutBadgesNestedInput
}

export type UserBadgeUncheckedUpdateWithoutBadgeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  earnedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserBadgeUncheckedUpdateManyWithoutBadgeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  earnedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type UserBadgeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  badgeId?: boolean
  earnedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  badge?: boolean | Prisma.BadgeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userBadge"]>



export type UserBadgeSelectScalar = {
  id?: boolean
  userId?: boolean
  badgeId?: boolean
  earnedAt?: boolean
}

export type UserBadgeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "badgeId" | "earnedAt", ExtArgs["result"]["userBadge"]>
export type UserBadgeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  badge?: boolean | Prisma.BadgeDefaultArgs<ExtArgs>
}

export type $UserBadgePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserBadge"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    badge: Prisma.$BadgePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    badgeId: string
    earnedAt: Date
  }, ExtArgs["result"]["userBadge"]>
  composites: {}
}

export type UserBadgeGetPayload<S extends boolean | null | undefined | UserBadgeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserBadgePayload, S>

export type UserBadgeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserBadgeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserBadgeCountAggregateInputType | true
  }

export interface UserBadgeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserBadge'], meta: { name: 'UserBadge' } }
  /**
   * Find zero or one UserBadge that matches the filter.
   * @param {UserBadgeFindUniqueArgs} args - Arguments to find a UserBadge
   * @example
   * // Get one UserBadge
   * const userBadge = await prisma.userBadge.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserBadgeFindUniqueArgs>(args: Prisma.SelectSubset<T, UserBadgeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserBadgeClient<runtime.Types.Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserBadge that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserBadgeFindUniqueOrThrowArgs} args - Arguments to find a UserBadge
   * @example
   * // Get one UserBadge
   * const userBadge = await prisma.userBadge.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserBadgeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserBadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserBadgeClient<runtime.Types.Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserBadge that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserBadgeFindFirstArgs} args - Arguments to find a UserBadge
   * @example
   * // Get one UserBadge
   * const userBadge = await prisma.userBadge.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserBadgeFindFirstArgs>(args?: Prisma.SelectSubset<T, UserBadgeFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserBadgeClient<runtime.Types.Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserBadge that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserBadgeFindFirstOrThrowArgs} args - Arguments to find a UserBadge
   * @example
   * // Get one UserBadge
   * const userBadge = await prisma.userBadge.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserBadgeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserBadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserBadgeClient<runtime.Types.Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserBadges that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserBadgeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserBadges
   * const userBadges = await prisma.userBadge.findMany()
   * 
   * // Get first 10 UserBadges
   * const userBadges = await prisma.userBadge.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userBadgeWithIdOnly = await prisma.userBadge.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserBadgeFindManyArgs>(args?: Prisma.SelectSubset<T, UserBadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserBadge.
   * @param {UserBadgeCreateArgs} args - Arguments to create a UserBadge.
   * @example
   * // Create one UserBadge
   * const UserBadge = await prisma.userBadge.create({
   *   data: {
   *     // ... data to create a UserBadge
   *   }
   * })
   * 
   */
  create<T extends UserBadgeCreateArgs>(args: Prisma.SelectSubset<T, UserBadgeCreateArgs<ExtArgs>>): Prisma.Prisma__UserBadgeClient<runtime.Types.Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserBadges.
   * @param {UserBadgeCreateManyArgs} args - Arguments to create many UserBadges.
   * @example
   * // Create many UserBadges
   * const userBadge = await prisma.userBadge.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserBadgeCreateManyArgs>(args?: Prisma.SelectSubset<T, UserBadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a UserBadge.
   * @param {UserBadgeDeleteArgs} args - Arguments to delete one UserBadge.
   * @example
   * // Delete one UserBadge
   * const UserBadge = await prisma.userBadge.delete({
   *   where: {
   *     // ... filter to delete one UserBadge
   *   }
   * })
   * 
   */
  delete<T extends UserBadgeDeleteArgs>(args: Prisma.SelectSubset<T, UserBadgeDeleteArgs<ExtArgs>>): Prisma.Prisma__UserBadgeClient<runtime.Types.Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserBadge.
   * @param {UserBadgeUpdateArgs} args - Arguments to update one UserBadge.
   * @example
   * // Update one UserBadge
   * const userBadge = await prisma.userBadge.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserBadgeUpdateArgs>(args: Prisma.SelectSubset<T, UserBadgeUpdateArgs<ExtArgs>>): Prisma.Prisma__UserBadgeClient<runtime.Types.Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserBadges.
   * @param {UserBadgeDeleteManyArgs} args - Arguments to filter UserBadges to delete.
   * @example
   * // Delete a few UserBadges
   * const { count } = await prisma.userBadge.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserBadgeDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserBadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserBadges.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserBadgeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserBadges
   * const userBadge = await prisma.userBadge.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserBadgeUpdateManyArgs>(args: Prisma.SelectSubset<T, UserBadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one UserBadge.
   * @param {UserBadgeUpsertArgs} args - Arguments to update or create a UserBadge.
   * @example
   * // Update or create a UserBadge
   * const userBadge = await prisma.userBadge.upsert({
   *   create: {
   *     // ... data to create a UserBadge
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserBadge we want to update
   *   }
   * })
   */
  upsert<T extends UserBadgeUpsertArgs>(args: Prisma.SelectSubset<T, UserBadgeUpsertArgs<ExtArgs>>): Prisma.Prisma__UserBadgeClient<runtime.Types.Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserBadges.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserBadgeCountArgs} args - Arguments to filter UserBadges to count.
   * @example
   * // Count the number of UserBadges
   * const count = await prisma.userBadge.count({
   *   where: {
   *     // ... the filter for the UserBadges we want to count
   *   }
   * })
  **/
  count<T extends UserBadgeCountArgs>(
    args?: Prisma.Subset<T, UserBadgeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserBadgeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserBadge.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserBadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserBadgeAggregateArgs>(args: Prisma.Subset<T, UserBadgeAggregateArgs>): Prisma.PrismaPromise<GetUserBadgeAggregateType<T>>

  /**
   * Group by UserBadge.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserBadgeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserBadgeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserBadgeGroupByArgs['orderBy'] }
      : { orderBy?: UserBadgeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserBadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserBadge model
 */
readonly fields: UserBadgeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserBadge.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserBadgeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  badge<T extends Prisma.BadgeDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BadgeDefaultArgs<ExtArgs>>): Prisma.Prisma__BadgeClient<runtime.Types.Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserBadge model
 */
export interface UserBadgeFieldRefs {
  readonly id: Prisma.FieldRef<"UserBadge", 'String'>
  readonly userId: Prisma.FieldRef<"UserBadge", 'String'>
  readonly badgeId: Prisma.FieldRef<"UserBadge", 'String'>
  readonly earnedAt: Prisma.FieldRef<"UserBadge", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UserBadge findUnique
 */
export type UserBadgeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBadge
   */
  select?: Prisma.UserBadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBadge
   */
  omit?: Prisma.UserBadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBadgeInclude<ExtArgs> | null
  /**
   * Filter, which UserBadge to fetch.
   */
  where: Prisma.UserBadgeWhereUniqueInput
}

/**
 * UserBadge findUniqueOrThrow
 */
export type UserBadgeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBadge
   */
  select?: Prisma.UserBadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBadge
   */
  omit?: Prisma.UserBadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBadgeInclude<ExtArgs> | null
  /**
   * Filter, which UserBadge to fetch.
   */
  where: Prisma.UserBadgeWhereUniqueInput
}

/**
 * UserBadge findFirst
 */
export type UserBadgeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBadge
   */
  select?: Prisma.UserBadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBadge
   */
  omit?: Prisma.UserBadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBadgeInclude<ExtArgs> | null
  /**
   * Filter, which UserBadge to fetch.
   */
  where?: Prisma.UserBadgeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserBadges to fetch.
   */
  orderBy?: Prisma.UserBadgeOrderByWithRelationInput | Prisma.UserBadgeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserBadges.
   */
  cursor?: Prisma.UserBadgeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserBadges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserBadges.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserBadges.
   */
  distinct?: Prisma.UserBadgeScalarFieldEnum | Prisma.UserBadgeScalarFieldEnum[]
}

/**
 * UserBadge findFirstOrThrow
 */
export type UserBadgeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBadge
   */
  select?: Prisma.UserBadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBadge
   */
  omit?: Prisma.UserBadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBadgeInclude<ExtArgs> | null
  /**
   * Filter, which UserBadge to fetch.
   */
  where?: Prisma.UserBadgeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserBadges to fetch.
   */
  orderBy?: Prisma.UserBadgeOrderByWithRelationInput | Prisma.UserBadgeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserBadges.
   */
  cursor?: Prisma.UserBadgeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserBadges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserBadges.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserBadges.
   */
  distinct?: Prisma.UserBadgeScalarFieldEnum | Prisma.UserBadgeScalarFieldEnum[]
}

/**
 * UserBadge findMany
 */
export type UserBadgeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBadge
   */
  select?: Prisma.UserBadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBadge
   */
  omit?: Prisma.UserBadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBadgeInclude<ExtArgs> | null
  /**
   * Filter, which UserBadges to fetch.
   */
  where?: Prisma.UserBadgeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserBadges to fetch.
   */
  orderBy?: Prisma.UserBadgeOrderByWithRelationInput | Prisma.UserBadgeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserBadges.
   */
  cursor?: Prisma.UserBadgeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserBadges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserBadges.
   */
  skip?: number
  distinct?: Prisma.UserBadgeScalarFieldEnum | Prisma.UserBadgeScalarFieldEnum[]
}

/**
 * UserBadge create
 */
export type UserBadgeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBadge
   */
  select?: Prisma.UserBadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBadge
   */
  omit?: Prisma.UserBadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBadgeInclude<ExtArgs> | null
  /**
   * The data needed to create a UserBadge.
   */
  data: Prisma.XOR<Prisma.UserBadgeCreateInput, Prisma.UserBadgeUncheckedCreateInput>
}

/**
 * UserBadge createMany
 */
export type UserBadgeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserBadges.
   */
  data: Prisma.UserBadgeCreateManyInput | Prisma.UserBadgeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserBadge update
 */
export type UserBadgeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBadge
   */
  select?: Prisma.UserBadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBadge
   */
  omit?: Prisma.UserBadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBadgeInclude<ExtArgs> | null
  /**
   * The data needed to update a UserBadge.
   */
  data: Prisma.XOR<Prisma.UserBadgeUpdateInput, Prisma.UserBadgeUncheckedUpdateInput>
  /**
   * Choose, which UserBadge to update.
   */
  where: Prisma.UserBadgeWhereUniqueInput
}

/**
 * UserBadge updateMany
 */
export type UserBadgeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserBadges.
   */
  data: Prisma.XOR<Prisma.UserBadgeUpdateManyMutationInput, Prisma.UserBadgeUncheckedUpdateManyInput>
  /**
   * Filter which UserBadges to update
   */
  where?: Prisma.UserBadgeWhereInput
  /**
   * Limit how many UserBadges to update.
   */
  limit?: number
}

/**
 * UserBadge upsert
 */
export type UserBadgeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBadge
   */
  select?: Prisma.UserBadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBadge
   */
  omit?: Prisma.UserBadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBadgeInclude<ExtArgs> | null
  /**
   * The filter to search for the UserBadge to update in case it exists.
   */
  where: Prisma.UserBadgeWhereUniqueInput
  /**
   * In case the UserBadge found by the `where` argument doesn't exist, create a new UserBadge with this data.
   */
  create: Prisma.XOR<Prisma.UserBadgeCreateInput, Prisma.UserBadgeUncheckedCreateInput>
  /**
   * In case the UserBadge was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserBadgeUpdateInput, Prisma.UserBadgeUncheckedUpdateInput>
}

/**
 * UserBadge delete
 */
export type UserBadgeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBadge
   */
  select?: Prisma.UserBadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBadge
   */
  omit?: Prisma.UserBadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBadgeInclude<ExtArgs> | null
  /**
   * Filter which UserBadge to delete.
   */
  where: Prisma.UserBadgeWhereUniqueInput
}

/**
 * UserBadge deleteMany
 */
export type UserBadgeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserBadges to delete
   */
  where?: Prisma.UserBadgeWhereInput
  /**
   * Limit how many UserBadges to delete.
   */
  limit?: number
}

/**
 * UserBadge without action
 */
export type UserBadgeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBadge
   */
  select?: Prisma.UserBadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBadge
   */
  omit?: Prisma.UserBadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBadgeInclude<ExtArgs> | null
}


/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Badge` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Badge
 * 
 */
export type BadgeModel = runtime.Types.Result.DefaultSelection<Prisma.$BadgePayload>

export type AggregateBadge = {
  _count: BadgeCountAggregateOutputType | null
  _avg: BadgeAvgAggregateOutputType | null
  _sum: BadgeSumAggregateOutputType | null
  _min: BadgeMinAggregateOutputType | null
  _max: BadgeMaxAggregateOutputType | null
}

export type BadgeAvgAggregateOutputType = {
  xpReward: number | null
}

export type BadgeSumAggregateOutputType = {
  xpReward: number | null
}

export type BadgeMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  iconUrl: string | null
  xpReward: number | null
}

export type BadgeMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  iconUrl: string | null
  xpReward: number | null
}

export type BadgeCountAggregateOutputType = {
  id: number
  name: number
  description: number
  iconUrl: number
  xpReward: number
  _all: number
}


export type BadgeAvgAggregateInputType = {
  xpReward?: true
}

export type BadgeSumAggregateInputType = {
  xpReward?: true
}

export type BadgeMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  iconUrl?: true
  xpReward?: true
}

export type BadgeMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  iconUrl?: true
  xpReward?: true
}

export type BadgeCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  iconUrl?: true
  xpReward?: true
  _all?: true
}

export type BadgeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Badge to aggregate.
   */
  where?: Prisma.BadgeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Badges to fetch.
   */
  orderBy?: Prisma.BadgeOrderByWithRelationInput | Prisma.BadgeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BadgeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Badges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Badges.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Badges
  **/
  _count?: true | BadgeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BadgeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BadgeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BadgeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BadgeMaxAggregateInputType
}

export type GetBadgeAggregateType<T extends BadgeAggregateArgs> = {
      [P in keyof T & keyof AggregateBadge]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBadge[P]>
    : Prisma.GetScalarType<T[P], AggregateBadge[P]>
}




export type BadgeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BadgeWhereInput
  orderBy?: Prisma.BadgeOrderByWithAggregationInput | Prisma.BadgeOrderByWithAggregationInput[]
  by: Prisma.BadgeScalarFieldEnum[] | Prisma.BadgeScalarFieldEnum
  having?: Prisma.BadgeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BadgeCountAggregateInputType | true
  _avg?: BadgeAvgAggregateInputType
  _sum?: BadgeSumAggregateInputType
  _min?: BadgeMinAggregateInputType
  _max?: BadgeMaxAggregateInputType
}

export type BadgeGroupByOutputType = {
  id: string
  name: string
  description: string
  iconUrl: string | null
  xpReward: number
  _count: BadgeCountAggregateOutputType | null
  _avg: BadgeAvgAggregateOutputType | null
  _sum: BadgeSumAggregateOutputType | null
  _min: BadgeMinAggregateOutputType | null
  _max: BadgeMaxAggregateOutputType | null
}

type GetBadgeGroupByPayload<T extends BadgeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BadgeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BadgeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BadgeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BadgeGroupByOutputType[P]>
      }
    >
  >



export type BadgeWhereInput = {
  AND?: Prisma.BadgeWhereInput | Prisma.BadgeWhereInput[]
  OR?: Prisma.BadgeWhereInput[]
  NOT?: Prisma.BadgeWhereInput | Prisma.BadgeWhereInput[]
  id?: Prisma.StringFilter<"Badge"> | string
  name?: Prisma.StringFilter<"Badge"> | string
  description?: Prisma.StringFilter<"Badge"> | string
  iconUrl?: Prisma.StringNullableFilter<"Badge"> | string | null
  xpReward?: Prisma.IntFilter<"Badge"> | number
  users?: Prisma.UserBadgeListRelationFilter
}

export type BadgeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  iconUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  xpReward?: Prisma.SortOrder
  users?: Prisma.UserBadgeOrderByRelationAggregateInput
  _relevance?: Prisma.BadgeOrderByRelevanceInput
}

export type BadgeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.BadgeWhereInput | Prisma.BadgeWhereInput[]
  OR?: Prisma.BadgeWhereInput[]
  NOT?: Prisma.BadgeWhereInput | Prisma.BadgeWhereInput[]
  name?: Prisma.StringFilter<"Badge"> | string
  description?: Prisma.StringFilter<"Badge"> | string
  iconUrl?: Prisma.StringNullableFilter<"Badge"> | string | null
  xpReward?: Prisma.IntFilter<"Badge"> | number
  users?: Prisma.UserBadgeListRelationFilter
}, "id">

export type BadgeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  iconUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  xpReward?: Prisma.SortOrder
  _count?: Prisma.BadgeCountOrderByAggregateInput
  _avg?: Prisma.BadgeAvgOrderByAggregateInput
  _max?: Prisma.BadgeMaxOrderByAggregateInput
  _min?: Prisma.BadgeMinOrderByAggregateInput
  _sum?: Prisma.BadgeSumOrderByAggregateInput
}

export type BadgeScalarWhereWithAggregatesInput = {
  AND?: Prisma.BadgeScalarWhereWithAggregatesInput | Prisma.BadgeScalarWhereWithAggregatesInput[]
  OR?: Prisma.BadgeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BadgeScalarWhereWithAggregatesInput | Prisma.BadgeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Badge"> | string
  name?: Prisma.StringWithAggregatesFilter<"Badge"> | string
  description?: Prisma.StringWithAggregatesFilter<"Badge"> | string
  iconUrl?: Prisma.StringNullableWithAggregatesFilter<"Badge"> | string | null
  xpReward?: Prisma.IntWithAggregatesFilter<"Badge"> | number
}

export type BadgeCreateInput = {
  id?: string
  name: string
  description: string
  iconUrl?: string | null
  xpReward?: number
  users?: Prisma.UserBadgeCreateNestedManyWithoutBadgeInput
}

export type BadgeUncheckedCreateInput = {
  id?: string
  name: string
  description: string
  iconUrl?: string | null
  xpReward?: number
  users?: Prisma.UserBadgeUncheckedCreateNestedManyWithoutBadgeInput
}

export type BadgeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  iconUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  xpReward?: Prisma.IntFieldUpdateOperationsInput | number
  users?: Prisma.UserBadgeUpdateManyWithoutBadgeNestedInput
}

export type BadgeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  iconUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  xpReward?: Prisma.IntFieldUpdateOperationsInput | number
  users?: Prisma.UserBadgeUncheckedUpdateManyWithoutBadgeNestedInput
}

export type BadgeCreateManyInput = {
  id?: string
  name: string
  description: string
  iconUrl?: string | null
  xpReward?: number
}

export type BadgeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  iconUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  xpReward?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BadgeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  iconUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  xpReward?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BadgeOrderByRelevanceInput = {
  fields: Prisma.BadgeOrderByRelevanceFieldEnum | Prisma.BadgeOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type BadgeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  iconUrl?: Prisma.SortOrder
  xpReward?: Prisma.SortOrder
}

export type BadgeAvgOrderByAggregateInput = {
  xpReward?: Prisma.SortOrder
}

export type BadgeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  iconUrl?: Prisma.SortOrder
  xpReward?: Prisma.SortOrder
}

export type BadgeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  iconUrl?: Prisma.SortOrder
  xpReward?: Prisma.SortOrder
}

export type BadgeSumOrderByAggregateInput = {
  xpReward?: Prisma.SortOrder
}

export type BadgeScalarRelationFilter = {
  is?: Prisma.BadgeWhereInput
  isNot?: Prisma.BadgeWhereInput
}

export type BadgeCreateNestedOneWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.BadgeCreateWithoutUsersInput, Prisma.BadgeUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.BadgeCreateOrConnectWithoutUsersInput
  connect?: Prisma.BadgeWhereUniqueInput
}

export type BadgeUpdateOneRequiredWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.BadgeCreateWithoutUsersInput, Prisma.BadgeUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.BadgeCreateOrConnectWithoutUsersInput
  upsert?: Prisma.BadgeUpsertWithoutUsersInput
  connect?: Prisma.BadgeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BadgeUpdateToOneWithWhereWithoutUsersInput, Prisma.BadgeUpdateWithoutUsersInput>, Prisma.BadgeUncheckedUpdateWithoutUsersInput>
}

export type BadgeCreateWithoutUsersInput = {
  id?: string
  name: string
  description: string
  iconUrl?: string | null
  xpReward?: number
}

export type BadgeUncheckedCreateWithoutUsersInput = {
  id?: string
  name: string
  description: string
  iconUrl?: string | null
  xpReward?: number
}

export type BadgeCreateOrConnectWithoutUsersInput = {
  where: Prisma.BadgeWhereUniqueInput
  create: Prisma.XOR<Prisma.BadgeCreateWithoutUsersInput, Prisma.BadgeUncheckedCreateWithoutUsersInput>
}

export type BadgeUpsertWithoutUsersInput = {
  update: Prisma.XOR<Prisma.BadgeUpdateWithoutUsersInput, Prisma.BadgeUncheckedUpdateWithoutUsersInput>
  create: Prisma.XOR<Prisma.BadgeCreateWithoutUsersInput, Prisma.BadgeUncheckedCreateWithoutUsersInput>
  where?: Prisma.BadgeWhereInput
}

export type BadgeUpdateToOneWithWhereWithoutUsersInput = {
  where?: Prisma.BadgeWhereInput
  data: Prisma.XOR<Prisma.BadgeUpdateWithoutUsersInput, Prisma.BadgeUncheckedUpdateWithoutUsersInput>
}

export type BadgeUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  iconUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  xpReward?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BadgeUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  iconUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  xpReward?: Prisma.IntFieldUpdateOperationsInput | number
}


/**
 * Count Type BadgeCountOutputType
 */

export type BadgeCountOutputType = {
  users: number
}

export type BadgeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  users?: boolean | BadgeCountOutputTypeCountUsersArgs
}

/**
 * BadgeCountOutputType without action
 */
export type BadgeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BadgeCountOutputType
   */
  select?: Prisma.BadgeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * BadgeCountOutputType without action
 */
export type BadgeCountOutputTypeCountUsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserBadgeWhereInput
}


export type BadgeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  iconUrl?: boolean
  xpReward?: boolean
  users?: boolean | Prisma.Badge$usersArgs<ExtArgs>
  _count?: boolean | Prisma.BadgeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["badge"]>



export type BadgeSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  iconUrl?: boolean
  xpReward?: boolean
}

export type BadgeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "iconUrl" | "xpReward", ExtArgs["result"]["badge"]>
export type BadgeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  users?: boolean | Prisma.Badge$usersArgs<ExtArgs>
  _count?: boolean | Prisma.BadgeCountOutputTypeDefaultArgs<ExtArgs>
}

export type $BadgePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Badge"
  objects: {
    users: Prisma.$UserBadgePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string
    iconUrl: string | null
    xpReward: number
  }, ExtArgs["result"]["badge"]>
  composites: {}
}

export type BadgeGetPayload<S extends boolean | null | undefined | BadgeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BadgePayload, S>

export type BadgeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BadgeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BadgeCountAggregateInputType | true
  }

export interface BadgeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Badge'], meta: { name: 'Badge' } }
  /**
   * Find zero or one Badge that matches the filter.
   * @param {BadgeFindUniqueArgs} args - Arguments to find a Badge
   * @example
   * // Get one Badge
   * const badge = await prisma.badge.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BadgeFindUniqueArgs>(args: Prisma.SelectSubset<T, BadgeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BadgeClient<runtime.Types.Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Badge that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BadgeFindUniqueOrThrowArgs} args - Arguments to find a Badge
   * @example
   * // Get one Badge
   * const badge = await prisma.badge.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BadgeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BadgeClient<runtime.Types.Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Badge that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BadgeFindFirstArgs} args - Arguments to find a Badge
   * @example
   * // Get one Badge
   * const badge = await prisma.badge.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BadgeFindFirstArgs>(args?: Prisma.SelectSubset<T, BadgeFindFirstArgs<ExtArgs>>): Prisma.Prisma__BadgeClient<runtime.Types.Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Badge that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BadgeFindFirstOrThrowArgs} args - Arguments to find a Badge
   * @example
   * // Get one Badge
   * const badge = await prisma.badge.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BadgeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BadgeClient<runtime.Types.Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Badges that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BadgeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Badges
   * const badges = await prisma.badge.findMany()
   * 
   * // Get first 10 Badges
   * const badges = await prisma.badge.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const badgeWithIdOnly = await prisma.badge.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BadgeFindManyArgs>(args?: Prisma.SelectSubset<T, BadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Badge.
   * @param {BadgeCreateArgs} args - Arguments to create a Badge.
   * @example
   * // Create one Badge
   * const Badge = await prisma.badge.create({
   *   data: {
   *     // ... data to create a Badge
   *   }
   * })
   * 
   */
  create<T extends BadgeCreateArgs>(args: Prisma.SelectSubset<T, BadgeCreateArgs<ExtArgs>>): Prisma.Prisma__BadgeClient<runtime.Types.Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Badges.
   * @param {BadgeCreateManyArgs} args - Arguments to create many Badges.
   * @example
   * // Create many Badges
   * const badge = await prisma.badge.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BadgeCreateManyArgs>(args?: Prisma.SelectSubset<T, BadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Badge.
   * @param {BadgeDeleteArgs} args - Arguments to delete one Badge.
   * @example
   * // Delete one Badge
   * const Badge = await prisma.badge.delete({
   *   where: {
   *     // ... filter to delete one Badge
   *   }
   * })
   * 
   */
  delete<T extends BadgeDeleteArgs>(args: Prisma.SelectSubset<T, BadgeDeleteArgs<ExtArgs>>): Prisma.Prisma__BadgeClient<runtime.Types.Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Badge.
   * @param {BadgeUpdateArgs} args - Arguments to update one Badge.
   * @example
   * // Update one Badge
   * const badge = await prisma.badge.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BadgeUpdateArgs>(args: Prisma.SelectSubset<T, BadgeUpdateArgs<ExtArgs>>): Prisma.Prisma__BadgeClient<runtime.Types.Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Badges.
   * @param {BadgeDeleteManyArgs} args - Arguments to filter Badges to delete.
   * @example
   * // Delete a few Badges
   * const { count } = await prisma.badge.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BadgeDeleteManyArgs>(args?: Prisma.SelectSubset<T, BadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Badges.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BadgeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Badges
   * const badge = await prisma.badge.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BadgeUpdateManyArgs>(args: Prisma.SelectSubset<T, BadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Badge.
   * @param {BadgeUpsertArgs} args - Arguments to update or create a Badge.
   * @example
   * // Update or create a Badge
   * const badge = await prisma.badge.upsert({
   *   create: {
   *     // ... data to create a Badge
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Badge we want to update
   *   }
   * })
   */
  upsert<T extends BadgeUpsertArgs>(args: Prisma.SelectSubset<T, BadgeUpsertArgs<ExtArgs>>): Prisma.Prisma__BadgeClient<runtime.Types.Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Badges.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BadgeCountArgs} args - Arguments to filter Badges to count.
   * @example
   * // Count the number of Badges
   * const count = await prisma.badge.count({
   *   where: {
   *     // ... the filter for the Badges we want to count
   *   }
   * })
  **/
  count<T extends BadgeCountArgs>(
    args?: Prisma.Subset<T, BadgeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BadgeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Badge.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BadgeAggregateArgs>(args: Prisma.Subset<T, BadgeAggregateArgs>): Prisma.PrismaPromise<GetBadgeAggregateType<T>>

  /**
   * Group by Badge.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BadgeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BadgeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BadgeGroupByArgs['orderBy'] }
      : { orderBy?: BadgeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Badge model
 */
readonly fields: BadgeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Badge.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BadgeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  users<T extends Prisma.Badge$usersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Badge$usersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Badge model
 */
export interface BadgeFieldRefs {
  readonly id: Prisma.FieldRef<"Badge", 'String'>
  readonly name: Prisma.FieldRef<"Badge", 'String'>
  readonly description: Prisma.FieldRef<"Badge", 'String'>
  readonly iconUrl: Prisma.FieldRef<"Badge", 'String'>
  readonly xpReward: Prisma.FieldRef<"Badge", 'Int'>
}
    

// Custom InputTypes
/**
 * Badge findUnique
 */
export type BadgeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Badge
   */
  select?: Prisma.BadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Badge
   */
  omit?: Prisma.BadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BadgeInclude<ExtArgs> | null
  /**
   * Filter, which Badge to fetch.
   */
  where: Prisma.BadgeWhereUniqueInput
}

/**
 * Badge findUniqueOrThrow
 */
export type BadgeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Badge
   */
  select?: Prisma.BadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Badge
   */
  omit?: Prisma.BadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BadgeInclude<ExtArgs> | null
  /**
   * Filter, which Badge to fetch.
   */
  where: Prisma.BadgeWhereUniqueInput
}

/**
 * Badge findFirst
 */
export type BadgeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Badge
   */
  select?: Prisma.BadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Badge
   */
  omit?: Prisma.BadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BadgeInclude<ExtArgs> | null
  /**
   * Filter, which Badge to fetch.
   */
  where?: Prisma.BadgeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Badges to fetch.
   */
  orderBy?: Prisma.BadgeOrderByWithRelationInput | Prisma.BadgeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Badges.
   */
  cursor?: Prisma.BadgeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Badges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Badges.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Badges.
   */
  distinct?: Prisma.BadgeScalarFieldEnum | Prisma.BadgeScalarFieldEnum[]
}

/**
 * Badge findFirstOrThrow
 */
export type BadgeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Badge
   */
  select?: Prisma.BadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Badge
   */
  omit?: Prisma.BadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BadgeInclude<ExtArgs> | null
  /**
   * Filter, which Badge to fetch.
   */
  where?: Prisma.BadgeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Badges to fetch.
   */
  orderBy?: Prisma.BadgeOrderByWithRelationInput | Prisma.BadgeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Badges.
   */
  cursor?: Prisma.BadgeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Badges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Badges.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Badges.
   */
  distinct?: Prisma.BadgeScalarFieldEnum | Prisma.BadgeScalarFieldEnum[]
}

/**
 * Badge findMany
 */
export type BadgeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Badge
   */
  select?: Prisma.BadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Badge
   */
  omit?: Prisma.BadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BadgeInclude<ExtArgs> | null
  /**
   * Filter, which Badges to fetch.
   */
  where?: Prisma.BadgeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Badges to fetch.
   */
  orderBy?: Prisma.BadgeOrderByWithRelationInput | Prisma.BadgeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Badges.
   */
  cursor?: Prisma.BadgeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Badges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Badges.
   */
  skip?: number
  distinct?: Prisma.BadgeScalarFieldEnum | Prisma.BadgeScalarFieldEnum[]
}

/**
 * Badge create
 */
export type BadgeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Badge
   */
  select?: Prisma.BadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Badge
   */
  omit?: Prisma.BadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BadgeInclude<ExtArgs> | null
  /**
   * The data needed to create a Badge.
   */
  data: Prisma.XOR<Prisma.BadgeCreateInput, Prisma.BadgeUncheckedCreateInput>
}

/**
 * Badge createMany
 */
export type BadgeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Badges.
   */
  data: Prisma.BadgeCreateManyInput | Prisma.BadgeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Badge update
 */
export type BadgeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Badge
   */
  select?: Prisma.BadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Badge
   */
  omit?: Prisma.BadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BadgeInclude<ExtArgs> | null
  /**
   * The data needed to update a Badge.
   */
  data: Prisma.XOR<Prisma.BadgeUpdateInput, Prisma.BadgeUncheckedUpdateInput>
  /**
   * Choose, which Badge to update.
   */
  where: Prisma.BadgeWhereUniqueInput
}

/**
 * Badge updateMany
 */
export type BadgeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Badges.
   */
  data: Prisma.XOR<Prisma.BadgeUpdateManyMutationInput, Prisma.BadgeUncheckedUpdateManyInput>
  /**
   * Filter which Badges to update
   */
  where?: Prisma.BadgeWhereInput
  /**
   * Limit how many Badges to update.
   */
  limit?: number
}

/**
 * Badge upsert
 */
export type BadgeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Badge
   */
  select?: Prisma.BadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Badge
   */
  omit?: Prisma.BadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BadgeInclude<ExtArgs> | null
  /**
   * The filter to search for the Badge to update in case it exists.
   */
  where: Prisma.BadgeWhereUniqueInput
  /**
   * In case the Badge found by the `where` argument doesn't exist, create a new Badge with this data.
   */
  create: Prisma.XOR<Prisma.BadgeCreateInput, Prisma.BadgeUncheckedCreateInput>
  /**
   * In case the Badge was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BadgeUpdateInput, Prisma.BadgeUncheckedUpdateInput>
}

/**
 * Badge delete
 */
export type BadgeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Badge
   */
  select?: Prisma.BadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Badge
   */
  omit?: Prisma.BadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BadgeInclude<ExtArgs> | null
  /**
   * Filter which Badge to delete.
   */
  where: Prisma.BadgeWhereUniqueInput
}

/**
 * Badge deleteMany
 */
export type BadgeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Badges to delete
   */
  where?: Prisma.BadgeWhereInput
  /**
   * Limit how many Badges to delete.
   */
  limit?: number
}

/**
 * Badge.users
 */
export type Badge$usersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserBadge
   */
  select?: Prisma.UserBadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserBadge
   */
  omit?: Prisma.UserBadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserBadgeInclude<ExtArgs> | null
  where?: Prisma.UserBadgeWhereInput
  orderBy?: Prisma.UserBadgeOrderByWithRelationInput | Prisma.UserBadgeOrderByWithRelationInput[]
  cursor?: Prisma.UserBadgeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserBadgeScalarFieldEnum | Prisma.UserBadgeScalarFieldEnum[]
}

/**
 * Badge without action
 */
export type BadgeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Badge
   */
  select?: Prisma.BadgeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Badge
   */
  omit?: Prisma.BadgeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BadgeInclude<ExtArgs> | null
}
